<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<!-- 
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

	This code is Copyright (c) 2004-2007, Microsoft Corporation.  

	All rights reserved.

	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDfpc4:arraypolicy
	ING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.

	IN NO EVENT SHALL MICROSOFT AND/OR ITS RESPECTIVE SUPPLIERS BE
	LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
	DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
	WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
	ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
	OF THIS CODE OR INFORMATION.

	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	Purpose:
		Import and render ISA 2004 and 2006 configuration XML files as HTML
		
	Usage:
		dbl-click from a local drive
		
	History:
		1.0				09/17/2004 - RTM for ISA 2004 SE
		1.0.2161.2		11/15/2004 - Added Processes
						   - Fixed IP Options error
						   - Added Additional window popup for comparisons
						   - Added VPN client/server IP data
						   - corrected textarea foreground colors
						   - made Ref lookups case-insensitive
						   - fixed user sets name display
						   - added EE basic data display
						   - updated web proxy details display
		1.0.2161.3		11/29/2004 - Added GFI Download Security VPS GUID
		1.0.2161.4		12/02/2004 - Added "omit-xml-declaration" to XSL
		1.0.2161.5		12/05/2004 - Clarified Security Descriptor info
		1.0.2161.6		12/17/2004 - fixed filename dislpay
							- fixed boolean xpath throughout
		1.0.2161.7		02/04/2005 - dropped the scan code for now
		1.0.2161.8		04/05/2005 - added default auth method for web proxy listener
							- added AddressRanges collection
		1.0.2161.9		06/27/2005 - Finished Enumerations and default values
		1.0.2161.10		07/15/2005 - fixed HTTP Filter values & SSL State
							- Added IIS and Winsock display
							- Cleaned up PathMappings display
							- Fixed Cache Rule display
							- Added DHCP server informaation
		1.0.2161.11		08/17/2005 - added VPN Network properties
		1.0.2161.12		10/27/2005 - various presentation cleanup
		1.0.2161.13     11/11/2005 - fixed SecurID data reading
		1.0.2161.14		12/07/2005 - added RPC filter custom settings VPS
		1.0.2161.15		01/04/2006 - updated HTTP Filter AllowAction
		1.0.2161.16		01/11/2006 - added compression & diffserv (SP2)
		1.0.2161.17     - skipped to bring .js & .hta in line
		1.0.2161.18		02/17/2006 - updated output formatting
		1.0.2161.19		02/23/2006 - added script version tracking
		1.0.2161.20		06/08/2006 - fixed resizing & character decoding
		1.0.2161.21     06/21/2006 - added ipsec rendering
		1.0.2161.22     05/17/2007 - fixed web filter ordering
		1.0.2161.23     07/19/2007 - Added display for ipsec sta sho all
		                           - Clarified Exch WP wizard data 
		                           - Added LDAP Server data
		                           - Added Global LT settings
		                           - Updated auth delegation
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
-->
<head>
    <meta name="VI60_defaultClientScript" content="JScript">
    <meta name="vs_targetSchema" content="http://schemas.microsoft.com/intellisense/ie5">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title></title>
    <!-- HTA attribute explanations:
			Border, BorderStyle, MaximizeButton, MinimizeButton settings allow window resizing;
			Caption creates title bar; Selection allows "find" and text C&P; Scroll controls app 
			window scrolling; SingleInstance controls how many identical apps can run together; 
			Sysmenu allows control buttons; 
		-->
    <hta:application 
        id="ISAInfo" 
        applicationname="ISAInfo Viewer" 
        border="thick" 
        borderstyle="dialog"
        caption="yes" 
        contextmenu="yes" 
        icon="" 
        innerborder="yes" 
        maximizebutton="yes"
        minimizebutton="yes" 
        navigable="yes" 
        scroll="no" 
        scrollflat="yes" 
        selection="yes"
        showintaskbar="yes" 
        singleinstance="no" 
        sysmenu="yes" 
        version="1.0.2161.23" 
        windowstate="normal" />
</head>
<!--
		Collection of helper functions for the HTA page itself
	-->

<script language="JScript" id="htasupport">
		/*
			global data, since JScript can't pass "byref" - default to null
		 */
		var g_oObjects   = null;
		var g_oVariables = null;
		var g_oMessages  = null;

		/**********************************************************************
		 * AppInitialize() 
		 *
		 * 1. positions and sizes the application according to screen real estate
		 * 2. validates the existence of required objects
		 * 3. initializes the XMLDom objects for use
		 *
		 * If successful, control is returned to the page
		 * If not, an error message is displayed to the user and execution ends
		 *
		 *********************************************************************/
		function AppInitialize()
		{
			if ( GetObjects() == false || LoadXsl() == false )
			{
				window.close();
				return;
			}
			
			DisplayApp();
			
			g_oVariables.szThisServer = g_oObjects.oWshShell.ExpandEnvironmentStrings( "%ComputerName%" );
			g_oVariables.szThisUser   = g_oObjects.oWshShell.ExpandEnvironmentStrings( "%UserDomain%" ) + 
										"\\" + g_oObjects.oWshShell.ExpandEnvironmentStrings( "%UserName%" );
			g_oVariables.szDesktop    = g_oObjects.oWshShell.SpecialFolders( "Desktop" ) + "\\";
			g_oVariables.szIsaInfoPath   = g_oVariables.szDesktop  + "ISAInfo_" + 
										g_oVariables.szThisServer + ".xml";
			g_oVariables.szTraceFile  = g_oVariables.szDesktop + "\\ISAInfo_" + 
										g_oVariables.szThisServer + ".log";
			g_oVariables.szTempFile  = g_oVariables.szDesktop + "\\tempfile.txt";

			return LoadXMLFile();
		}
		
		/**********************************************************************
		 * GetObjects()
		 *
		 * 1. Attempts to create the required objects
		 *
		 * If any of the required object creation calls fails, it displays the 
		 * failure to the user and returns false.  Otherwise, it returns true.
		 *
		 *********************************************************************/
		function GetObjects()
		{
			g_oObjects = new ISAInfoObjects();
			g_oVariables = new ISAInfoVariables();
			g_oMessages = new ISAInfoMessages();

			try
			{
				g_oObjects.oWshShell = ObjFactory( "WScript.Shell", g_oMessages.L_NoWshShell_txt );
			}
			catch( err )
			{
				ShowError( err, "Your Script Shell object is not accessible.\r\n" + 
						"Please examine your event log for related errors." );
				return false;
			}

			try
			{
				g_oObjects.oFSO = ObjFactory( "Scripting.FileSystemObject", g_oMessages.L_NoFSO_txt );
			}
			catch( err )
			{
				ShowError( err, "Your Script File System object is not accessible.\r\n" + 
						"Please examine your event log for related errors." );
				return false;
			}

			try
			{
				g_oObjects.oIsaXml = ObjFactory( "MSXML2.DomDocument.3.0", g_oMessages.L_NoIsaXml_txt ); 
				g_oObjects.oIsaXml.async = false;
			}
			catch( err )
			{
				ShowError( err, "MSXML 3.0 is required for this application.\r\n" + 
						"Please examine your event log for related errors." );
				return false;
			}

			try
			{
				g_oObjects.oIsaXsl = ObjFactory( "MSXML2.DomDocument.3.0", g_oMessages.L_NoIsaXsl_txt ); 
				g_oObjects.oIsaXsl.async = false;
			}
			catch( err )
			{
				ShowError( err, "MSXML 3.0 is required for this application.\r\n" + 
						"Please examine your event log for related errors." );
				return false;
			}
			return true
		}

		/**********************************************************************
		 * DisplayApp()
		 *
		 * Establish the initial location and size of the HTA window
		 *
		 *********************************************************************/
		function DisplayApp()
		{
			/*
				define the default window title text and display method
			 */
			document.parentWindow.offscreenBuffering = false;
			document.title = g_oMessages.L_TitleMsg_txt;

			/*
				define the initial window size ( avail size - 50% )
			 */
			var ScrnH = parseInt( screen.availHeight );
			var ScrnW = parseInt( screen.availWidth );
			resizeTo( ScrnW - ( ScrnW / 4 ), ScrnH - ( ScrnH / 4 ) );

			/*
				define the initial window location (centered on screen)
			 */
			var h1 = parseInt( ScrnH / 2 );
			var h2 = parseInt( document.body.offsetHeight / 2 );
			var w1 = parseInt( ScrnW / 2 );
			var w2 = parseInt( document.body.offsetWidth / 2 );
			moveTo( w1 - w2, h1 - h2 );
			
			ISAInfo.windowState = "normal";
		}
		
		/**********************************************************************
		 * LoadXsl() 
		 *
		 *  Reads the XSL transform stored in the <XML> tag into the szXslRef variable 
		 *
		 * If successful, returns 'true' and g_oObjects.oIsaXsl contains the data from the <XML> tag
		 * If not, returns 'false' and calls XMLError to display the error details
		 *
		 *********************************************************************/
		function LoadXsl()
		{
			var ForWriting = 2;
			var szXslRef = document.getElementById( "isa" ).innerHTML
			if ( g_oObjects.oIsaXsl.loadXML( szXslRef ) )
			{
				return true;
			}
			ShowXmlDomError( g_oObjects.oIsaXsl, g_oMessages.L_BadXsl_txt );
			return false;
		}

		/**********************************************************************
		 * LoadXMLFile( )
		 *
		 *  1. Reads the XML file specified by user input
		 *  2. Validates file existence
		 *  3. Validates file contents through XMLDom
		 *  4. Acquires the filename for display in the title bar
		 *
		 * If successful, returns 'true' and g_oObjects.oIsaXml contains the data from the specified file
		 * If not, returns 'false' and calls XMLError to display the error details if any occur
		 *
		 *********************************************************************/
		function LoadXMLFile( )
		{
			var o_TempFile = null;
			if ( g_oVariables.fDirty && !confirm( g_oMessages.L_DataLoss_txt ) ) 
			{
				return false;
			}
				
			ShowStatus( g_oMessages.L_FileLoc_txt );
			var Rtn = frmMain.FileName.click();

			if ( frmMain.FileName.value == "" )
			{
				ShowStatus( g_oMessages.L_FileCanx_txt );
				return true;
			}

			g_oVariables.szXmlFile = frmMain.FileName.value;
			ShowStatus( "Reading " + g_oVariables.szXmlFile );

			if ( !g_oObjects.oIsaXml.load( g_oVariables.szXmlFile ) )
			{
				ShowXmlDomError( g_oObjects.oIsaXml, g_oMessages.L_GetFileFailed_txt + 
								g_oVariables.szXmlFile + "\r\n" + 
								g_oMessages.L_BadXmlFile_txt );
				ShowStatus( );
				return false;
			}
			var tempNode = CheckXML( g_oObjects.oIsaXml );
			if ( !tempNode )
			{
				alert( g_oVariables.szXmlFile + g_oMessages.L_InvalidXml_txt );
				ShowStatus( g_oVariables.szXmlFile + g_oMessages.L_InvalidXml_txt );
				return false;
			}

			document.body.style.cursor = "wait";
			if ( RenderXML( ) == true )
			{
				document.title = g_oMessages.L_TitleMsg_txt + g_oMessages.L_Displaying_txt + g_oVariables.szXmlFile
				g_oVariables.fDirty = true;
				ShowStatus( "Sucessfully rendered " + g_oVariables.szXmlFile );
				document.body.style.cursor = "";
				return true;
			}
			document.body.style.cursor = "";
			frmMain.FileName.value = "";
		}

        function CheckXML( XmlDomDocument )
        {
            var oXmlRoot = XmlDomDocument.selectSingleNode( "fpc4:Root" );
            if( !oXmlRoot )
            {
                return oXmlRoot;
            }
            var szComment = oXmlRoot.selectSingleNode( "fpc4:Comment" ).text;
            var oRegEx = /isainfo/i ;
            if( !oRegEx.test( szComment ) )    //not an ISAInfo-created XML file
            {
                return oXmlRoot;
            }
            var oScriptVer = oXmlRoot.selectSingleNode( "./fpc4:Arrays/fpc4:Array/fpc4:Servers/fpc4:Server/ISAInfoData/ScriptVersion" );
            if( !oScriptVer || oScriptVer.text != ISAInfo.version )
            {
                return CleanXML( oXmlRoot );
            }
            return oXmlRoot;
        }
        
        function CleanXML( oXmlRoot )
        {
            var cNodeList = oXmlRoot.selectNodes( "//ISAInfoData" );
            for( var inx = 0; inx < cNodeList.length; inx++ )
            {
                var oIsaInfoNode = cNodeList.item( inx );
                
                var oRegEx = /\[CDATA\[/ig;
                if( !oRegEx.test( oXmlRoot.xml ) )
                {
                    CleanText( oIsaInfoNode );
                }
            }
            return oXmlRoot;
        }
        
        function CleanText( oXmlNode )
        {
            var cNodeList = oXmlNode.childNodes;
            for( var inx = 0; inx < cNodeList.length; inx++ )
            {
                var oChildNode = cNodeList.item( inx );
                var iNODE_TEXT = 3;
                if( iNODE_TEXT != oChildNode.nodeType )
                {
                    CleanText( oChildNode );
                }
            }
            var szXmlText = oXmlNode.text;
            var oRegEx = /\%([a-f,A-F,0-9]){2}/g;   //escaped chars are in %## format
            if( "" == szXmlText || !oRegEx.test( szXmlText ) )
            {
                return;
            }
            var oParentNode = oXmlNode.parentNode;
            var oNewNode = oParentNode.ownerDocument.createElement( oXmlNode.nodeName );
            var oCdataNode = oParentNode.ownerDocument.createCDATASection( unescape( szXmlText ) );
            oNewNode.appendChild( oCdataNode );
            oParentNode.replaceChild( oNewNode, oXmlNode );
        }

		function BtnClick( btnProcess )
		{
			var Process = "";

			switch( btnProcess.name )
			{
				case "btnScan":
					Process = "ScanIsa()";
					ShowStatus( "Scanning the ISA arrays..." );
					break;
				case "btnSave":
					Process = "SaveXmlToFile()";
					ShowStatus( "Prompting for the file save location..." );
					break;
				case "btnLoad":
					Process = "LoadXMLFile()";
					ShowStatus( "Prompting for the file to load..." );
			}
			document.body.style.cursor = "wait";
			btnProcess.disabled = true;
			window.setTimeout( Process, 5 );
			btnProcess.disabled = false;
			document.body.style.cursor = "";
		}

		/**********************************************************************
		 * RenderXML()
		 *
		 *  Renders the XML data by transforming it through the g_oObjects.oIsaXsl object
		 *
		 * If successful
		 *	- updates the 'g_oVariables.fDirty' state
		 *	- an XML file is created at the specified path
		 *	- Updates the title bar to reflect the current file path
		 *	- returns 'true'
		 * If not, returns 'false' and calls XMLError to display the error details
		 *
		 *********************************************************************/
		function RenderXML()
		{
			ShowStatus( "Transforming the XML..." );
			var strResult = "";
			try
			{
				strResult = g_oObjects.oIsaXml.transformNode( g_oObjects.oIsaXsl );
			}
			catch(e)
			{
				alert( "Error " + e.number + "; " + e.description );
				ShowXmlDomError( g_oObjects.oIsaXml, g_oMessages.L_XformFailed_txt );
				return false;
			}
			document.getElementById("left").outerHTML = strResult;
			document.getElementById("RootItem").click();
			return true;
		}

		/**********************************************************************
		 * ShowXmlDomError( Context )
		 *
		 *  Gathers the parseError data from XMLDom reporting an error
		 *  Displays all data to the user
		 *
		 *********************************************************************/
		function ShowXmlDomError( Context, ErrMsg )
		{
			var Message;
			
			if ( ErrMsg != "" )
			{
				ErrMsg += "\n\r\n\r";
			}

			alert( ErrMsg + 
					"Error " + ToHex( Context.parseError.errorCode ) + 
					" in " + Context.parseError.url + 
					"\n\rDescription: " + Context.parseError.reason + 
					"\n\rLine #     : " + Context.parseError.line + 
					"\r\nColumn #   : " + Context.parseError.linepos + 
					"\n\rText       : " + Context.parseError.srcText
					);
		}


		/**********************************************************************
		 * ToggleDisplay( Target, ClearDisplay )
		 *
		 *  Toggles the style.display attribute on the passed object between 
		 *  'inline' and 'none'
		 *  If the style.display becomes 'none' and ClearDisplay = true, then 
		 *  the right side is cleared
		 *
		 *********************************************************************/
		function ToggleDisplay( Target, ClearRight )
		{
			var Style = Target.style;
			if ( Style.display != "none" )
			{
				Style.display = "none";
				if( ClearRight )
				{
					document.all("right").outerHTML = "<table id=\"right\"/>";
				}
				return;
			}
			Style.display = "inline";
		}

		/**********************************************************************
		 * ShowTable(Source)
		 *
		 *  displays the passed table data in the right pane
		 *
		 *********************************************************************/
		function ShowTable( Table ) 
		{

			var temp = Table.id
			var right = document.all("right");
			
			Table.id = "right";
			Table.style.display = "inline";
			right.outerHTML = Table.outerHTML;
			Table.id = temp;
			Table.style.display = "none";			
		}

		/**********************************************************************
		 * ShowStatus( message )
		 *
		 *  displays the passed message in the status bar; allows the window
		 *  5 mSec to update via window.setTimeout() call
		 *
		 *********************************************************************/
		function ShowStatus( szMessage )
		{
			document.getElementById("statusText").innerText = szMessage;
			window.setTimeout( "DoEvents()", 5 );
		}
		
		/**********************************************************************
		 * DoEvents( )
		 *
		 *  noop function for ShowStatus()
		 *
		 *********************************************************************/
		function DoEvents( )
		{
			document.recalc();
		}
		
		/**********************************************************************
		 * NewWindow( )
		 *
		 *  opens a new window with data specified in HTML
		 *
		 *********************************************************************/
		function NewWindow( Item, Name  )
		{
			var oItem = Item;
			var szMarkup = "<HTLM><HEAD/>" +
							document.getElementById( "defaultWindow" ).innerHTML + 
							"<BODY/></HTML>";

			var oWindow = window.open( "", "", "height=250,width=350,menubar=no," +
												"resizable=yes,titlebar=no" );
			oWindow.document.write( szMarkup );
			oWindow.document.title = Name;
			if( oItem.style.display != "inline" )
			{
				oItem.style.display = "inline";
			}
			oWindow.document.body.innerHTML = oItem.outerHTML;
			g_oObjects.aWindows.push( oWindow );
			return;
		}
		
		/**********************************************************************
		 * CloseWindows( )
		 *
		 *  closes all windows opened by this app
		 *
		 *********************************************************************/
		function CloseWindows( )
		{
			for( var item in g_oObjects.aWindows )
			{
				var oWindow = g_oObjects.aWindows[ item ];
				if( !oWindow.closed )
				{
					oWindow.close();
				}
			}
			return;
		}
		
		/**********************************************************************
		 * RichToolTip( item )
		 *
		 *  creates a popop containing the data from the item passed
		 *
		 *********************************************************************/
		function RichToolTip( item, data )
		{
			g_oObjects.oPopup = window.createPopup( );
			var lefter = event.offsetY+0;
			var topper = event.offsetX+15;
			g_oObjects.oPopup.document.body.innerHTML = oToolTip.innerHTML; 
			g_oObjects.oPopup.show(topper, lefter, 170, 120, item);
		}
		
		/**********************************************************************
		* ToHex( value )
		* converts a number to its hexadecimal equivalent
		* accounts for hResult negative numbers
		*
		* if successful:
		*	returns 'value' as a hex string
		*
		* if unsuccessful:
		*	undefined
		*********************************************************************/
		function ToHex( value )
		{
			if( value < 0 )
			{
				value += 0x100000000
			}
			return "0x" + value.toString( 16 ).toUpperCase();
		}

		/**********************************************************************
		* ShowError()
		* Displays error message and error state
		*
		*********************************************************************/
		function ShowError( oErr, szMessage )
		{
			szMessage += g_oMessages.L_ErrNum_txt + ToHex( oErr.number ) + 
							g_oMessages.L_ErrDesc_txt + oErr.description;
			LogMessage( szMessage );
			alert( szMessage + g_oMessages.L_CopyMsg_txt);
		}

		/**********************************************************************
		* LogMessage( szMessage )
		* This function:
		*	1. Writes szMessage to the trace log and the console if not running
		*		under MPSReports
		*	2. calls into
		*		g_oObjects.fsTraceFile.Write()
		*  3. called by 
		*		- nearly all functions -
		*
		* if successful:
		*	1. trace log and optionally the console contain szMessage
		*
		* if unsuccessful:
		*	1. depends on the error
		*********************************************************************/
		function LogMessage( szMessage )
		{
			var Now = new Date().toTimeString();
			var szMsg = szMessage;

			if( szMessage.length > 2 )	//don't timestamp '\r\n'
			{
				szMsg = Now + ": " + szMessage;
			}
			
			if ( g_oObjects.fsTraceFile != null )
			{
				g_oObjects.fsTraceFile.WriteLine( szMsg );
			}
		}

		/**********************************************************************
		* ShowInfo()
		* Displays ISAInfo basic information when the user r-clicks anything
		*
		*********************************************************************/
		function ShowInfo()
		{
			var OK = 0;
			var Seconds = 5;
			var Info = 64;
			var SrcElement = window.event.srcElement;

			g_oObjects.oWshShell.Popup( "ISA Server Configuration XML " +
							"Rendering Utility version " + ISAInfo.version +
							"\r\n\r\nThis program is Copyright (c) 2004-2006 Microsoft " +
							"Corporation." +
							"\r\n\r\nAll rights reserved.", Seconds, 
							g_oMessages.L_TitleMsg_txt, OK + Info );
		}

		/**********************************************************************
		* SetSelected()
		* Sets the current object to "selected" and unsets the previously
		* selected object
		*
		*********************************************************************/
		function SetSelected( Item )
		{
			var ThisItem = "";
			var inx = 0;
			var Left = frmMain.all( "div_left" );
			var TestItem = null;
			var Selected = document.getElementById( g_oVariables.szSelectedID );
			
			if( Selected != null )
			{
				Selected.style.color = "";
			}

			g_oVariables.szSelectedID = Item.id;
			if( g_oVariables.szSelectedID == "" )
			{
				Item.id = Item.uniqueID;
				g_oVariables.szSelectedID = Item.id;
			}

			Item.style.color = "darkred";
		}

		/**********************************************************************
		* ObjFactory( ObjName, ErrText )
		* Attempts to create a new ActiveXObject of type "ObjName"
		* Uses the error text provided if catch() reached
		*
		* if successful:
		*	returns object created
		*
		* if unsuccessful:
		*	returns null object
		*********************************************************************/
		function ObjFactory( ObjName, ErrText )
		{
			try
			{
				var NewObj = new ActiveXObject( ObjName );
				return NewObj;
			}
			catch( err )
			{
				if ( ObjName != "FPC.Root" )
				{
					ShowError( err, "\"" + ObjName + "\" creation error" );
				}
				throw( err );
			}
		}
		
</script>

<script language="jscript" id="common">
		/**********************************************************************
		 * ISAInfoObjects()
		 *
		 * provides common access to global objects as a group
		 *
		 *********************************************************************/
		function ISAInfoObjects()
		{
			this.oWshShell   = null;
			this.aWindows	 = new Array();	//a place to track our open windows
			this.oISA        = null;
			this.oThisArray  = null;
			this.oFSO        = null;
			this.fsTraceFile = null;		//tracing log filestream object
			this.oWmiCimv2	 = null;		//SWBem services object
			this.oWmiReg	 = null;		//SWbem registry object
			this.oIsaXml     = null;
			this.oIsaXsl     = null;
			this.oPopup		 = window.createPopup();	//default popup object
		}

		/**********************************************************************
		 * ISAInfoVariables()
		 *
		 * provides common access to global variables as a group
		 *
		 *********************************************************************/
		function ISAInfoVariables()
		{
			this.fDirty				= false;		//flag to determine if current data is "fresh"
			this.szThisServer		= "";		//the server where the app runs
			this.szThisUser			= "";		//the interactive user
			this.szDesktop			= "";		//where the output XML and log will be saved
			this.szTraceFile		= "";		//scanning trace file
			this.szCleanLeft		= "<table cellspacing=\"0\" id=\"left\"><tr><td></td></tr></table>";
			this.szCleanRight		= "<table cellspacing=\"0\" id=\"right\"><tr><td></td></tr></table>";
			this.szSelectedID		= "";		//currently selected item
			this.fLocal_RRAS		= false;	//RRAS running state for local server
			this.fIsW2K3			= false;	//used for netstat variation
			this.fSaveXml			= false;	//bool to trigger XML saves
			this.szISAInfoPath		= "";		//path for all ISAInfo files
			this.szXmlFile			= "";		//filename for the output XML
			this.lS_OK				= 0;		//default "all ok" return value
			this.fMPSReports		= false;	//MPSReports compatibility flag
			this.lHKLM				= 0x80000002;//WMI uses long values to identify Hive roots
		}
		
		/**********************************************************************
		 * ISAInfoMessages()
		 *
		 * provides common access to global messages as a group
		 *
		 *********************************************************************/
		function ISAInfoMessages()
		{
			this.L_TitleMsg_txt	    = ISAInfo.applicationName + " version " + ISAInfo.version;
			this.L_ScanBtn_txt		= "Reads ISA configuration data from an ISA server.";
			this.L_SaveBtn_txt		= "Save ISA configuration data to a file.";
			this.L_LoadBtn_txt		= "Load ISA configuration data from a file.";
			this.L_Status_txt		= "Status and error messages appear here.";
			this.L_Left_txt			= "Main ISA configuration elements";
			this.L_Right_txt		= "Selected element data";
			this.L_FileLoc_txt		= "Requesting ISA XML file location.";
			this.L_FileCanx_txt		= "File read canceled.";
			this.L_XmlSaved_txt		= "Saved the XML data to ";
			this.L_Displaying_txt	= " ..displaying .... ";
			this.L_Comment1_txt		= "ISA XML export created by ";
			this.L_Comment2_txt		= " using " + this.L_TitleMsg_txt + " on ";

			/*	
			 ************  error messages  ***************
			 */
			this.L_ObjCreateErr_txt			= "\t*** Error encountered while creating ";
			this.L_NoWshShell_txt			= "\t*** Unable to access the WScript.Shell object";
			this.L_NoFso_txt				= "\t*** Unable to access the FileScripting object";
			this.L_NoLogFile_txt			= "\t*** Unable to create ";
			this.L_NoXmlSave_txt			= "\t*** Unable to save ";
			this.L_NoRras_txt				= "\t*** Unable to access the RemoteAccess Service.";
			this.L_NoWmiCimv2_txt			= "\t*** Unable to access the root\\default WMI namespace on ";
			this.L_NoWmiReg_txt				= "\t*** Unable to access the StdRegProv WMI class on ";
			this.L_SvrConnErr_txt			= "\t*** Failed to connect to WMI on ";
			this.L_QueryFailed_txt			= "\t*** Failed to query ";
			this.L_NoIsaData_txt			= "\t*** Unable to access MSXML2.DomDocument3.0 on ";
			this.L_GetISAFailed_txt			= "\t*** Unable to access the ISA Admin COM object.";
			this.L_SetupFailed_txt			= "\t*** Failed to complete the setup function tasks.";
			this.L_IsaDataFailed_txt 		= "\t*** Failed to gather ISA configuration data.";
			this.L_GetSvrFailed_txt			= "\t*** Failed to gather Server data.";
			this.L_CloseFailed_txt			= "\t*** Failed to close ";
			this.L_SaveFailed_txt			= "\t*** Failed to save ";
			this.L_ExportFailed_txt			= "\t*** Failed to export ISA configuration data.";
			this.L_RunFailed_txt			= "\t*** Failed to execute ";
			this.L_GetFileFailed_txt		= "\t*** Failed to read ";
			this.L_EnumKeysFail_txt			= "\t*** Failed to enumerate registry keys in ";
			this.L_EnumValuesFail_txt 		= "\t*** Failed to enumerate registry values in ";
			this.L_ReadFailed_txt			= "\t*** Failed to read ";
			this.L_ParseFailed_txt			= "\t*** Failed to parse g_oObjects.oIsaXml.";
			this.L_ConvertFailed_txt		= "\t*** Failed to convert g_oObjects.oIsaXml.xml.";
			this.L_ExtRunFailed_txt			= " returned %ErrorLevel% = ";
			this.L_CreateFailed1_txt		= "\t*** Failed to create a ";
			this.L_CreateFailed2_txt		= " child node with \"";
			this.L_CreateFailed3_txt		= "\" g_oMessages.";
			this.L_AccessFailed_txt			= "\t*** Failed to access oServer.";
			this.L_AclFailed_txt			= "\t*** Failed to access the SD for ";
			this.L_LogFileSecFailed_txt 	= "Failed to access LogicalShareSecuritySetting for ";
			this.L_ErrNum_txt				= "\r\n\r\nError Number : ";
			this.L_ErrDesc_txt				= "\r\nDescription  : ";
			this.L_ErrSource_txt			= "\r\nSource       : ";
			this.L_Err_Line_txt				= "\r\nLine         : ";
			this.L_Err_Char_txt				= "\r\nChar         : ";
			this.L_Err_Text_txt				= "\r\nText         : ";
			this.L_CopyMsg_txt				= "\r\n\r\nHit <Ctrl>-C to copy this message to the clipboard.";
			this.L_Continue_txt				= "\r\n\r\nDo you wish to continue (\"No\" cancels)?";
			this.L_Quitting_txt				= "ISAInfo cannot continue...";
			this.L_Canceled_txt				= "\r\n\r\nISAInfo run canceled by user.";
			this.L_ClipBoard_txt			= "Hit <CTRL>-C to copy this message to the clipboard.";
			this.L_BadXmlFile_txt			= "\tIt may not be a valid XML file.";
			this.L_SaveFail_txt				= "Failed to save ";
			this.L_XformFailed_txt			= "Failed to transform the XML.";
			this.L_InvalidXml_txt			= " does not contain valid ISA XML data.";
			this.L_BadXsl_txt				= "Failed to load the XSL reference elements; " + 
												"\r\nThis application may be corrupted."
			this.L_DataLoss_txt				= "This action will overwrite existing ISA data; do you wish" +
												" to continue?";
			this.L_NoISA2K4_txt				= "ISA Array objects are not available to this host." +
												"\n\rYou will be able to display ISA XML files, but you" +
												"\n\rwill not be able to scan an ISA server or array.";
			this.L_NoWshShell_txt			= "Failed to create the \"oWshShell\" object.";
			this.L_NoIsaXml_txt				= "Failed to instantiate the \"oIsaXml\" object";
			this.L_NoIsaXsl_txt				= "Failed to instantiate the \"oIsaXsl\" object";
			this.L_NoFSO_txt				= "Failed to instantiate the \"FSO\" object";
			this.L_OkQuit_txt				= "\n\nClick \"Ok\" to continue, or \"Cancel\" to quit.";
			/*	
			 ************  logging messages  ***************
			 */
			this.L_RunningOn_txt			= "Running on ";
			this.L_RunningAs_txt			= " as ";
			this.L_Start_txt				= "Started ";
			this.L_AccessObj_txt			= " -- Accessing \"";
			this.L_CreateLog_txt			= " -- Creating ";
			this.L_szXmlFile_txt			= " -- Saving ";
			this.L_AccessWMI_txt			= " -- Accessing WMI on ";
			this.L_GetISA_txt				= " -- Accessing ISA Admin COM...";
			this.L_ReadIsaData_txt			= " -- Exporting ISA configuration (this may take some time)...";
			this.L_IsaSvrData_txt			= " -- Reading additional ISA Server data...";
			this.L_CheckRras_txt			= " -- Determining RemoteAccess service state...";
			this.L_GetSvrs_txt				= " -- Enumerating the servers in this array...";
			this.L_GetEvtLogs_txt			= " -- Reading the event logs...";
			this.L_SigAlerts_txt			= " -- Reading ISA signaled alerts...";
			this.L_GetShares_txt			= " -- Enumerating the shares on this server...";
			this.L_RunCmd_txt				= " -- Executing ";
			this.L_GetFile_txt				= " -- Reading ";
			this.L_WmiQuery_txt				= " -- Executing WMI query \"";
			this.L_EnumKey_txt				= " -- Reading registry tree at ";
			this.L_Cleanup_txt				= " -- Cleaning up the XML...";
			this.L_LogConfig_txt			= " -- Reading Array Logging configuration.";
			this.L_AllDone_txt				= "\r\n\r\n" + this.L_TitleMsg_txt + " completed at ";
			/*	
			 ************  HTA element messages  ***************
			 */
			this.L_btnScan_txt				= "Initiate a scan of this ISA array.";
			this.L_btnSave_txt				= "Saves the ISA data to a file.";
			this.L_btnLoad_txt				= "Loads an ISA XML file for viewing.";
		}
</script>

<style type="text/css">

		body { 
			background:			lightskyblue;
		} 
		
		button {
		}
		
		DIV {
			OVERFLOW-X:			scroll;
			OVERFLOW-Y:			scroll;
			height:				expression( ( document.body.clientHeight * .95 ) - 120 );
		}

		Form {
			position: 			absolute; 
			bgcolor:			#C0C0C0;
			border:				0px;
			width: 				99%;
			height:				95%;
			left:				expression( ( document.body.clientWidth / 2 ) - ( frmMain.offsetWidth / 2 ) );
			top:				expression( ( document.body.clientHeight / 2 ) - ( frmMain.offsetHeight / 2 ) );
		}

		H1 { 
			align:				center; 
			color:				darkblue; 
			font:				20pt Arial;
			font-Weight:		Normal;
 		} 
			
		H2 { 
			color:				green; 
			font:				11pt Arial; 
			font-Weight:		Bold 
		}

		.Main {
			cellspacing:		1; 
			width:				100%;
			background-color:	aliceblue;
			border-collapse:	collapse;
			bordercolor:		navy;
			cellpadding:		1;
			font-family:		10pt Arial; 
			font-weight:		normal;
			border:				1px none;
			table-layout:       fixed;
		}
		  
		table {
			cellspacing:		0; 
			cellpadding:		0;
			width:				100%;
			font-weight:		normal;
		}
		
		.left {
			cellspacing:		0; 
			background-color:	lightgrey;
			border-collapse:	collapse;
			bordercolor:		steelblue;
			font-family: 		Tahoma; 
			font-size:			10pt; 
			font-weight:		normal;
			border:				4px none;
			display:			inline
		}

		.right {
			cellspacing:		0; 
			background-color:	silver;
			border-collapse:	collapse;
			bordercolor:		steelblue;
			font-family: 		Tahoma; 
			font-size:			10pt; 
			font-weight:		normal;
			border:				4px none;
			display:			inline;
		}

		.netinfo{
			height:				200;
		}

		.bootini{
			height:				100;
		}

		textarea{
			width:				99%;
			background:			AliceBlue;
			color:				darkblue;
			FONT-FAMILY:		"Courier New";
			font-size:			8pt;
			overflowX:			auto;
			overflowY:			auto;
		}

		td {    
			color:				darkblue;
			font-family: 		Arial; 
			font-size:			9pt; 
			font-weight:		normal;
		}

		th { 
			font-family: 		Trebuchet MS; 
			font-size:			9pt; 
			font-weight:		bold;
			FONT-FAMILY:		sans-serif; 
			FONT-VARIANT:		small-caps;
			color:				royalblue;
		}
		
		tr {
			height:				.75;
			align:				left;
		}

		.selected {
			color:				lightgreen;
			font-weight:		bold;
		}

		.statusText {
			background:			AliceBlue;
			FONT-FAMILY:		"Courier New";
			font-size:			8pt;
			BORDER-RIGHT:		blue thin solid; 
			BORDER-TOP:			blue thin solid; 
			BORDER-LEFT:		blue thin solid; 
			BORDER-BOTTOM:		blue thin solid;
		}

		.Toggle{
			height:				15px;
			width:				15px;
			color:				firebrick;
			border-width:		medium;
		}
			
    </style>
<body onload="AppInitialize();" onunload="CloseWindows();" onresize="document.recalc;">
    <form id="frmMain" name="frmMain">
        <fieldset style="background: lightsteelblue; filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=lightsteelblue, EndColorStr=#FFFFFF);">
            <table cellspacing="0">
                <tr>
                    <td align="middle">
                        <font face="Arial Unicode MS" size="6">ISAInfo Viewer</font></td>
                </tr>
            </table>
        </fieldset>
        <fieldset style="background: paleturquoise">
            <table cellspacing="0" width="100%" height="100%">
                <tr><td align="middle" width="25%" id="colLoad">
                        <button accesskey="l" onclick="BtnClick( this );" tabindex="0" title="Reads an ISA XML file"
                            type="button" name="btnLoad" height="22">
                            <u><b>L</b></u>oad XML</button></td></tr>
            </table>
        </fieldset>
        <fieldset>
            <table class="Main" id="Main" height="75%" rules="all" cellspacing="0">
                <tr align="middle" height="10%">
                    <th width="30%">ISA Server</th>
                    <th width="65%">Settings</th>
                </tr>
                <tr id="rowMain" height="90%">
                    <td class="left" valign="top">
                        <div id="div_left" style="background-color: silver">
                            <table id="left" style="table-layout:fixed">
                                <tr><td/></tr>
                            </table>
                        </div>
                    </td>
                    <td class="right" valign="top" colspan="2">
                        <div id="div_right" style="background-color: lightgrey">
                            <table id="right" style="table-layout:fixed">
                                <tr><td/></tr>
                            </table>
                        </div>
                    </td>
                </tr>
            </table>
        </fieldset>
        <fieldset>
            <table class="statusText" cellpadding="0" cellspacing="0">
                <tr>
                    <td colspan="3" id="statusText">
                        &#160;</td>
                </tr>
            </table>
        </fieldset>
        <input type="file" name="FileName" style="float: center; display: none" id="FileName"
            size="20">
    </form>
    <xml id="isa" style="display: none">
        <xsl:stylesheet 
            xmlns:dt="urn:schemas-microsoft-com:datatypes" xmlns:fpc4="http://schemas.microsoft.com/isa/config-4"
            xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:user="ISAInfo-internal-scripts"
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
            <!--the functions in this script element provide custom data interpretation for the XSL transform templates-->
        <msxsl:script language="JScript" implements-prefix="user">
        <![CDATA[
    		
		    /**********************************************************************
		    * This script section supports custom actions by the XSLT templates
		    * "Extension" script makes the XSL smaller and more manageable
		    *
		    *********************************************************************/
		    /**********************************************************************
		    * BlobData helper functions
		    * These assist in translating most BlobData strings to their "human-readable" contents
		    *
		    * JScript can't pass values "byref", so we need to have our string buffer and "pointer" as 
		    * global variables
		    *
		    *********************************************************************/
		    var BlobDataString;
		    var BlobDataValuePointer;

		    /**********************************************************************
		    * TranslateBlobData( BlobString )
		    *
		    *  Creates a table formatted for "right-side" display based the data found in a generic 
		    *  blobdata string (VendorParametersSets, HTTP Filter settings, etc.)
		    *
		    * If successful
		    *	- returns HTML text for display in the "right-side"
		    * If not, returns "false" and calls XMLError to display the error details
		    *
		    * BlobData NOT handled by this function:
		    *	- Schedules
		    *	- Firewall Client Application Settings
		    *	- Log Fields
		    *********************************************************************/
		    function TranslateBlobData( BlobString )
		    {
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var right = "</td><td width=\"65%\">";
			    var endRow = "</td></tr>";
			    var NoData = "<tr><td colspan=\"2\">&#160;No Data</td></tr>";

			    //populate the string buffer
			    BlobDataString = BlobString;
			    BlobDataValuePointer = 0;
			    var paramCtr = TranslateBlobDataDword( );
			    var vpsData = "";
    			
			    if ( !paramCtr )
			    {
			        return NoData;
			    }

			    for ( var i = 0; i < paramCtr; i++ )
			    {
				    vpsData += left + ParseBlobDataString( ) + right + GetBlobDataValueByType( ) + 
							    endRow;
			    }
			    return vpsData;
		    }
    		
		    /**********************************************************************
		    * TranslateBlobDataWord( )
		    *
		    *  Returns a hex-formatted number string representing the 16-bit number found at the 
		    *  current BlobDataValuePointer
		    *  BlobData Words are stored as hex numbers representing 16-bit values in RPN notation
		    *
		    *********************************************************************/
		    function TranslateBlobDataWord( )
		    {
			    var tempVal = "0x";
			    for ( var i = 1; i >= 0; i-- )
			    {
				    tempVal += BlobDataString.substr( BlobDataValuePointer + ( i * 2 ), 2 );
			    }
			    BlobDataValuePointer += 4;		//update the pointer
			    return parseInt( tempVal );
		    }

		    /**********************************************************************
		    * TranslateBlobDataDWord( )
		    *
		    *  Returns a hex-formatted number string representing the 32-bit number found at the 
		    *  current BlobDataValuePointer
		    *  BlobData DWords are stored as hex numbers representing 32-bit values in RPN notation
		    *
		    *********************************************************************/
		    function TranslateBlobDataDword( )
		    {
			    var tempVal = "0x";
			    for ( var i = 3; i >= 0; i-- )
			    {
				    tempVal += BlobDataString.substr( BlobDataValuePointer + ( i * 2 ), 2 );
			    }

			    BlobDataValuePointer += 8;		//update the pointer
			    return parseInt( tempVal );
		    }

		    /**********************************************************************
		    * TranslateBlobDataQWord( )
		    *
		    *  Returns a hex-formatted number string representing the 64-bit number found at the 
		    *  current BlobDataValuePointer
		    *  BlobData QWords are stored as hex numbers representing 64-bit values in RPN notation
		    *
		    *********************************************************************/
		    function TranslateBlobDataQword( )
		    {
			    var tempVal = "0x";
			    for ( var i = 7; i >= 0; i-- )
			    {
				    tempVal += BlobDataString.substr( BlobDataValuePointer + ( i * 2 ), 2 );
			    }

			    BlobDataValuePointer += 16;		//update the pointer
			    return parseInt( tempVal );
		    }

		    /**********************************************************************
		    * ParseBlobDataString( )
		    *
		    *  Returns a translated string from BlobData referenced by BlobDataValuePointer
		    *  BlobData strings are stored as hex numbers representing unicode character values
		    *
		    *********************************************************************/
		    function ParseBlobDataString( )
		    {
			    var retStr = "";
			    var charCode;
			    //the string is preceded by a dword representing the string length
			    var strSize = TranslateBlobDataDword( );
    			
			    for ( ; BlobDataValuePointer < BlobDataValuePointer + ( strSize * 2 ); BlobDataValuePointer += 4 )
			    {
				    charCode = parseInt( "0x" + BlobDataString.substr( BlobDataValuePointer, 2 ) );
				    if ( charCode == 0 )
				    {
					    break;
				    }
				    retStr += String.fromCharCode( charCode ) ;
			    }
			    BlobDataValuePointer += 4;		//account for ending nulls
			    return retStr;
		    }

		    /**********************************************************************
		    * GetBlobDataValueByType( )
		    *
		    *  Uses the value found at BlobDataValuePointer to determine the value type stored in 
		    *  the next part of the BlobData
		    * The location of that data is dependent on the value type
		    *
		    *********************************************************************/
		    function GetBlobDataValueByType( )
		    {
			    var tempVal = "";
			    var valType = parseInt( "0x" + BlobDataString.substr( BlobDataValuePointer, 2 ) );
			    BlobDataValuePointer += 4;		//move away from the ValueType value

			    switch( valType )
			    {
				    case 16:					//I1
				    case 17:					//UI1
					    //BlobData "byte" values don't need special handling
					    tempVal = parseInt( "0x" + BlobDataString.substr( BlobDataValuePointer, 2 ) );
					    BlobDataValuePointer += 2;		//update the BlobDataValuePointer
					    return tempVal;
				    case 2:						//I2
				    case 18:					//UI2
				    case 11:					//bool
					    return TranslateBlobDataWord( );
				    case 3:						//I4
				    case 4:						//R4
				    case 10:					//ERROR
				    case 19:					//UI4
				    case 22:					//INT
				    case 23:					//UINT
					    return TranslateBlobDataDword( );
				    case 20:					//I8
				    case 21:					//UI8
					    return TranslateBlobDataQword( );
				    case 8:						//string
				    default:					//unknown
					    return ParseBlobDataString( );
			    }
		    }

		    /**********************************************************************
		    * TranslateEdition( EdVal )
		    *
		    * Translates Edition values to their 'friendly name'
		    *
		    *********************************************************************/
		    function TranslateEdition( EdVal )
		    {
			    switch( EdVal )
			    {
                    case "16":  //ISA 2006
				    case "80":  //ISA 2004 
				        return "Standard";
				    case "32": //ISA 2006
				    case "81": //ISA 2004
				        return "Enterprise";
				    default: return "New to me..." + EdVal;
			    }
		    }
    		
		    /**********************************************************************
		    * TranslateVpsName( GUID )
		    *
		    * Translates known VendorParametersSets GUIDs to their 'friendly name'
		    *
		    *********************************************************************/
		    function TranslateVpsName( GUID )
		    {
			    switch( GUID )
			    {
				    case "{143F5698-103B-12D4-FF34-1F34767DEabc}":  //SE-created Entries
					    return "ISA SE Settings"
				    case "{FDBB98B8-08F0-4903-BA04-4855E9DD4AD4}":	//LT 
					    return "Link Translation";
				    case "{3563FFF5-DF93-40eb-ABC3-D24B5F14D8AA}":	//LT Dictionary
					    return "Link Translation Dictionary";
				    case "{E4FA56DB-7A77-4d13-B421-6641DF2D1AF0}":	//LT Content Types
					    return "Link Translation Content Types";
				    case "{5e302ed5-f5d5-4fad-9b8a-01c72e1569f3}":	//WP Wiz Data
					    return "Exch / SP Web Publishing Wizard Data";
				    case "{28EF0C08-E82F-41bf-8CBD-88BDF66E654B}":	//OWA Filter
					    return "FBA Filter Settings";
				    case "{f1076e51-bbaf-48ba-a2d7-b0875211e80d}":
					    return "HTTP Filter Settings";
				    case "{dd8bed76-c415-429c-a6b8-26005a2c4902}":
					    return "SMTP Commands";
				    case "{49FE2B2F-3BB4-495C-87C8-3890C3C35756}":
					    return "DNS App Filter Settings";
				    case "{D96C5E7F-5B13-4e1a-94A1-36CA7B54604E}":
					    return "DNS Attack Detection";
				    case "{FE440D49-AB26-11D2-A101-00C04FB6CFB6}":	// H.323 App filter
				    case "{74104BD8-19C4-4F4C-96A9-C8A78F73CF8E}":	// MMS App filter
				    case "{D3012DF1-F713-486A-8769-ABB0049BB633}":	// PNM App filter
				    case "{E331F638-AB86-4AA5-9B6A-2B0248C7B4FB}":	// RPC App filter
				    case "{D84A98AA-12BD-4E31-9114-9AF0FBD81570}":	// RPC "All Interfaces"
				    case "{e69ed627-00ef-422d-af90-cdf3fc86227d}":	// SMTP App filter
					    return "Additional Settings";
				    case "{216029f8-f6fa-4d82-a4b8-f476be25dc80}":	// SMTP Filter Users
					    return "Users";
				    case "{331ee446-5303-48da-9753-b5831d6ef966}":	// SMTP Filter Domains
					    return "Domains";
				    case "{477d5974-38d9-409a-8413-69b43e627869}":	// SMTP Filter Keywords
					    return "Keywords";
				    case "{09c4f76e-58d8-4744-8bdf-3eb302f6a7b0}":	// SMTP Filter Extensions
					    return "Attachments";
				    case "{25765C04-C80B-494C-914E-286297DB8C8E}":	// SOCKS App filter
					    return "SOCKS Listener";
				    case "{0E4A0156-DD5D-11D2-8C2F-00C04FB6BCDE}":	// Exch RPC Interfaces
					    return "Information Store 1";
				    case "{10F24E8E-0FA6-11D2-A910-00C04F990F3B}":
					    return "Information Store 3";
				    case "{1453C42C-0FA6-11D2-A910-00C04F990F3B}":
					    return "Information Store 2";
				    case "{1544F5E0-613C-11D1-93DF-00C04FD7BD09}":
					    return "Directory RFR";
				    case "{1A190310-BB9C-11CD-90F8-00AA00466520}":
					    return "Database";
				    case "{38A94E72-A9BC-11D2-8FAF-00C04fA378FF}":
					    return "MTA \"QAdmin\"";
				    case "{469D6EC0-0D87-11CE-B13F-00AA003BAC6C}":
					    return "System Attendant Public Interface";
				    case "{83D72BF0-0D89-11CE-B13F-00AA003BAC6C}":
					    return "System Attendant Private";
				    case "{89742ACE-A9ED-11CF-9C0C-08002BE7AE86}":
					    return "Store admin 2";
				    case "{99E64010-B032-11D0-97A4-00C04FD6551D}":
					    return "Store admin 1";
				    case "{9E8EE830-4459-11CE-979B-00AA005FFEBE}":
					    return "MTA";
				    case "{A4F1DB00-CA47-1067-B31E-00DD010662DA}":
					    return "Store admin 3";
				    case "{A4F1DB00-CA47-1067-B31F-00DD010662DA}":
					    return "Store EMSMDB";
				    case "{F5CC59B4-4264-101A-8C59-08002B2F8426}":
					    return "Directory DRS";
				    case "{F5CC5A18-4264-101A-8C59-08002B2F8426}":
					    return "Directory NSP";
				    case "{F5CC5A7C-4264-101A-8C59-08002B2F8426}":
					    return "Directory XDS";
				    case "{F930C514-1215-11D3-99A5-00A0C9B61B04}":
					    return "System Attendant Cluster";
					case "{E331F638-AB86-4AA5-9B6A-2B0248C7B4FB}":
						return "RPC Filter Custom Settings";
					case "{382b389c-1392-4954-9978-85324de89ff9}":
					    return "SecurID Settings";
		            case "{34f34036-cabf-4648-9068-3abea473166f}":
		                return "SecurID Secret";
					case "{6E266C3C-393E-459E-8856-21077E352ECA}":
						return "HTTP Compression";
					case "{CE085847-2E34-4d5a-B1CA-72BB24A75DFA}":
						return "Diffserv";
					case "{EF506E47-A862-4010-AEE5-D2A2A015FDDA}":
					    return "Hotfix Data";
					case "{8006B8AA-1144-41B3-A400-44AB02391C1E}":
					    return "BITS Caching";
					case "{91FA2AD9-CBE1-4bea-AF87-A321401FAC53}":
					    return "Enterprise SQL Logging";
				    case "{94B5D413-55E0-4f4c-9390-E53828457957}":	// GFI Download Security
				    case "{120f7da7-5e8f-41cc-9479-a76282dbea49}":	// H.323 AllowVideo
				    case "{7c017d00-e14e-442d-b1ed-381e4dbaa3eb}":	// H.323 UseLRQ
				    case "{95685c22-5856-45f8-99f2-c7d05595c3f8}":	// H.323 Allow T120
				    case "{bd66fd9d-800f-4710-8d26-091e3d5caee9}":	// H.323 Allow Audio
				    case "{c89d976e-371c-4b68-ae69-d61caa41ce86}":	// H.323 GK Location
				    case "{680A928F-22B3-11D1-B026-0000F87750CB}":	// FTP Uploads
				    case "{C758F63F-E391-4AD2-AA31-D050D895BA7B}":	// RTSP App filter
					    return "";									// don't want header
				    default:										// don't have a clue
					    return GUID;
			    }
		    }

            /**********************************************************************
            * TranslateExtraXml( XmlBlob )
            *
            * Translates the HTTP Filter BlobData string to an XML DomElement for 
            * later translation by the same XSL that extracted the data from 
            * the XML that held it as a blobdata HEX string
            *
            *********************************************************************/
            function TranslateExtraXml( XmlBlob )
            {
                var XmlString = "";
                if( XmlBlob )
                {
                    var XmlString = GetSingleValue( XmlBlob );
                }
                return TranslateStringToNodeTree( XmlString );
            }

            /**********************************************************************
            * TranslateStringToNodeTree( XmlString )
            *
            * Translates the XML string to an XML node tree
            *
            *********************************************************************/
            function TranslateStringToNodeTree( XmlString )
            {
                var XmlTemp = new ActiveXObject( "Msxml2.DomDocument.3.0" );
                XmlTemp.loadXML( "<EmptyDataNode />" );
                if( XmlString )
                {
                    XmlTemp.loadXML( XmlString );
                }
                return XmlTemp;
            }

		    /**********************************************************************
		    * TranslateFileAceMask( AceMask )
		    *
		    * Translates File=based AceMask value to text
		    *
		    *********************************************************************/
		    function TranslateFileAceMask( AceMask )
		    {
			    //Share, File, Folder Access masks
			    var F_List			= 1;		//can read a file or list folder contents
			    var F_Add			= 2;		//can write to a file or add a file to a folder
			    var F_Append		= 4;		//can append to a file or add a subfolder to a folder
			    var F_Rd_EA			= 8;		//can read Extended Attributes
			    var F_Wr_EA			= 0x10;		//can write Extended Attributes
			    var F_Ex_Trav		= 0x20;		//can execute a file or traverse folders
			    var F_Del_Child		= 0x40;		//can delete a folder and its contents, even RO files
			    var F_Rd_Attr		= 0x80;		//can read attributes
			    var F_Wr_Attr		= 0x100;	//can write attributes
			    var F_Delete		= 0x10000;	//can delete files and folders
			    var F_Rd_Contr		= 0x20000;	//assigns read access for this user
			    var F_Wr_DACL		= 0x40000;	//can change DACL
			    var F_Wr_Owner		= 0x80000;	//can take ownership
			    var F_Synch			= 0x100000;	//synch changes and wait for synch
			    var F_Security		= 0x1000000;//access security attributes
			    var StdRightsAll	= F_Delete | F_Rd_Contr | F_Wr_DACL | F_Wr_Owner | F_Synch | F_Security
			    var GENERIC_READ	= 0x80000000;
			    var GENERIC_WRITE	= 0x40000000;
			    var GENERIC_EXECUTE	= 0x20000000;
			    var GENERIC_ALL		= 0x10000000;
    			
			    var WR = F_Wr_Attr + F_Wr_EA + F_Append + F_Add;
			    var RD = F_Rd_Contr + F_Rd_Attr + F_Rd_EA + F_List;
			    var RX = RD + F_Ex_Trav;
			    var MO = RX + WR + F_Delete;
			    var FU = MO + F_Wr_Owner + F_Wr_DACL + F_Del_Child;
			    var GRE = GENERIC_READ + GENERIC_EXECUTE;
			    var ALL = StdRightsAll | 0x1FF	//according to WinNT.h

			    switch( AceMask )
			    {
				    case RD: return "Read";
				    case RX: return "Read / Execute";
				    case WR: return "Write";
				    case MO: return "Modify";
				    case FU: return "Full";
				    case GENERIC_READ: return "Generic Read";
				    case GENERIC_EXECUTE: return "Generic Execute";
				    case GRE: return "Generic Read / Execute";
				    case GENERIC_WRITE: return "Generic Write";
				    case GENERIC_ALL: return "Generic Full";
				    case ALL: return "All Access";
			    }
    			
			    var arrReturn = new Array();
    			
			    if( AceMask & F_List )
			    {
				    arrReturn.push( "List" );
			    }

			    if( AceMask & F_Add )
			    {
				    arrReturn.push( "Add" );
			    }

			    if( AceMask & F_Append )
			    {
				    arrReturn.push( "Append" );
			    }

			    if( AceMask & F_Rd_EA )
			    {
				    arrReturn.push( "Read EA" );
			    }

			    if( AceMask & F_Wr_EA )
			    {
				    arrReturn.push( "Write EA" );
			    }

			    if( AceMask & F_Ex_Trav )
			    {
				    arrReturn.push( "Execute" );
			    }

			    if( AceMask & F_Del_Child )
			    {
				    arrReturn.push( "Delete All" );
			    }

			    if( AceMask & F_Rd_Attr )
			    {
				    arrReturn.push( "Read Attr" );
			    }

			    if( AceMask & F_Wr_Attr )
			    {
				    arrReturn.push( "Write Attr" );
			    }

			    if( AceMask & F_Delete )
			    {
				    arrReturn.push( "Delete" );
			    }

			    if( AceMask & F_Rd_Contr )
			    {
				    arrReturn.push( "Read Controls" );
			    }

			    if( AceMask & F_Wr_DACL )
			    {
				    arrReturn.push( "Change DACL" );
			    }

			    if( AceMask & F_Wr_Owner )
			    {
				    arrReturn.push( "Take Ownership" );
			    }
			    return arrReturn.join( ", " );
		    }

		    /**********************************************************************
		    * TranslateFileAceType( AceType )
		    *
		    * Translates File-based AceType value to text
		    *
		    *********************************************************************/
		    function TranslateFileAceType( AceType )
		    {
			    switch( AceType )
			    {
				    case 0: return "Allow";
				    case 1: return "Deny";
				    case 2: return "Audit";
				    default: return "Not Specified";
			    }
		    }

		    /**********************************************************************
		    * TranslateControlFlags( ContrFlags )
		    *
		    * Translates File-based ACL Control Flags value to text
		    *
		    *********************************************************************/
		    function TranslateControlFlags( ContrFlags )
		    {
			    /*
			    * Blatantly stolen from Winnt.h
			    */
			    var SE_OWNER_DEFAULTED			= 0x1;
			    var SE_GROUP_DEFAULTED			= 0x2;
			    var SE_DACL_PRESENT				= 0x4;
			    var SE_DACL_DEFAULTED			= 0x8;
			    var SE_SACL_PRESENT				= 0x10;
			    var SE_SACL_DEFAULTED			= 0x20;
			    var SE_DACL_AUTO_INHERIT_REQ	= 0x100;
			    var SE_SACL_AUTO_INHERIT_REQ	= 0x200;
			    var SE_DACL_AUTO_INHERITED		= 0x400;
			    var SE_SACL_AUTO_INHERITED		= 0x800;
			    var SE_DACL_PROTECTED			= 0x1000;
			    var SE_SACL_PROTECTED			= 0x2000;
			    var SE_RM_CONTROL_VALID			= 0x4000;
			    var SE_SELF_RELATIVE			= 0x8000;

			    var arrReturn					= new Array();
			    /*
			    SE_OWNER_DEFAULTED - This boolean flag, when set, indicates that the
				    SID pointed to by the Owner field was provided by a
				    defaulting mechanism rather than explicitly provided by the
				    original provider of the security descriptor.  This may
				    affect the treatment of the SID with respect to inheritence
				    of an owner.
			    */
			    if( ContrFlags & SE_OWNER_DEFAULTED )
			    {
				    arrReturn.push( "Inherited Owner" );
			    }
    			
			    /*
			    SE_GROUP_DEFAULTED - This boolean flag, when set, indicates that the
				    SID in the Group field was provided by a defaulting mechanism
				    rather than explicitly provided by the original provider of
				    the security descriptor.  This may affect the treatment of
				    the SID with respect to inheritence of a primary group.
			    */
			    if( ContrFlags & SE_GROUP_DEFAULTED )
			    {
				    arrReturn.push( "Inherited Group" );
			    }

			    /*
			    SE_DACL_PRESENT - This boolean flag, when set, indicates that the
				    security descriptor contains a discretionary ACL.  If this
				    flag is set and the Dacl field of the SECURITY_DESCRIPTOR is
				    null, then a null ACL is explicitly being specified.
			    */
			    if( ContrFlags & SE_DACL_PRESENT )
			    {
				    arrReturn.push( "DACL Present" );
			    }

			    /*
			    SE_DACL_DEFAULTED - This boolean flag, when set, indicates that the
				    ACL pointed to by the Dacl field was provided by a defaulting
				    mechanism rather than explicitly provided by the original
				    provider of the security descriptor.  This may affect the
				    treatment of the ACL with respect to inheritence of an ACL.
				    This flag is ignored if the DaclPresent flag is not set.
			    */
			    if( ContrFlags & SE_DACL_DEFAULTED )
			    {
				    arrReturn.push( "Inherited DACL" );
			    }

			    /*
			    SE_SACL_PRESENT - This boolean flag, when set,  indicates that the
				    security descriptor contains a system ACL pointed to by the
				    Sacl field.  If this flag is set and the Sacl field of the
				    SECURITY_DESCRIPTOR is null, then an empty (but present)
				    ACL is being specified.
			    */
			    if( ContrFlags & SE_SACL_PRESENT )
			    {
				    arrReturn.push( "SACL Present" );
			    }

			    /*
			    SE_SACL_DEFAULTED - This boolean flag, when set, indicates that the
				    ACL pointed to by the Sacl field was provided by a defaulting
				    mechanism rather than explicitly provided by the original
				    provider of the security descriptor.  This may affect the
				    treatment of the ACL with respect to inheritence of an ACL.
				    This flag is ignored if the SaclPresent flag is not set.
			    */
			    if( ContrFlags & SE_SACL_DEFAULTED )
			    {
				    arrReturn.push( "Inherited SACL" );
			    }

			    /*
			    SE_SELF_RELATIVE - This boolean flag, when set, indicates that the
				    security descriptor is in self-relative form.  In this form,
				    all fields of the security descriptor are contiguous in memory
				    and all pointer fields are expressed as offsets from the
				    beginning of the security descriptor.  This form is useful
				    for treating security descriptors as opaque data structures
				    for transmission in communication protocol or for storage on
				    secondary media.
			    */
			    if( ContrFlags & SE_SELF_RELATIVE )
			    {
				    arrReturn.push( "Self-Relative" );
			    }

			    return arrReturn.join( ", " );

		    }

		    /**********************************************************************
		    * GetSingleValue( XmlBlob )
		    *
		    * Extracts a single BlobData string and returns it to the caller
		    *
		    *********************************************************************/
		    function GetSingleValue( XmlBlob )
		    {
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    TranslateBlobDataDword();			//ignore the data count
			    ParseBlobDataString();				//ignore the key name
    			
			    return GetBlobDataValueByType();
		    }

		    /**********************************************************************
		    * GetSingleKey( XmlBlob )
		    *
		    * Extracts a single BlobData key name and returns it to the caller
		    *
		    *********************************************************************/
		    function GetSingleKey( XmlBlob )
		    {
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    TranslateBlobDataDword();			//ignore the data count		
			    			
			    return ParseBlobDataString();
		    }

		    /**********************************************************************
		    * GetKeys( XmlBlob )
		    *
		    * Extracts all BlobData keys returns them to the caller
		    *
		    *********************************************************************/
		    function GetKeys( XmlBlob )
		    {
			    var szFirst;
			    var szSecond;
			    var left = "<tr><td colspan=\"2\">&#160;&#160;";
			    var right = "</td></tr>";
			    var numEntries;
			    var iInx;
			    var RtnVal = "";
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    numEntries = TranslateBlobDataDword();
    			
			    for ( iInx = 0; iInx < numEntries; iInx++ )
			    {
				    RtnVal += left + ParseBlobDataString(); + right;
				    GetBlobDataValueByType();				//ignore the value
			    }
			    return RtnVal;
		    }

		    /**********************************************************************
		    * GetH323Values( XmlBlob )
		    *
		    * Extracts the H.323 settings and returns them 
		    *
		    *********************************************************************/
		    function GetH323Values( XmlBlob, isBoolVal )
		    {
			    var szFirst;
			    var szSecond;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    TranslateBlobDataDword();				//ignore the data count
			    szFirst = ParseBlobDataString();		//get the key name
			    szSecond = GetBlobDataValueByType();	//get the value
			    if( isBoolVal == true )
			    {
				    szSecond = ( szSecond == 0 )? "False": "True";
			    }
			    return left + szFirst + middle + szSecond + right;
		    }

		    /**********************************************************************
		    * GetBitsCaching( XmlBlob )
		    *
		    * Extracts the Bits Caching settings and returns them 
		    *
		    *********************************************************************/
		    function GetBitsCaching( XmlBlob )
		    {
			    var szFirst;
			    var szSecond;
			    var RtnVal = "";
			    var NumEntries;
			    var iInx;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    TranslateBlobDataDword();		//get the data count
    			
			    szFirst = ParseBlobDataString();		//get the key name
			    szSecond = GetBlobDataValueByType();	//get the value
			    szSecond = ( szSecond == 0 )? "False": "True"
			    RtnVal += left + szFirst + middle + szSecond + right;
			    return RtnVal;
		    }

		    /**********************************************************************
		    * GetDnsValues( XmlBlob )
		    *
		    * Extracts the DNS settings and returns them 
		    *
		    *********************************************************************/
		    function GetDnsValues( XmlBlob )
		    {
			    var szFirst;
			    var szSecond;
			    var RtnVal = "";
			    var NumEntries;
			    var iInx;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    NumEntries = TranslateBlobDataDword();		//get the data count
    			
			    for( iInx = 0; iInx < NumEntries; iInx++ )
			    {
				    szFirst = ParseBlobDataString();		//get the key name
				    szSecond = GetBlobDataValueByType();	//get the value
				    szSecond = ( szSecond == 0 )? "False": "True"
				    RtnVal += left + szFirst + middle + szSecond + right;
			    }
			    return RtnVal;
		    }

		    /**********************************************************************
		    * GetBlockedAttachments( XmlBlob )
		    *
		    * Extracts the blocked attachments settings and returns them 
		    *
		    *********************************************************************/
		    function GetBlockedAttachments( XmlBlob )
		    {
			    var szFirst;
			    var szSecond;
			    var RtnVal = "";
			    var NumEntries;
			    var iInx;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    NumEntries = TranslateBlobDataDword();		//get the data count
    			
			    for( iInx = 0; iInx < NumEntries; iInx++ )
			    {
				    szFirst = ParseBlobDataString();		//get the key name
				    szSecond = GetBlobDataValueByType();	//get the value
				    RtnVal += left;

				    szSecond = szSecond.split( " " );
				    switch( szSecond[ 1 ] )					//what to search for
				    {
					    case "0":
							    RtnVal += "Extension";
							    break;
					    case "1":
							    RtnVal += "Name";
							    break;
					    case "2":
							    RtnVal += "Size";
				    }
				    RtnVal += " = " + szFirst + middle;

				    switch( szSecond[ 3 ] )					//how to handle it
				    {
					    case "0":
							    RtnVal += "Hold";
							    break;
					    case "1":
							    RtnVal += "Delete";
							    break;
					    case "2":
							    RtnVal += "Forward to \"" + szSecond[ 6 ] + "\"";
				    }
				    RtnVal += right;
			    }
			    return RtnVal;
		    }

		    /**********************************************************************
			    * GetBlockedKeywords( XmlBlob )
			    *
			    * Extracts the blocked keywords settings and returns them 
			    *
			    *********************************************************************/
		    function GetBlockedKeywords( XmlBlob )
		    {
			    var szFirst;
			    var szSecond;
			    var RtnVal = "";
			    var NumEntries;
			    var iInx;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    NumEntries = TranslateBlobDataDword();		//get the data count
    			
			    for( iInx = 0; iInx < NumEntries; iInx++ )
			    {
				    szFirst = ParseBlobDataString();		//get the key name
				    szSecond = GetBlobDataValueByType();	//get the value
				    RtnVal += left;

				    szSecond = szSecond.split( " " );
				    switch( szSecond[ 1 ] )					//where to search
				    {
					    case "0":
							    RtnVal += "Subject or Body";
							    break;
					    case "1":
							    RtnVal += "Subject";
							    break;
					    case "2":
							    RtnVal += "Body";
				    }
				    RtnVal += " = " + szFirst + middle;

				    switch( szSecond[ 3 ] )					//how to handle it
				    {
					    case "0":
							    RtnVal += "Delete";
							    break;
					    case "1":
							    RtnVal += "Hold";
							    break;
					    case "2":
							    RtnVal += "Forward to \"" + szSecond[ 6 ] + "\"";
				    }
				    RtnVal += right;
			    }
			    return RtnVal;
		    }

		    /**********************************************************************
			    * GetSmtpCommands( XmlBlob )
			    *
			    * Extracts the SMTP command settings and returns them 
			    *
			    *********************************************************************/
		    function GetSmtpCommands( XmlBlob )
		    {
			    var szFirst;
			    var szSecond;
			    var RtnVal = "";
			    var NumEntries;
			    var iInx;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    NumEntries = TranslateBlobDataDword();		//get the data count
    			
			    for( iInx = 0; iInx < NumEntries; iInx++ )
			    {
				    szFirst = ParseBlobDataString();		//get the key name
				    szSecond = GetBlobDataValueByType();	//get the value
				    szSecond = szSecond.split( " " );
				    RtnVal += left + szFirst + middle + "Max Length = " + szSecond[ 1 ] + "; ";

				    switch( szSecond[ 3 ] )					//how to handle it
				    {
					    case "0":
							    RtnVal += "Disabled";
							    break;
					    case "1":
							    RtnVal += "Enabled";
				    }
				    RtnVal += right;
			    }
			    return RtnVal;
		    }

		    /**********************************************************************
			    * GetWpRuleData( XmlBlob )
			    *
			    * Extracts the WP Wiz data and returns them 
			    *
			    *********************************************************************/
		    function GetWpRuleData( XmlBlob )
		    {
			    var RtnVal = "";
			    var NumEntries;
			    var iInx;
			    var left = "<tr><td width=\"35%\">&#160;&#160;";
			    var middle = "</td><td width=\"65%\">";
			    var right = "</td></tr>";
    			
			    BlobDataString = XmlBlob;
			    BlobDataValuePointer = 0;
			    NumEntries = TranslateBlobDataDword();		//get the data count
    			
			    for( iInx = 0; iInx < NumEntries; iInx++ )
			    {
				    var szName = ParseBlobDataString();		//get the key name
				    var vValue = GetBlobDataValueByType();	//get the value
				    RtnVal += (left + szName + middle);

				    switch( szName )					
				    {
					    case "AddHttpsFrontEndOn":
                        case "IsOWARule":
                        case "SendLogonOn401":
                            RtnVal += (parseInt(vValue))?"True":"False";
                            break;
					    case "ExchangeVersion":
					        RtnVal += "Exchange ";
                            switch(vValue)
                            {
                                case 0: 
                                    RtnVal += "2003";
                                    break;
                                case 1: 
                                    RtnVal += "2000";
                                    break;
                                case 2: 
                                    RtnVal += "5.5";
                                    break;
                                case 3: 
                                    RtnVal += "2007";
                                    break;
                                default: RtnVal += ("Unknown (" + vValue.toString() + ")" );
                            }
                            break;
				        default: RtnVal += vValue;
				    }
				    RtnVal += right;
			    }
			    return RtnVal;
		    }

		    /**********************************************************************
			    * TranslateLogFields( LogFields, logType )
			    *
			    *  Creates a table formatted for 'right-side' display based the data found in a Log Fields
			    *  BlobData string
			    *
			    *  Returns HTML text for display in the 'right-side'
			    *
			    *********************************************************************/
		    function TranslateLogFields( LogFields, LogType )
		    {
			    var arrSelectedFields = new Array();
			    var iDefaultSmtpValue = 1;
			    var iDefaultWpFwValue = 1;
			    var i;
			    var arrLogFields;
			    var arrWpFwFields = new Array( "ClientIP", "ClientUserName", "ClientAgent", "ClientAuthenticate", 
											    "Date", "Time", "service", "servername", "referredserver", 
											    "DestHost", "DestHostIP", "DestHostPort", "processingtime", 
											    "bytessent", "bytesrecvd", "protocol", "transport", "operation", 
											    "uri", "mimetype", "objectsource", "resultcode", "CacheInfo", 
											    "Rule#1", "Rule#2", "sessionid", "connectionid", "ErrorInfo" );

			    var arrSmtpFields = new Array( "LogDate", "LogTime", "Sender", "Recipient", "Subject", "MessageID", 
												    "Action", "Reason" );

			    arrLogFields = ( LogType.toLowerCase() == "fltrsnk1_maillog" )? arrSmtpFields: arrWpFwFields;
			    if( isNaN( LogFields ) )
			    {
				    LogFields = ( LogType.toLowerCase() == "fltrsnk1_maillog" )? iDefaultSmtpValue: iDefaultWpFwValue;
			    }

			    /* the log field selections are a bitmask, so we need to "and" the LogFields value with a 
				    * left-shift based on the value of i to sort them out
				    */
			    for ( i = 0; i < arrLogFields.length; i++ )
			    {
				    if ( LogFields & ( 1 << i ) )
				    {
					    arrSelectedFields.push( arrLogFields[ i ] );
				    }
			    }
			    return arrSelectedFields.join( ", " );
		    }

		    /**********************************************************************
			    * TranslateScheduleBlobData( Schedule )
			    *
			    *  Creates a table approximating the ISA Schedule UI based the data found in a 
			    *  Schedule BlobData string
			    *
			    *  Returns HTML text for display in the 'right-side'
			    *
			    *********************************************************************/
		    function TranslateScheduleBlobData( Schedule )
		    {
			    var thisSchedule = "";
			    var arrHours = new Array( "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11",
									    "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23" );
			    var arrDays = new Array( "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" );
			    var arrDayMask = new Array( 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40 )	
			    var dayMask;
			    var startRow = "<tr align=\"center\">";
			    var endRow = "</tr>";
			    var dayHdr = "<th style=\"color: blue\" align=\"left\">";
			    var hourHdr = "<th style=\"color: blue\" align=\"center\">";
			    var endHdr = "</th>";
			    var setCol = "<td bgColor=\"DarkGray\">";
			    var clrCol = "<td>";
			    var endCol = "&#160;</td>";
			    var i;
			    var j;
			    var offset = 2;

			    //build the header row
			    thisSchedule = startRow + hourHdr + endHdr;
			    for ( i = 0; i < arrHours.length; i++ )
			    {
				    thisSchedule += hourHdr + arrHours[ i ] + endHdr;
			    }

			    thisSchedule += endRow;

			    // now build each day row and set the visual effects
			    for ( i = 0; i < arrDays.length; i++ )
			    {
				    thisSchedule += startRow + dayHdr + arrDays[ i ] + endHdr;
				    for ( j = 0; j < arrHours.length; j++ )
				    {
					    dayMask = "0x" + Schedule.substr( j*offset, offset );
					    thisSchedule += ( arrDayMask[ i ] & dayMask )? setCol: clrCol
					    thisSchedule += endCol;
				    }
				    thisSchedule += endRow;
			    }
			    return ( thisSchedule );
		    }

		    /**********************************************************************
			    * TranslateIPOptionsData( BlobData )
			    *
			    *  Creates a table approximating the ISA Schedule UI based the data found in a 
			    *  Schedule BlobData string
			    *
			    *  Returns HTML text for display in the 'right-side'
			    *
			    *********************************************************************/
		    function TranslateIPOptionsData( BlobData )
		    {
			    var i;
			    var szFwdVals = "";
    			
			    /* the IP Options field selections is a 32-element string of bytes 
				    representing the 256 possible IP Options as bits in reverse order
				    */
			    for ( i = 0; i < BlobData.length; i++ )
			    {
				    szFwdVals += BlobData.substr( i, 1 );
			    }
    			
			    return ( szFwdVals );
		    }

		    /**********************************************************************
			    * TranslateAppSettings( Settings )
			    *
			    *  Creates a table rowset representing the Firewall Client Application Settings
			    *  based the data found in a BlobData string
			    *
			    *  Returns HTML text for display in the 'right-side'
			    *
			    *********************************************************************/
		    function TranslateAppSettings( Settings )
		    {
			    var appSettings = "";
			    var appSetting = "";
			    var arrSettings = new Array();
			    var asciiNum = 0;
			    var leftSide = "<tr><td width=\"35%\">&#160;&#160;";
			    var rightSide = "</td><td width=\"65%\">";
			    var endRow = "</td></tr>";

			    // all settings are null-terminated, so that"s our cue to build a table row
			    // we"ll actually parse the whole blob and separate each setting in turn
			    for ( var i = 0; i < Settings.length - 7; i += 4 )
			    {
				    asciiNum = parseInt( "0x" + Settings.substr( i, 2 ) );
				    if ( asciiNum != 0 )
				    {
					    appSetting += String.fromCharCode( asciiNum );
					    continue;
				    }
				    arrSettings = appSetting.split( "=" );
				    appSettings += leftSide + arrSettings[ 0 ] + 
							    rightSide + arrSettings[ 1 ] + 
							    endRow;
				    appSetting = "";
			    }
			    return( appSettings );
		    }
    		
		    /**********************************************************************
			    * End of BlobData helper functions
			    *********************************************************************/

		    /**********************************************************************
			    * ISA Enumerations interpretation helper functions
			    * These help translate Fpc<blah> enumerated values to text
			    *********************************************************************/
		    /**********************************************************************
		    * TranslateFpcAccountType( AccountType )
		    *
		    *  Returns a string representing account types according to the ISA 
		    *  FpcAccountTypes enumerated values
		    *
		    *********************************************************************/
		    function TranslateFpcAccountType( AccountType )
		    {
			    switch( AccountType )
			    {
				    case 1: return "Group";
				    case 2: return "Domain";
				    case 3: return "Alias";
				    case 4: return "Well Known Group";
				    default: return "User";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcReportJobPeriodType( Type )
		    *
		    *  Translates an TranslateFpcReportJobPeriodType value with defaults
		    *
		    *********************************************************************/
		    function TranslateFpcReportJobPeriodType( Type )
		    {
			    switch( Type )
			    {
				    case 1: return "Weekly";
				    case 2: return "Monthly";
				    case 3: return "Yearly";
				    case 4: return "Custom";
				    default: return "Daily";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcReportStatus( Status )
		    *
		    *  Translates an FpcReportStatus values with defaults
		    *
		    *********************************************************************/
		    function TranslateFpcReportStatus( Status )
		    {
			    switch( Status )
			    {
				    case 1: return "Succeeded";
				    case 2: return "Running";
				    default: return "Failed";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcActions( Action )
		    *
		    *  Returns a string representing account types according to the ISA 
		    *  FpcActions enumerated values
		    *
		    *********************************************************************/
		    function TranslateFpcActions( Action )
		    {
			    switch( Action )
			    {
				    case 0: return "NotLogged";
				    case 1: return "Bind";
				    case 2: return "Listen";
				    case 3: return "GHBN";
				    case 4: return "GHBA";
				    case 5: return "RedirectBind";
				    case 6: return "Establish";
				    case 7: return "Terminate";
				    case 8: return "Denied";
				    case 9: return "Allowed";
				    case 10: return "Failed";
				    case 11: return "Intermediate";
				    case 12: return "Successful Connection";
				    case 13: return "Unsuccessful Connection";
				    case 14: return "Disconnection";
				    case 15: return "User Cleared Quarantine";
				    case 16: return "Quarantine Timeout";
				    default: return Action.toString();
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcActiveCachingPolicy( Policy )
		    *
		    *  Returns a string representing account types according to the ISA 
		    *  FpcActiveCachingPolicy enumerated values
		    *
		    *********************************************************************/
		    function TranslateFpcActiveCachingPolicy( Policy )
		    {
			    switch( Policy )
			    {
				    case 0: return "Fewer Network Accesses";
				    case 1: return "Normal";
				    case 2: return "Faster User Response";
				    default: return Policy.toString();
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcAlertActionType( AlertAction )
		    *
		    * Translates an FpcAlertActionType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcAlertActionType( AlertAction )
		    {
			    switch( AlertAction )
			    {
				    case 1: return "Command";
				    case 2: return "Send Mail";
				    case 3: return "Stop Services";
				    case 4: return "Start services";
				    default: return "Log Event";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcAlertCategory( AlertCategory )
		    *
		    * Translates an FpcAlertCategory enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcAlertCategory( AlertCategory )
		    {
			    switch( AlertCategory )
			    {
				    case 1: return "Cache";
				    case 2: return "Routing";
				    case 3: return "Firewall Service";
				    case 4: return "Other";
				    case 5: return "NLB";
				    default: return "Security";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcAlertSeverity( AlertSeverity )
		    *
		    * Translates an FpcAlertSeverity enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcAlertSeverity( AlertSeverity )
		    {
			    switch( AlertSeverity )
			    {
				    case 1: return "Warning";
				    case 2: return "Information";
				    default: return "Error";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcArrayType( ArrayType )
		    *
		    * Translates an FpcArrayType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcArrayType( ArrayType )
		    {
			    switch( ArrayType )
			    {
				    case 0: return "Standard";
				    default: return "Enterprise";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcAuthType( AuthType )
		    *
		    * Translates an FpcAuthType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcAuthType( AuthType )
		    {
			    switch( AuthType )
			    {
				    case 0: return "Basic";
				    default: return "Windows Integrated";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcServiceType( Provides )
		    *
		    * Translates an FpcAuthenticationSchemeProvides enumerated value to 
		    * user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcServiceType( Provides )
		    {
			    switch( Provides )
			    {
				    case 0: return "Undefined";
				    case 2: return "Web Proxy Forward";
				    case 3: return "Web Proxy Fwd / Rev";
				    default: return "Web proxy Reverse";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcAuthenticationSchemeProvides( Provides )
		    *
		    * Translates an FpcAuthenticationSchemeProvides enumerated value to 
		    * user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcAuthenticationSchemeProvides( Provides )
		    {
			    switch( Provides )
			    {
				    case 0: return "Nothing";
				    case 1: return "Namespace";
				    case 2: return "Method";
				    case 3: return "Namespace and Method";
				    default: return Provides.toString();
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcCacheContent( Cache )
		    *
		    * Translates an FpcCacheContent enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcCacheContent( Cache )
		    {
			    switch( Cache )
			    {
				    case 1: return "Include dynamic content";
				    case 2: return "Only if headers allow";
				    case 3: return "Never Cache";
				    default: return "All content";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcComponents( Components )
		    *
		    * Translates an FpcComponents enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcComponents( Components )
		    {
			    var arrComponents = new Array( "", "NAT", "Web Proxy", "HTTP Transparent", "Generic FW Protocols", 
											    "Firewall Extensions" );
			    Components = "0x" + Components;
			    if ( isNaN( Components ) || Components == 0xFFFFFFFF )
			    {
				    return "All";
			    }
			    if( Components == 0 )
			    {
				    return "None";
			    }
			    return TranslateBitMask( Components, arrComponents );
		    }

		    /**********************************************************************
		    * TranslateFpcConnectionDirectionType( Protocol, Direction )
		    *
		    * Translates an FpcConnectionDirectionType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcConnectionDirectionType( Protocol, Direction )
		    {
			    switch( Direction )
			    {
				    case 0:
					    return ( Protocol == "TCP" )? "Inbound": "Receive";
				    case 1:
					    return  ( Protocol == "TCP" )? "Outbound": "Send";
				    case 2:
					    return "Receive-Send";
				    case 3:
					    return "Send-Receive";
				    default: 
					    return "Inbound";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcConnectionProtocolType( Protocol )
		    *
		    * Translates an FpcConnectionProtocolType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcConnectionProtocolType( Protocol )
		    {
			    switch( Protocol )
			    {
				    case 1: return "ICMP";
				    case 2: return "IGMP";
				    case 3: return "GGP";
				    case 4: return "IP";
				    case 5: return "ST";
				    case 17: return "UDP";
				    case 47: return "GRE";
				    default: return "TCP";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcConnectivityGroupType( GroupType )
		    *
		    * Translates an FpcConnectivityGroupType enumeration to user-friendly 
		    * text
		    *
		    *********************************************************************/
		    function TranslateFpcConnectivityGroupType( GroupType )
		    {
			    switch ( GroupType )
			    {
				    case 0: return "Active Directory";
				    case 1: return "DHCP";
				    case 2: return "DNS";
				    case 3: return "Published Server";
				    case 5: return "Other";
				    default: return "Web";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcDaysOfWeek( Days )
		    *
		    *  Returns a string representing time units according to the ISA FpcDaysOfWeek 
		    *  binary flag values
		    *
		    *********************************************************************/
		    function TranslateFpcDaysOfWeek( Days )
		    {
			    var arrDaysOfWeek = new Array( "", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" );
			    return TranslateBitMask( Days, arrDaysOfWeek );
		    }

		    /**********************************************************************
		    * TranslateFpcExportImportOptionalData( OptionalData )
		    *
		    * Translates an FpcExportImportOptionalData enumeration to user-friendly 
		    * text
		    *
		    *********************************************************************/
		    function TranslateFpcExportImportOptionalData( OptionalData )
		    {
			    var arrOptions = new Array( "", "Passwords", "Permissions", "Server-specific", 
									    "Enterprise-specific" );
			    return TranslateBitMask( OptionalData, arrOptions );
		    }

		    /**********************************************************************
		    * TranslateFpcFetchUrlFlags( Flags )
		    *
		    * Translates an FpcFetchUrlFlags bit-flags value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcFetchUrlFlags( Flags )
		    {
			    var arrFlags = new Array( "", "Obey headers", "Manual TTL", "Fetch Sync", "No CARP", 
										    "Always cache", "Cache Dymanic" );
			    return TranslateBitMask( Flags, arrFlags );
		    }

		    /**********************************************************************
		    * TranslateFpcFilterDirection( Direction )
		    *
		    * Translates an FpcFilterDirection enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcFilterDirection( Direction )
		    {
			    switch( Direction )
			    {
				    case 0: return "Forward";
				    case 1: return "Reverse";
				    default: return "Fwd / Rev";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcFilterPriority( Priority )
		    *
		    * Translates an FpcFilterPriority enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcFilterPriority( Priority )
		    {
			    switch( Priority )
			    {
				    case 0: return "Low";
				    case 2: return "High";
				    default: return "Medium";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcIncludeStatus( Status )
		    *
		    * Translates an FpcIncludeStatus enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcIncludeStatus( Status )
		    {
			    return ( Status == 1 )? "Excluded": "Included";
		    }
    		
		    /**********************************************************************
		    * TranslateFpcIpSelectionMethods( Method )
		    *
		    * Translates an FpcIpSelectionMethods enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcIpSelectionMethods( Method )
		    {
			    switch ( Method )
			    {
				    case 0: return "All IP Addresses";
				    case 2: return "Specified IP Addresses";
				    default: return "Default IP Addresses";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcIpOptionsAction( Action )
		    *
		    * Translates an FpcIpOptionsAction enuymerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcIpOptionsAction( Action )
		    {
			    switch( Action )
			    {
				    case 1: return "Block on all IP Options";
				    case 2: return "Block unselected IP Options";
				    case 3: return "Block selected IP Options";
				    default: return "Do not block on IP Options";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcItemScope( Scope )
		    *
		    * Translates an FpcItemScope enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcItemScope( Scope )
		    {
			    return ( Scope == 1 )? "Enterprise Scope": "Array scope";
		    }
    		
		    /**********************************************************************
		    * TranslateFpcNameSystem( Type )
		    *
		    * Translates an FpcNameSystem enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcNameSystem( Type )
		    {
			    switch( Type )
			    {
				    case 0: return "DNS";
				    case 1: return "WINS";
				    default: return "IP";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcNetworkConnectionType( Type )
		    *
		    * Translates an FpcNetworkConnectionType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcNetworkConnectionType( Type )
		    {
			    switch( Type )
			    {
				    case 1: return "VPN";
				    case 2: return "Dial up";
				    case 3: return "Virtual";
				    case 4: return "IPSec";
				    default: return "Adapter";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcNetworkRoutingTypes( RoutingType )
		    *
		    * Translates an FpcNetworkRoutingTypes enumeration to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcNetworkRoutingTypes( RoutingType )
		    {
			    return ( RoutingType == 0 )? "Route": "NAT";
		    }

		    /**********************************************************************
		    * TranslateFpcNetworkSetType( Type )
		    *
		    * Translates an FpcNetworkSetType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcNetworkSetType( Type )
		    {
			    return ( Type == 1 )? "Exclusion List": "Inclusion List";
		    }

		    /**********************************************************************
		    * TranslateFpcNetworkTypes( Type )
		    *
		    * Translates an FpcNetworkTypes enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcNetworkTypes( Type )
		    {
			    switch( Type )
			    {
				    case 1: return "VPN Clients";
				    case 2: return "Local Host";
				    case 3: return "Default External";
				    case 4: return "Internal";
				    case 5: return "Qaurantined VPN Clients";
				    default: return "Normal";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcPolicyRuleAction( Action )
		    *
		    * Translates an FpcPolicyRuleAction value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcPolicyRuleAction( Action )
		    {
    			
			    switch ( Action )
			    {
				    case 1:
					    return "Deny";
				    default:
					    return "Allow";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcPolicyRuleTypes( ruleType )
		    *
		    * Translates an FpcPolicyRuleType enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcPolicyRuleTypes( ruleType )
		    {
			    switch ( ruleType )
			    {
				    case 1: return "Server Publishing Rule";
				    case 2: return "Web Publishing Rule";
				    default: return "Access Rule";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcPrimaryRouteType( Type )
		    *
		    * Translates an FpcPrimaryRouteType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcPrimaryRouteType( Type )
		    {
			    switch( Type )
			    {
				    case 1: return "Upstream";
				    case 2: return "Alternate";
				    default: return "Direct";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcProtocolCategory( Category )
		    *
		    * Translates an FpcProtocolCategory Bitmask value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcProtocolCategory( Category )
		    {
			    var arrCategories = new Array( "", "User-defined", "Common", "Infrastructure", "Mail", 
											    "Messaging", "Remote", "Media", "IPSec-VPN", "Web", "Auth" );
			    Category = "0x" + Category;
			    if ( isNaN( Category ) || Category == 0x0 || Category == 0xFFFFFFFF )
			    {
				    return "All";
			    }

			    return TranslateBitMask( Category, arrCategories );
		    }

		    /**********************************************************************
		    * TranslateFpcProtocolSelectionType( Select )
		    *
		    * Translates an FpcProtocolSelectionType enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcProtocolSelectionType( Select )
		    {
			    switch ( Select )
			    {
				    case 1: return "Specified Protocols";
				    case 2: return "All Except Specified Protocols";
				    default: return "All Protocols";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcReportJobCategory( Category )
		    *
		    * Translates an FpcReportJobCategory bit-flags value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcReportJobCategory( Category )
		    {
			    var arrCategories = new Array( "Summary", "Web Usage", "Application", 
										    "Traffic", "Security" );
			    return TranslateBitMask( Category, arrCategories );
		    }

		    /**********************************************************************
		    * TranslateFpcRequestType( ReqType )
		    *
		    * Translates an FpcRequestType to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcRequestType( ReqType )
		    {
			    switch ( ReqType )
			    {
				    case 1: return "Ping";
				    case 2: return "TCP Port";
				    default: return "HTTP Request";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcScheduledTaskRunningPeriod( Period )
		    *
		    * Translates an FpcScheduledTaskRunningPeriod enumerated value to user-friendly text
		    *
		    *********************************************************************/
		    function TranslateFpcScheduledTaskRunningPeriod( Period )
		    {
			    switch( Period )
			    {
				    case 0: return "Run Once";
				    case 2: return "Specified Day of Week";
				    case 3: return "Specified Day of Month";
				    default: return "Run Daily";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcSizeUnits( Unit )
		    *
		    *  Returns a string representing time units according to the ISA FpcSizeUnits enumerated 
		    *  values
		    *
		    *********************************************************************/
		    function TranslateFpcSizeUnits( Unit )
		    {
			    switch( Unit )
			    {
				    case 1: return "KB";
				    case 2: return "MB";
				    case 3: return "GB";
				    default: return Unit.toString();
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcPublishedServerType( Type )
		    *
		    * Translates an FpcPublishedServerType enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcPublishedServerType( Type )
		    {
			    switch( Type )
			    {
				    case 0: return "HTTP Server";
				    case 1: return "SSL Server";
				    case 3: return "FTP Server";
				    default: return "HTTP and SSL Server";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcSSLRequireSecureChannelMode( SslMode )
		    *
		    * Translates an FpcSSLRequireSecureChannelMode enumerated value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateFpcSSLRequireSecureChannelMode( SslMode )
		    {
			    switch( SslMode )
			    {
				    case 1: return "Required (default encryption)";
				    case 2: 
				    case 3: return "Required (128-bit)";
				    default: return "Not Required";
			    }
		    }

		    /**********************************************************************
		    * TranslateFpcTimeScale( Unit )
		    *
		    *  Returns a string representing time units according to the ISA FpcTimeScale 
		    *  enumerated values
		    *
		    *********************************************************************/
		    function TranslateFpcTimeScale( Unit )
		    {
			    switch( Unit )
			    {
				    case 1: return "seconds";
				    case 2: return "minutes";
				    case 3: return "hours";
				    case 4: return "days";
				    case 5: return "weeks";
				    default: return Unit.toString();
			    }
		    }

		    /**********************************************************************
		    * TranslateBitMask( Flags, arrData )
		    *
		    * Translates a Flags bitmask value to a string containing applied
		    * values from arrData
		    *
		    *********************************************************************/
		    function TranslateBitMask( Flags, arrData )
		    {
			    var arrResults = new Array();
			    if ( Flags == 0 )
			    {
				    return "None";
			    }

			    for ( var i = 1; i < arrData.length; i++ )
			    {
				    if ( Flags & ( 1 << i ) )
				    {
					    arrResults.push( arrData[ i ] );
				    }
			    }
			    return arrResults.join( ", " );
		    }

		    /**********************************************************************
			    * End of ISA Enumeration interpretation helper functions
			    *********************************************************************/

		    /**********************************************************************
			    * special XSL helper functions that don't have an ISA enum category
			    *********************************************************************/
		    /**********************************************************************
			    * ISA HTTP Filter helper functions
			    *********************************************************************/

		    /**********************************************************************
		    * TranslateViaAction( action )
		    *
		    * Translates HTTP Filter "send host header" value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateViaAction( action )
		    {
			    switch( action )
			    {
				    case 1: return "Send Header: "
				    default: return "Send Default Header"
			    }
		    }

		    /**********************************************************************
		    * TranslateSvrAction( action )
		    *
		    * Translates Modify header value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateSvrAction( action )
		    {
			    switch( action )
			    {
				    case 1: return "Strip Header";
				    case 2: return "Send Header: ";
				    case 0:
				    default: return "Send Original Header";
			    }
		    }

		    /**********************************************************************
		    * TranslateSearchIn( SearchType )
		    *
		    * Translates Search In value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateSearchIn( SearchType )
		    {
			    switch( SearchType )
			    {
				    case 0: return "Request URL";
				    case 1: return "Request Headers";
				    case 2: return "Request Body";
				    case 3: return "Response Headers";
				    case 4: return "Response Body";
			    }
		    }

		    /**********************************************************************
		    * TranslateMaxLen( length )
		    *
		    * Translates Max Body length value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateMaxLen( length )
		    {
			    if( isNaN( length ) || length <= 0 )
			    {
				    return "Unlimited";
			    }
			    return length.toString();
		    }

		    /**********************************************************************
		    * TranslateAllowCondition( condition )
		    *
		    * Translates extensions & verbs allowcondition value to user-frendly text
		    *
		    *********************************************************************/
		    function TranslateAllowCondition( condition )
		    {
                switch( condition )
                {
                    case 1:
                        return "Allow Specified";
                    case 2:
                        return "Block Specified";
                    default:
                        return "Allow All";
                }
		    }

		    /**********************************************************************
			    * End of ISA HTTP Filter helper functions
			    *********************************************************************/

		    /**********************************************************************
		    * ConnVerifierTimeout( Timeout )
		    *
		    * provbides a default value if ConnectivityVerifierThreshold value is
		    * set to default (does not appear in XML)
		    *
		    *********************************************************************/
		    function ConnVerifierTimeout( Timeout )
		    {
			    if ( isNaN( Timeout ) )
			    {
				    return "5000";		//default value of 5 secs
			    }
			    return Timeout.toString();
		    }
    		
		    /**********************************************************************
		    * TranslateAllPortsThreshold( Threshold )
		    *
		    * provbides a default value if TranslateAllPortsThreshold value is
		    * set to default (does not appear in XML)
		    *
		    *********************************************************************/
		    function TranslateAllPortsThreshold( Threshold )
		    {
			    if ( isNaN( Threshold ) )
			    {
				    return "30";		//default value of 30
			    }
			    return Threshold.toString();
		    }
    		
		    /**********************************************************************
		    * TranslateCustomPort( Port )
		    *
		    * provbides a default value if TranslateCustomPort value is
		    * set to default (does not appear in XML)
		    *
		    *********************************************************************/
		    function TranslateCustomPort( Port )
		    {
			    if ( isNaN( Port ) )
			    {
				    return "Disabled";
			    }
			    return Port.toString();
		    }
    		
		    /**********************************************************************
		    * TranslateDistinctPortsThreshold( Threshold )
		    *
		    * provbides a default value if TranslateDistinctPortsThreshold value is
		    * set to default (does not appear in XML)
		    *
		    *********************************************************************/
		    function TranslateDistinctPortsThreshold( Threshold )
		    {
			    if ( isNaN( Threshold ) )
			    {
				    return '10';		//default value of 10
			    }
			    return Threshold.toString();
		    }
    		
		    /**********************************************************************
		    * TranslateEventData( EventDataString )
		    *
		    * Reformats Event Log data to "wrappable" form
		    *
		    *********************************************************************/
		    function TranslateEventData( EventDataString )
		    {
			    if ( !EventDataString.length )
			    {
				    return "";
			    }
			    var arrData = EventDataString.split( "," );
			    return arrData.join( ", " );
		    }
    		
		    /**********************************************************************
		    * TranslateClassName( className )
		    *
		    *  Returns a 'cleaned up' string representing the class name of the fpcRef object
		    *
		    *********************************************************************/
		    function TranslateClassName( className )
		    {
			    switch ( className )
			    {
				    case "AddressRange": 
					    return "Address Range";
				    case "AuthenticationSchemes": 
					    return "Authentication Schemes";
				    case "Computer": 
					    return "Computer";
				    case "ComputerSet": 
					    return "Computer Set";
				    case "ContentTypeSet": 
					    return "Content Type Set";
				    case "DomainNameSet": 
					    return "Domain Name Set";
				    case "EventDefinitions": 
					    return "Event Definitions";
				    case "IPsOnNetworkSet": 
					    return "IP Addresses on Network Set";
				    case "ISAPIFilter": 
					    return "Web Proxy Filter";
				    case "NetworkSet": 
					    return "Network Set";
				    case "ProxyPlugin": 
					    return "Application Filter";
				    case "PublishedProtocol": 
					    return "Protocol";
				    case "ProxyScheduleTemplate": 
					    return "Schedule";
				    case "RadiusServer": 
					    return "Radius Server";
				    case "URLSet": 
					    return "URL Set";
				    case "UserSet": 
					    return "Users";
				    case "WebListener": 
					    return "Web Listener";
				    default: 
					    return className;
			    }
		    }

		    /**********************************************************************
		    * TranslateConcurrentConnections( Connections )
		    *
		    * Translates a FpcFetchUrlConcurrentConnections settings value to its 
		    * numeric value
		    *
		    *********************************************************************/
		    function TranslateConcurrentConnections( Connections )
		    {
			    if( isNaN( Connections ) )
			    {
				    return "4";
			    }
			    return Connections.toString();
		    }

		    /**********************************************************************
		    * TranslateCssConnection( Name, Value )
		    *
		    * Provides CSS Connection default values
		    *
		    *********************************************************************/
		    function TranslateCssConnection( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
			    switch( Name )
			    {
				    case "FallbackDelay": return "30";
				    case "PrimaryTestingDelay": return "360";
				    case "PrimaryStabilizationDelay": return "10";
				    case "ChangePollRate":
				    case "QuietThreshold":
				    case "QuietPollRate": return "15";
				    case "NoiseThreshold": return "3600";
				    case "ReconnectPollRate": return "60";
				    case "ErrorRecoveryPollRate": return "300";
			    }
		    }

		    /**********************************************************************
		    * TranslateCssConnType( CssType )
		    *
		    * Provides CSS Connection Type values
		    *
		    *********************************************************************/
		    function TranslateCssConnType( CssType )
		    {
			    if( !CssType )
			    {
				    return "LDAP";
			    }
			    return "LDAPS";
		    }

		    /**********************************************************************
		    * TranslateLogs( Name, Value )
		    *
		    * Translates a Logs value to its numeric value
		    *
		    *********************************************************************/
		    function TranslateLogs( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
			    switch( Name )
			    {
				    case "MSDENumberOfInsertsPerBatch": return "10000";
				    case "SQLNumberOfInsertsPerBatch": return "1000";
				    case "MSDEQueryTimeout": return "150";
			    }
		    }

		    /**********************************************************************
			    * TranslateLowLevelSettings( Type, Value )
			    *
			    * Translates a low Level settings value to its numeric value
			    *
			    *********************************************************************/
		    function TranslateLowLevelSettings( Type, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
			    switch( Type )
			    {
				    case "allowedaddresses": return "0";
				    case "dnsnegcache": return "300";
				    case "dnscachesize": return "10000";
				    case "dnsrecordsize": return "18";
				    case "maxaccepts": return "15000";
				    case "maxpercent": return "40";
				    case "minpercent": return "3";
				    case "createpercent": return "240";
				    case "killpercent": return "5";
				    case "numpending": return "20";
				    case "tcpbuffer": return "2920";
				    case "udpbuffer": return "8192";
			    }
		    }

		    /**********************************************************************
			    * TranslatePrefetcherConfig( Name, Value )
			    *
			    * Provides PrefetcherConfig default values
			    *
			    *********************************************************************/
		    function TranslatePrefetcherConfig( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
			    switch( Name )
			    {
				    case "DailyFreqTimeUnits": return "3";
				    case "DailyFreqTimeValue": return "1";
				    case "DailyFrequency": return "1";
				    case "MaxDepth": return "Maximim";
				    case "MaxPages": return "100";
				    case "NumberOfConcurrentConnections": return "4";
				    case "TTL": return "60";
			    }
		    }

		    /**********************************************************************
			    * TranslateProxyCacheConfig( Name, Value )
			    *
			    * Provides ProxyCacheConfig default values
			    *
			    *********************************************************************/
		    function TranslateProxyCacheConfig( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
			    switch( Name )
			    {
				    case "FreshnessInterval": return "86400";
				    case "MaxProtectionTime": return "60";
				    case "MemoryCacheMaxURLSize": return "12800";
				    case "MemoryCacheUsagePercent": return "10";
				    case "ServerProtectFactor": return "50";
			    }
		    }

		    /**********************************************************************
			    * TranslateFpcCacheAction( Action )
			    *
			    * Provides ProxyCacheRule default values
			    *
			    *********************************************************************/
		    function TranslateFpcCacheAction( Action )
		    {
			    switch( Action )
			    {
				    case 1: return "any object version or update from Internet";
				    case 2: return "cached content only";
				    default: return "valid object version or update from Internet";
			    }
		    }

		    /**********************************************************************
			    * TranslateFpcForwardType( Type )
			    *
			    * Translates FpcForwardType value with a default value
			    *
			    *********************************************************************/
		    function TranslateFpcForwardType( Type )
		    {
			    return ( Type == 1 )? "Upstream": "Direct";
		    }

		    /**********************************************************************
			    * TranslateFpcNLBAffinity( Value )
			    *
			    * Translates FpcNLBAffinity value with a default value
			    *
			    *********************************************************************/
		    function TranslateFpcNLBAffinity( Value )
		    {
			    if( isNaN( Value ) )
			    {
				    return "1";
			    }
			    return Value.toString();
		    }

		    /**********************************************************************
			    * TranslateFpcDelegatedAdminType( Type )
			    *
			    * Translates FpcDelegatedAdminType values with a default value
			    *
			    *********************************************************************/
		    function TranslateFpcDelegatedAdminType( Type )
		    {
			    if( isNaN( Type ) )
			    {
				    return "SID Valid";
			    }
			    return "Name Valid";
		    }

		    /**********************************************************************
			    * TranslateFpcVpnQuarantineMode( Mode )
			    *
			    * Translates FpcVpnQuarantineMode values with a default value
			    *
			    *********************************************************************/
		    function TranslateFpcVpnQuarantineMode( Mode )
		    {
			    switch( Mode )
			    {
				    case 1: return "Enabled";
				    case 2: return "Enabled with RADIUS Policy";
				    default: return "Disabled";
			    }
		    }

		    /**********************************************************************
			    * TranslateFpcFileDirectoryType( Type )
			    *
			    * Translates FpcFileDirectoryType value with a default value
			    *
			    *********************************************************************/
		    function TranslateFpcFileDirectoryType( Type )
		    {
			    switch( Type )
			    {
				    case 0: return "Full Path";
				    default: return "Relative Path";
			    }
		    }

		    /**********************************************************************
			    * TranslateWebProxy( Type, Value )
			    *
			    * Translates a Web proxy value to its numeric value
			    *
			    *********************************************************************/
		    function TranslateWebProxy( Type, Value )
		    {
			    if( Value )
			    {
				    return Value.toString();
			    }
			    switch( Type )
			    {
				    case "connectcache": return "128";
				    case "responseheader": return "32768";
				    case "ftppassword": return "IEUser@";
			    }
		    }

		    /**********************************************************************
			    * TranslateDword( dword )
			    *
			    *  Translates a text RPN DWord to its numeric value
			    *
			    *********************************************************************/
		    function TranslateDword( dword )
		    {
			    var tempVal = "0x";
			    for ( var i = 3; i >= 0; i-- )
			    {
				    tempVal += dword.substr( i * 2, 2 );
			    }
			    return parseInt( tempVal );
		    }

		    /**********************************************************************
			    * DefaultFalse( BoolVal )
			    *
			    * Translates an value to a default value of false
			    *
			    *********************************************************************/
		    function DefaultFalse( BoolVal )
		    {
			    return ( BoolVal )? true: false;
		    }

		    /**********************************************************************
			    * DefaultTrue( BoolVal )
			    *
			    * Translates an value to a default value of true
			    *
			    *********************************************************************/
		    function DefaultTrue( BoolVal )
		    {
			    if( isNaN( BoolVal ) )
			    {
				    return true;
			    }
			    return ( BoolVal != 0 );
		    }

		    /**********************************************************************
			    * DefaultZero( Value )
			    *
			    * Translates a value to a default value of zero
			    *
			    *********************************************************************/
		    function DefaultZero( Value )
		    {
			    if( isNaN( Value ) )
			    {
				    return "0";
			    }
			    return Value.toString();
		    }

		    /**********************************************************************
		    * TranslateAuthDelegation( iValue )
		    *
		    * Translates fpcCredentialsDelegation value to a string with defaults
		    *
		    *********************************************************************/
		    function TranslateAuthDelegation( iValue, szIsa )
		    {
		        if( "2k4" == szIsa )
		        {
	                return (iValue)?"Basic":"None";
	            }
	            switch( iValue )
	            {
		            case 0: return "None; Direct";
		            case 2: return "SecurID";
		            case 3: return "Basic";
		            case 4: return "NTLM";
		            case 5: return "Negotiate";
		            case 6: return "KCD";
		            default: return "None; Blocked";  //also case 1
	            }
		    }

		    /**********************************************************************
		    * TranslateRedirectPort( Type, Port )
		    *
		    * Translates a redirect port value to a string with defaults
		    *
		    *********************************************************************/
		    function TranslateRedirectPort( Type, Port )
		    {
			    if( !isNaN( Port ) )
			    {
				    return Port.toString();
			    }
			    switch( Type )
			    {
				    case "ftp": return "21";
				    case "http": return "80";
				    case "ssl": return "443";
			    }
		    }
    		
		    /**********************************************************************
		    * TranslatePortRange( LowPort, HiPort )
		    *
		    * Translates a portrange set to 'port' or 'port --> port' string
		    *
		    *********************************************************************/
		    function TranslatePortRange( LoPort, HiPort )
		    {
			    if( isNaN( LoPort ) )
			    {
				    return "Disabled";
			    }
			    var PortString = LoPort.toString();
			    if( HiPort != LoPort )
			    {
				    PortString += ( ' --> ' + HiPort.toString() );
			    }
			    return PortString
		    }
    		
		    /**********************************************************************
		    * TranslateStringSet( XmlNodeSet )
		    *
		    * Collates an XML Node Set collection into a sorted comma-delimited list
		    *
		    *********************************************************************/
		    function TranslateStringSet( XmlNodeSet )
		    {
			    var arrData = new Array();
			    for( var inx = 0; inx < XmlNodeSet.length; inx++ )
			    {
				    var XmlNode = XmlNodeSet.item( inx )
				    arrData.push( XmlNode.text );
			    }
			    arrData.sort();
			    return arrData.join( ", " );
		    }
    		
		    /**********************************************************************
			    * TranslateDefaultFtpTtl( TTL )
			    *
			    * Translates an FtpTtl value with a default value
			    *
			    *********************************************************************/
		    function TranslateDefaultFtpTtl( TTL )
		    {
			    if( isNaN( TTL ) )
			    {
				    return "1";
			    }
			    return TTL.toString();
		    }

		    /**********************************************************************
			    * TranslateVpnMaximumClients( Clients )
			    *
			    * Translates VpnMaximumClients value with a default value
			    *
			    *********************************************************************/
		    function TranslateVpnMaximumClients( Clients )
		    {
			    if( isNaN( Clients ) )
			    {
				    return "400";
			    }
			    return Clients.toString();
		    }

		    /**********************************************************************
			    * TranslateVpnQuarantineTimeout( Enable, Value )
			    *
			    * Translates ProxyHTTPCacheConfig values with a default value
			    *
			    *********************************************************************/
		    function TranslateVpnQuarantineTimeout( Enable, Value )
		    {
			    if( Enable )
			    {
				    return Value.toString() + " seconds";
			    }
			    return "Disabled";
		    }

		    /**********************************************************************
			    * TranslateVpnEncryption( Type )
			    *
			    * Translates an FpcVpnEncryptionAlgorithm enumerated value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateVpnEncryption( Type )
		    {
			    switch( Type )
			    {
				    case 0: return "DES";
				    default: return "3DES";
			    }
		    }

		    /**********************************************************************
			    * TranslateVpnIntegrity( Type )
			    *
			    * Translates an FpcVpnIntegrityAlgorithm enumerated value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateVpnIntegrity( Type )
		    {
			    switch( Type )
			    {
				    case 1: return "MD5";
				    default: return "SHA1";
			    }
		    }

		    /**********************************************************************
			    * TranslateVpnDiffieHellman( Type )
			    *
			    * Translates an FpcVpnDiffieHellmanGroup enumerated value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateVpnDiffieHellman( Type )
		    {
			    switch( Type )
			    {
				    case 0: return "Group 1 (768bit)";
				    case 2: return "Group 2048 (2048bit)";
				    default: return "Group 2 (1024bit)";
			    }
		    }

		    /**********************************************************************
			    * TranslatePhaseRekeyingTime( Time, Phase )
			    *
			    * Translates an Phase1RekeyingTime value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslatePhaseRekeyingTime( Time, Phase )
		    {
			    if( !isNaN( Time ) )
			    {
				    return Time.toString();
			    }
			    if( 1 == Phase )
			    {
				    return "28800";
			    }
			    return "3600";
		    }

		    /**********************************************************************
			    * TranslatePhase2KBRekeying( Time )
			    *
			    * Translates an Phase2KBRekeying value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslatePhase2KBRekeying( Time )
		    {
			    if( !isNaN( Time ) )
			    {
				    return Time.toString();
			    }
			    return "100000";
		    }

		    /**********************************************************************
			    * TranslateFpcVpnProtocol( Protocol )
			    *
			    * Translates an FpcVpnProtocol enumerated value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateFpcVpnProtocol( Protocol )
		    {
			    switch( Protocol )
			    {
				    case 1: return "PPTP";
				    default: return "L2TP";
			    }
		    }

		    /**********************************************************************
			    * TranslateVpnAuthenticationMethod( Type )
			    *
			    * Translates an FpcVpnAuthenticationMethod enumerated value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateVpnAuthenticationMethod( Type )
		    {
			    switch( Type )
			    {
				    case 0: return "Certificate";
				    default: return "Pre-shared key";
			    }
		    }

		    /**********************************************************************
			    * TranslateVpnIdleDisconnectTime( Time )
			    *
			    * Translates an VpnIdleDisconnectTime value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateVpnIdleDisconnectTime( Time )
		    {
			    if( isNaN( Time ) )
			    {
				    return "86400";
			    }
			    return Time.toString();
		    }

		    /**********************************************************************
			    * TranslateProxyHTTPCacheConfig( Name, Value )
			    *
			    * Translates ProxyHTTPCacheConfig values with a default value
			    *
			    *********************************************************************/
		    function TranslateProxyHTTPCacheConfig( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
    			
			    switch( Name )
			    {
				    case "AgeFactor": return "20";
				    case "MaxIntervalUnits": return "4";
				    case "MaxIntervalValue": return "1";
				    case "MinInterval": return "15";
				    case "MinIntervalUnits": return "2";
			    }
		    }

		    /**********************************************************************
			    * TranslateEventsCount( EventsCount )
			    *
			    * Translates an Alerts Events Count to user-friendly text
			    *
			    *********************************************************************/
		    function TranslateEventsCount( EventsCount )
		    {
			    if( isNaN( EventsCount ) )
			    {
				    return "0";
			    }
			    return EventsCount.toString();
		    }

		    /**********************************************************************
			    * TranslateMinsBeforeReRaise( Mins )
			    *
			    * Translates an Minutes Before ReRaise Count to user-friendly text
			    *
			    *********************************************************************/
		    function TranslateMinsBeforeReRaise( Mins )
		    {
			    if( Mins == -1 || isNaN( Mins ) )
			    {
				    return "Must be reset";
			    }

			    if( Mins == 0 )
			    {
				    return "Can be raised immediately";
			    }

			    return Mins.toString();
		    }

		    /**********************************************************************
			    * TranslateProtocolLimits( ProtoLimit )
			    *
			    * Translates an Protocol Limits value to user-friendly text
			    *
			    *********************************************************************/
		    function TranslateProtocolLimits( ProtoLimit )
		    {
			    if( isNaN( ProtoLimit ) )
			    {
				    return "160";
			    }
			    return ProtoLimit.toString();
		    }

		    /**********************************************************************
			    * TranslateRulesPerSecond( RulesPerSecond )
			    *
			    * Translates an RulesPerSecond value to user-friendly text
			    *
			    *********************************************************************/
		    function TranslateRulesPerSecond( RulesPerSecond )
		    {
			    if( isNaN( RulesPerSecond ) )
			    {
				    return "1000";
			    }
			    return RulesPerSecond.toString();
		    }

		    /**********************************************************************
			    * TranslateSelectIPs( SelectIPs )
			    *
			    * Translates an IP Selection Storage name to user-friendly text
			    *
			    *********************************************************************/
		    function TranslateSelectIPs( SelectIPs )
		    {
			    switch ( SelectIPs )
			    {
				    case "SourceSelectionIPs": return "From";
				    case "DestinationSelectionIPs": return "To";
				    default: return SelectIPs;
			    }
		    }

		    /**********************************************************************
			    * TranslateSvcStatus( Status )
			    *
			    * Translates an ISA service status boolean into text
			    *
			    *********************************************************************/
		    function TranslateSvcStatus( Status )
		    {
			    switch( Status )
			    {
				    case 0: return "Stopped";
				    case -1: return "Running";
				    case 80070424: return "Not Installed";
				    default: return Status.toString() + " not understood"
			    }
		    }

		    /**********************************************************************
			    * GetServiceNames( ServiceSet )
			    *
			    * Gathers all the service names from the XML NodeSet
			    *
			    *********************************************************************/
		    function GetServiceNames( ServiceSet )
		    {
			    var Services = new Enumerator( ServiceSet );
			    var ServiceNames = new Array( );
    			
			    for( ; !Services.atEnd(); Services.moveNext() )
			    {
				    var Service = Services.item();
				    var ServiceName = Service.selectSingleNode( "DisplayName" ).text;
				    ServiceNames.push( ServiceName );
			    }
			    ServiceNames = ServiceNames.sort();
			    return ServiceNames.join( "<br>" );
		    }

		    /**********************************************************************
			    * TranslateLogType( LogType, LogComponent )
			    *
			    * Translates an ISA log type enumerated value into text
			    *
			    *********************************************************************/
		    function TranslateLogType( LogType, LogComponent )
		    {
			    switch( LogType )
			    {
				    case 0:
					    return "W3C Text Format";
				    case 1:
					    return "ISA Text Format";
				    case 2:
					    return "ODBC Connection";
				    case 3:
					    return "Local MSDE";
				    default:
					    if( LogComponent == "FltrSnk1_MailLog")
					    {
						    return "W3C Text Format";
					    }
					    else
					    {
						    return "Local MSDE";
					    }
			    }
		    }
    		
		    /**********************************************************************
			    * GUID manglers
			    *
			    * ISA element names can violate HTML element ID restrictions, and we want 
			    * something more unique than the element "name" for HTML element IDs.
			    *
			    * ISA element GUIDs also can violate HTML identifiers, but their 
			    * construction is much more predictable and better still, they're 
			    * guaranteed to be unique
			    *
			    *********************************************************************/
		    /**********************************************************************
			    * FixGUID( GUID )
			    *
			    * Modifies a GUID so that it can be used as an HTML object unique 
			    * identifier
			    *
			    * The caller strips the braces, we change '-' to '_' and prefix it 
			    * with 'G' so that it doesn't start with a number
			    *
			    * 3563FFF5-DF93-40eb-ABC3-D24B5F14D8AA will become
			    * G3563FFF5_DF93_40eb_ABC3_D24B5F14D8AA
			    *
			    *********************************************************************/
		    function FixGUID( GUID )
		    {
			    return "G" + GUID.replace( /-/g, "_" );
		    }

		    /**********************************************************************
			    * UnFixGUID( FixedGUID )
			    *
			    * Reverses the changes wrought by FixGUID()
			    *
			    * Have to re-add the braces, change '_' to '-' and remove the 'G'
			    *
			    * G3563FFF5_DF93_40eb_ABC3_D24B5F14D8AA will become
			    * {3563FFF5-DF93-40eb-ABC3-D24B5F14D8AA}
			    *
			    *********************************************************************/
		    function UnFixGUID( FixedGUID )
		    {
			    return "{" + FixedGUID.replace( /_/g, "-" ).substr( 2 ) + "}";
		    }
		    /**********************************************************************
			    * End of GUID manglers
			    *********************************************************************/

		    /**********************************************************************
			    * GetPathTail( FullPath )
			    *
			    * Extracts the local folder name from the full path
			    *
			    *********************************************************************/
		    function GetPathTail( FullPath )
		    {
			    return FullPath.substr( FullPath.lastIndexOf( "\\" ) + 1 );
		    }

		    /**********************************************************************
			    * FixPathWhacks( FullPath )
			    *
			    * Escapes the single whacks in a folder path
			    *
			    *********************************************************************/
		    function FixPathWhacks( FullPath )
		    {
			    return FullPath.replace( /\\/g, "\\\\" );
		    }

		    /**********************************************************************
			    * IsEnabled( intVal )
			    *
			    * Translates a integer to 'Enabled' or 'Disabled', where '!0' == true
			    *
			    *********************************************************************/
		    function IsEnabled( intVal )
		    {
			    return ( intVal )? "Enabled": "Disabled";
		    }
    		
		    /**********************************************************************
			    * TranslateIPRouting( routing )
			    *
			    * Translates IP Routing value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateIPRouting( routing )
		    {
			    var arrData = new Array( "", "TCP/IP", "ISA", "RRAS" );
			    return TranslateBitMask( routing, arrData );
		    }

		    /**********************************************************************
			    * TranslateIPAddress( IPAdds, Subnets )
			    *
			    * Builds a set of HTML rows / cells to display IP Address / subnet pairs
			    *
			    *********************************************************************/
		    function TranslateIPAddress( IPAdds, Subnets ){

			    var firstOne = "<tr><td width=\"35%\">&#160;IP Address / Subnet pairs";
			    var allOthers = "<tr><td width=\"35%\">";
			    var rightSide = "</td><td width=\"65%\">";
			    var endRow = "</td></tr>";
			    var split = " / ";
    			
			    var arrIPs = IPAdds.split( "," );
			    var arrSubnets = Subnets.split( "," );
			    var i;
			    var IPInfo = "";
    			
			    for ( i = 0; i < arrIPs.length; i++ )
			    {
				    if ( i == 0 )
				    {
					    IPInfo = firstOne;
				    }
				    else
				    {
					    IPInfo += allOthers;
				    }
				    IPInfo += rightSide + arrIPs[ i ] + split + arrSubnets[ i ] + endRow;
			    }
			    return IPInfo;
		    }

		    /**********************************************************************
			    * TranslateIPSets( context, IPAdds )
			    *
			    * Builds a set of HTML rows / cells to display IP Addresses gathered from 
			    * Win32_NetworkAdapterConfiguration query
			    *
			    *********************************************************************/
		    function TranslateIPSets( context, IPAdds ){

			    var firstOne = "<tr><td width=\"35%\">&#160;" + context;
			    var allOthers = "<tr><td width=\"35%\">";
			    var rightSide = "</td><td width=\"65%\">";
			    var endRow = "</td></tr>";
    			
			    var arrIPs = IPAdds.split( "," );
			    var i;
			    var IPInfo = "";
    			
			    for ( i = 0; i < arrIPs.length; i++ )
			    {
				    if ( i == 0 )
				    {
					    IPInfo = firstOne;
				    }
				    else
				    {
					    IPInfo += allOthers;
				    }
				    IPInfo += rightSide + arrIPs[ i ] + endRow;
			    }
			    return IPInfo;
		    }

		    /**********************************************************************
			    * TranslateDomainRole( role )
			    *
			    * Translates a Win32_ComputerSystem.DomainRole value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateDomainRole( role )
		    {
			    if( isNaN( role ) )
			    {
				    return "Unknown; " + role.toString();
			    }
			    var DR = new Array ( "Standalone Workstation  ( Workgroup )", "Member Workstation",
						    "Standalone Server  ( Workgroup )", "Member Server",
						    "Backup Domain Controller", "Primary Domain Controller" ) 

			    return DR[ role ];
		    }

		    /**********************************************************************
			    * TranslateAvailability( avail )
			    *
			    * Translates a SWbemObject.Availability value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateAvailability( avail ){

			    var Availability = new Array ( "", "Other", "Unknown", "Running/Full Power", "Warning",
						    "In Test", "Not Applicable", "Power Off", "Off Line",
						    "Off Duty", "Degraded", "Not Installed", "Install Error",
						    "Power Save - Unknown", "Power Save - Low Power Mode",
						    "Power Save - Standby", "Power Cycle", "Power Save - Warning" ) 

			    return Availability[ avail ];
		    }

		    /**********************************************************************
			    * TranslateCpuStatus( status )
			    *
			    * Translates a Win32_Processor.Status value to user-frendly text
			    *
			    *********************************************************************/
		    function TranslateCpuStatus( status )
		    {
			    var CpuStatus = Array ( "", "Unknown", "CPU Enabled", "CPU Disabled by User via BIOS Setup", 
						    "CPU Disabled By BIOS  ( POST Error )", "CPU is Idle", "Reserved-6", 
						    "Reserved-7", "Other" ) 
    						
			    return CpuStatus[ status ];
		    }

		    /**********************************************************************
			    * TranslatePort( port )
			    *
			    * Returns "Disabled" if port is 0
			    *
			    *********************************************************************/
		    function TranslatePort( port )
		    {
			    if ( port == 0 )
			    {
				    return "Disabled";
			    }
			    else
			    {
				    return port.toString();
			    }
		    }

		    /**********************************************************************
			    * TranslateDailySumConfig( Name, Value )
			    *
			    * Provides default values for Daily Sum settings
			    *
			    *********************************************************************/
		    function TranslateDailySumConfig( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value;
			    }
			    switch( Name )
			    {
				    case "DailySumStartMinute": return "30";
				    case "KeepOldDailySummaries": return "35";
				    case "KeepOldMonthlySummaries": return "13";
			    }
		    }

		    /**********************************************************************
			    * TranslateDayOfMonth( Day )
			    *
			    * Provides default values for Day of month
			    *
			    *********************************************************************/
		    function TranslateDayOfMonth( Day )
		    {
			    if( !isNaN( Day ) )
			    {
				    return Day.toString();
			    }
			    return "1";
		    }

		    /**********************************************************************
			    * TranslateRoutingPort( Name, Port )
			    *
			    * Provides default values for routing rule ports
			    *
			    *********************************************************************/
		    function TranslateRoutingPort( Name, Port )
		    {
                if( Port )
                {
                    return Port.toString();
                }
			    switch( Name )
			    {
				    case "host": return "80";
				    case "hostssl": return "443";
				    case "route": return "8080";
				    case "routessl": return "8443";
			    }
		    }

		    /**********************************************************************
			    * TranslateRadiusServers( Value )
			    *
			    * Provides default values for RSDIUS servers data
			    *
			    *********************************************************************/
		    function TranslateRadiusServers( Value )
		    {
			    if( isNaN( Value ) )
			    {
				    return "2";
			    }
			    return Value.toString();
		    }

		    /**********************************************************************
			    * TranslateRadiusServer( Name, Value )
			    *
			    * Provides default values for RADIUS server data
			    *
			    *********************************************************************/
		    function TranslateRadiusServer( Name, Value )
		    {
			    if( !isNaN( Value ) )
			    {
				    return Value.toString();
			    }
			    switch( Name )
			    {
				    case "ConnectionTimeout": return "5000";
				    case "Port": return "1812";
			    }
		    }

		    /**********************************************************************
			    * TranslateLoadFactor( Value )
			    *
			    * Provides default values for Load Factor server data
			    *
			    *********************************************************************/
		    function TranslateLoadFactor( Value )
		    {
			    if( isNaN( Value ) )
			    {
				    return "100";
			    }
			    return Value.toString();
		    }

		    /**********************************************************************
			    * TranslateFBAFormsType( Value )
			    *
			    * Provides default values for Load Factor server data
			    *
			    *********************************************************************/
		    function TranslateFBAFormsType( Value )
		    {
                switch( Value )
                {
                    case 0: return "Use forms written in HTML 4.01 format";
                    case 1: return "Use forms written in cHTML format";
                    case 2: return "Use forms written in XHTML-MP format"
                    case 3: return "Perform Basic authentication instead of forms-based authentication";
                    default: "unknown; " + Value.toString();
                }
		    }
		    /**********************************************************************
			    * TranslateRedirection( Value )
			    *
			    * Provides default values for web chaining redirection options
			    *
			    *********************************************************************/
			function TranslateRedirection( Value )
			{
				switch( Value )
				{
					case 0: return "HTTP";
					case 1: return "FTP";
					case 2: return "HTTPS";
					default: return "unknown; " + Value.toString();
				}
			}
			
		    /**********************************************************************
			    * TranslateAffinityType( Value )
			    *
			    * Provides default values for web farm affinity types
			    *
			    *********************************************************************/
			function TranslateAffinityType( Value )
			{
				switch( Value )
				{
					case 1: return "IP-based";
					default: return "Session-based";
				}
			}
		    /**********************************************************************
			    * TranslateNetStatus( Value )
			    *
			    * Provides interpretation of NetConnectionStatus values
			    *
			    *********************************************************************/
			function TranslateNetStatus( Value )
			{
				switch( parseInt( Value ) )
				{
                    case 1: return "Connecting";
                    case 2: return "Connected";
                    case 3: return "Disconnecting";
                    case 4: return "Hardware not present";
                    case 5: return "Hardware disabled";
                    case 6: return "Hardware malfunction";
                    case 7: return "Media disconnected";
                    case 8: return "Authenticating";
                    case 9: return "Authentication succeeded";
                    case 10: return "Authentication failed";
                    case 11: return "Invalid address";
                    case 12: return "Credentials required";
					default: return "Disconnected";
				}
			}
		    /**********************************************************************
			    * ToHex( value )
			    *
			    * Translates a negative decimal value into its hex equivalent
			    *
			    *********************************************************************/
		    function ToHex( value )
		    {
			    value = ( value < 0 )? value + 0x100000000: value;
			    return "0x" + value.toString( 16 ).toUpperCase() + " (" + value.toString() + ")";
		    }

		    /**********************************************************************
			    * HighlightEvtLogType( LogType )
			    *
			    * Adds color to the event log type text - double logic to accommodate 
			    * older isainfo data
			    *
			    *********************************************************************/
		    function HighlightEvtLogType( LogType )
		    {
			    var Color = "red";
			    if( isNaN( LogType ) && LogType.toLowerCase() == "warning" )
			    {
				    Color = "yellow";
			    }
			    else
			    {
				    switch( LogType )
				    {
					    case 1:
						    LogType = "Error";
						    break;
					    case 2:
						    Color = "yellow";
						    LogType = "Warning";
						    break;
					    case 5:
						    LogType = "Audit Failure";
				    }
			    }
			    return "<td style=\"color: " + Color + "\" colspan=\"2\">" + LogType + "</td>";
		    }

		    /**********************************************************************
			    * ConvertWmiDateTime( UtcDate )
			    *
			    * Translates an SWbemDateTime value to human-readable form
			    * This is an inherent function on WinXp and W2k3 only.
			    *
			    *********************************************************************/
		    function ConvertWmiDateTime( UtcDate )
		    {
			    //WMI date/time is formatted thus:
			    //20040305000824.000000-480, which breaks down to
			    //yyyymmddhhmmss.xxxxxx-+offset
			    //"offset" is the number of minutes from GMT
    			var szDate = UtcDate.substr( 4, 2 )	+		// month
						    "/" + UtcDate.substr( 6, 2 ) +	// day
						    "/" + UtcDate.substr( 0, 4 ) +	// year
						    " " + UtcDate.substr( 8, 2 ) +	// hours
						    ":" + UtcDate.substr( 10, 2 ) +	// minutes
						    ":" + UtcDate.substr( 12, 2 )	// seconds
			    var NewDate = new Date( szDate );
	            return NewDate.toLocaleDateString() + " " + NewDate.toLocaleTimeString();
		    } 

		    ]]>
	    </msxsl:script>
            <!--This is the start of the isa2k4 information rendering plant. All templates are listed alphabetically.-->
            <xsl:output method="html" indent="yes" omit-xml-declaration="yes" />
            <!-- formatting variables -->
            <xsl:variable name="tabOver">&#160;&#160;&#160;&#160;</xsl:variable>
            <xsl:variable name="indent">&#160;&#160;</xsl:variable>
            <xsl:variable name="inline">display:inline</xsl:variable>
            <xsl:variable name="none">display:none</xsl:variable>
            <!--****************************************************************************************** 
		    This template constitutes the "main" function for the XSL transform 
		    It creates the "left" side table and populates it according to the XML 
		    passed in
		    ******************************************************************************************-->
            <!--
                <xsl:template match="*">
                    <table id="left" style="display: inline" cellspacing="0">
                        <tr>
                            <td colspan="2">
                                <xsl:apply-templates select="." /></td></tr>
                    </table>
                </xsl:template>
            -->
            <!--****************************************************************************************** 
		    This template creates a rowsets and child tables representing FpcAccessProperties of an access rule
		    It is called by the PolicyRule template
		    It uses an external script function "TranslateFpcProtocolSelectionType" to reverse the ProtocolsUsed enumeration
		    If calls the fpc4:Ref template for each occurence of that element and sorts them by the StorageName attribute
		    ******************************************************************************************-->

<!--*** SILVERSANDS UPDATE START -->
            <xsl:template match="fpc4:AccessProperties">
                <xsl:apply-templates select="fpc4:SelectionIPs">
                    <xsl:sort select="@StorageName" />
                </xsl:apply-templates>
                
                "|"<xsl:value-of select="user:TranslateFpcProtocolSelectionType(number(fpc4:ProtocolSelectionMethod))" />
                
                <xsl:apply-templates select="fpc4:Refs[@StorageName = 'ProtocolsUsed']/fpc4:Ref">
                    <xsl:with-param name="showClass">false</xsl:with-param>
                </xsl:apply-templates>

                "|"<xsl:apply-templates select="fpc4:Refs[@StorageName = 'UserSets']/fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                    <xsl:sort select="@StorageName" />
                </xsl:apply-templates>

                "|"<xsl:apply-templates select="fpc4:Refs[@StorageName = 'DestinationDomainNameSets']/fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                    <xsl:sort select="@StorageName" />
                </xsl:apply-templates>

<!--                
                <xsl:if test="fpc4:RedirectURL">
                    Redirect URL:<xsl:value-of select="fpc4:RedirectURL" />
                </xsl:if>
-->                
                <!-- <xsl:apply-templates select="fpc4:VendorParametersSets" /> -->
            </xsl:template>
<!--*** SILVERSANDS UPDATE END -->
            
            <xsl:template match="fpc4:Account">
                <xsl:param name="NoBar" />
                <xsl:if test="string($NoBar)!='true'">
                    <tr>
                        <td colspan="2">
                            <hr /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;&#160;<xsl:value-of select="@StorageName" /></td><td width="65%">(<xsl:value-of
                        select="fpc4:AccountSid" />)</td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Status</td><td width="65%"><xsl:value-of select="user:TranslateFpcIncludeStatus(number(fpc4:AccountStatus))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcAccountType(number(fpc4:AccountType))" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Accounts">
                <xsl:apply-templates select="fpc4:Account">
                    <xsl:sort select="fpc4:Name" />
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates a rowsets and child tables representing an individual FpcAddressRange
		    It is called by the fpc4:AddressRanges template
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AddressRange">
                <tr>
                    <td width="1%" /><td><tr><td width="30%"><i><xsl:value-of select="fpc4:Name" /></i></td><td
                        width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td width="30%">&#160;&#160;Range</td><td
                            width="65%"><xsl:value-of select="fpc4:IPFrom" /> - <xsl:value-of select="fpc4:IPTo" /></td></tr></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template proceses the AddressRanges collection
		    ******************************************************************************************-->
            <xsl:template name="fpc4:AddressRanges">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_AddressRanges')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Address Ranges');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td />
                    <td onclick="SetSelected(this);">&#160;Address Ranges (<xsl:value-of select="count(fpc4:AddressRange)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:AddressRange">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcAdminSecurity collection
		    It is called by the fpc4:Array template
		    It calls the fpc4:Alert template for each occurence of that element and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AdminSecurity">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_AdminSecurity')" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Admin Security');</xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', true );')" />
                        </xsl:attribute>
                    </xsl:element> Admin Security
		    </td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:DelegatedAdmins" /><xsl:apply-templates select="fpc4:SecurityRoles" /><xsl:apply-templates
                                select="fpc4:VendorParametersSets" /></table></td>
                </xsl:element>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcAlert object
		    It is called by the fpc4:Alerts template
		    It calls the fpc4:AlertActions template 
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Alert">
                <xsl:param name="arrayName" />
                <xsl:variable name="itemName" select="fpc4:Name" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Alert_', position())" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name)" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $rowName)" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Alert "<xsl:value-of select="$itemName" />"');<xsl:value-of
                        select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );">
                        <xsl:value-of select="$itemName" /><xsl:element name="table"><xsl:attribute name="id"><xsl:value-of
                            select="$tblName" />
                        </xsl:attribute>
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <tr>
                                <td width="30%">Additional Key</td><td width="65%"><xsl:value-of select="number(fpc4:AdditionalKey)" /></td></tr>
                            <tr>
                                <td width="30%">Category</td><td width="65%"><xsl:value-of select="user:TranslateFpcAlertCategory(number(fpc4:AlertCategory))" /></td></tr>
                            <tr>
                                <td width="30%">Components</td><td width="65%"><xsl:value-of select="user:TranslateFpcComponents(number(fpc4:Components))" /></td></tr>
                            <tr>
                                <td width="30%">Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                            <tr>
                                <td width="30%">Enabled</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:Enabled))" /></td></tr>
                            <tr>
                                <td width="30%">Events Before Raise</td><td width="65%"><xsl:value-of select="user:TranslateEventsCount(number(fpc4:EventsBeforeRaise))" /></td></tr>
                            <tr>
                                <td width="30%">Minimum Events per Second</td><td width="65%"><xsl:value-of select="user:TranslateEventsCount(number(fpc4:MinEventsPerSecond))" /></td></tr>
                            <tr>
                                <td width="30%">Minutes Before Re-raise</td><td width="65%"><xsl:value-of select="user:TranslateMinsBeforeReRaise(number(fpc4:MinutesBeforeReRaise))" /></td></tr>
                            <tr>
                                <td width="30%">Server Name</td><td width="65%"><xsl:value-of select="fpc4:ServerName" /></td></tr>
                            <tr>
                                <td width="30%">Severity</td><td width="65%"><xsl:value-of select="user:TranslateFpcAlertSeverity(number(fpc4:AlertSeverity))" /></td></tr>
                            <xsl:apply-templates select="fpc4:AlertActions">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:Credentials">
                                <xsl:sort select="fpc4:UserName" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:VendorParametersSets" />
                        </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates a rowset representing an FpcAlertAction object
		    It is called by the fpc4:AlertActions template
		    It calls the external IsEnabled function to render a boolean as text
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AlertAction">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_AlertAction_', position())" />
                </xsl:variable>
                <tr>
                    <td width="30%">&#160;<xsl:value-of select="fpc4:Name" /></td><td width="65%"><xsl:value-of
                        select="user:IsEnabled(number(fpc4:Enabled))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Parameters</td><td width="65%"><xsl:value-of select="fpc4:Parameters" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcAlertActionType(number(fpc4:Type))" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcAlertActions collection
		    It is called by the fpc4:Alert template
		    It calls the fpc4:AlertAction template for each occurence of that element and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AlertActions">
                <xsl:param name="arrayName" />
                <xsl:variable name="alertCount">
                    <xsl:value-of select="count(fpc4:AlertAction)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_AlertActions')" />
                </xsl:variable>
                <tr>
                    <td colspan="2">Alert Actions (<xsl:value-of select="$alertCount" />)
			    <table cellspacing="0"><xsl:apply-templates select="fpc4:AlertAction"><xsl:sort select="fpc4:Name" />
                    <xsl:with-param name="arrayName" select="$arrayName" />
                </xsl:apply-templates></table><xsl:apply-templates select="fpc4:VendorParametersSets" /></td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcAlerts collection
		    It is called by the fpc4:Array template
		    It calls the fpc4:Alert template for each occurence of that element and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Alerts">
                <xsl:param name="arrayName" />
                <xsl:variable name="alertCount">
                    <xsl:value-of select="count(fpc4:Alert)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Alerts')" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Alerts');</xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', true );')" />
                        </xsl:attribute>
                    </xsl:element> Alerts (<xsl:value-of select="$alertCount" />)
		    </td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:Alert">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates a rowset representing an FpcAppliedSSLCertificate object
		    It is called by the fpc4:AppliedSSLCertificates template
		    It calls the external IsEnabled function to render a boolean as text
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AppliedSSLCertificate">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_AppliedSSLCertificate_', position())" />
                </xsl:variable>
                <tr>
                    <td width="30%">&#160;Certificate Hash</td><td width="65%"><xsl:value-of select="fpc4:SSLCertificateHash" /></td></tr>
                <xsl:apply-templates select="fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcAppliedSSLCertificates collection
		    It is called by fpc4:Weblistener template
		    It calls the fpc4:AppliedSSLCertificate template for each occurence of that element and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AppliedSSLCertificates">
                <xsl:param name="arrayName" />
                <xsl:variable name="SslContext">
                    <xsl:choose>
                    <xsl:when test="string(@StorageName)='AppliedSSLCertificates'">Server Certificates</xsl:when>
                    <xsl:when test="string(@StorageName)='SSLClientCertificatesTrustListRoot'">Trusted Root Certificates</xsl:when>
                    <xsl:when test="string(@StorageName)='SSLClientCertificatesTrustListIntermediate'">Trusted Intermediate Certificates</xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_', $SslContext)" />
                </xsl:variable>
                <tr>
                    <td colspan="2"><xsl:value-of select="$SslContext"/> (<xsl:value-of select="count(fpc4:AppliedSSLCertificate)" />)
			    <table cellspacing="0">
			        <xsl:apply-templates select="fpc4:AppliedSSLCertificate">
			            <xsl:with-param name="arrayName" select="$arrayName" />
                    </xsl:apply-templates>
                </table>
                <xsl:apply-templates select="fpc4:VendorParametersSets" /></td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcArray object
		    It is called by the fpc4:Arrays template
		    It uses the external script function FixGUID so that the array GUID can be used as 
			    a unique table identifier in the HTML
		    It calls several templates for each occurence of that element and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Array">
                <xsl:param name="arrayCount" />
                <xsl:variable name="comp" select="fpc4:Components" />
                <xsl:variable name="itemName" select="fpc4:Name" />
                <xsl:variable name="arrayName">
                    <xsl:value-of select="user:FixGUID(substring(@StorageName,2,36))" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $arrayName)" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="align">left</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Array "<xsl:value-of select="$itemName" />"');<xsl:value-of
                        select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="table">
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="cellspacing">0</xsl:attribute>
                        <tr>
                            <td colspan="2">
                                <hr /></td></tr>
                        <xsl:apply-templates select="fpc4:Ref">
                            <xsl:with-param name="showClass">true</xsl:with-param>
                        </xsl:apply-templates>
                        <tr>
                            <td width="30%">Components</td><td width="65%"><xsl:value-of select="user:TranslateFpcComponents(number($comp))" /></td></tr>
                        <xsl:apply-templates select="fpc4:ConfigurationStorageServerConnection">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                        <tr>
                            <td colspan="2">
                                <hr /></td></tr>
                        <tr>
                            <td width="30%">Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                        <tr>
                            <td width="30%">DNS Name</td><td width="65%"><xsl:value-of select="fpc4:DNSName" /></td></tr>
                        <tr>
                            <td width="30%">Hidden</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:Hidden)))" /></td></tr>
                        <tr>
                            <td width="30%">Mail Code Page</td><td width="65%"><xsl:value-of select="fpc4:MailCodePage" /></td></tr>
                        <xsl:if test="string(fpc4:ConfigurationStorageServerConnection)!=''">
                            <xsl:variable name="UseMachineAcct" select="user:DefaultTrue(number(fpc4:UseComputerAccountForIntraArrayAuthentication))"/>
                            <tr>
                                <td width="30%">Use Computer Acct For Intra-Array Auth</td><td width="65%"><xsl:value-of
                                    select="$UseMachineAcct" /></td></tr>
                            <xsl:if test="$UseMachineAcct!='true'"><tr>
                                <td width="30%">Intra Array Credentials</td></tr></xsl:if>
                            <xsl:apply-templates select="fpc4:Credentials" />
                        </xsl:if>
                        <xsl:apply-templates select="fpc4:Policies" />
                        <xsl:apply-templates select="fpc4:PolicyAssignment" />
                        <tr>
                            <td width="30%">Storage Name</td><td width="65%"><xsl:value-of select="@StorageName" /></td></tr>
                        <tr>
                            <td width="30%">Storage Type</td><td width="65%"><xsl:value-of select="@StorageType" /></td></tr>
                        <xsl:if test="fpc4:Type">
                            <tr>
                                <td width="30%">Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcArrayType(number(fpc4:Type))" /></td></tr>
                        </xsl:if>
                        <xsl:apply-templates select="fpc4:Ref" />
                    </xsl:element><xsl:element name="button"><xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(row_', $arrayName, ', true);')" />
                        </xsl:attribute>
                        <xsl:if test="number($arrayCount)=1">
                            <xsl:attribute name="disabled">true</xsl:attribute>
                        </xsl:if>
                    </xsl:element>&#160;<xsl:value-of select="fpc4:Name" /></td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="concat('row_', $arrayName)" />
                    </xsl:attribute>
                    <xsl:attribute name="style">
                        <xsl:choose>
                            <xsl:when test="$arrayCount = 1">display:inline</xsl:when>
                            <xsl:otherwise>display:none</xsl:otherwise>
                        </xsl:choose>
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:AdminSecurity">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:Alerts">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:ArrayPolicy">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:Cache">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:ClientConfigSettings">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:ConnectivityVerifiers">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:call-template name="CustomSettings">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:call-template>
                            <xsl:apply-templates select="fpc4:Extensions">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:Logs">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:NetConfig">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:Reports">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:RuleElements">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:Servers">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcArray object
		    It is called by the fpc4:Array template
		    It calls:
			    fpc4:WebProxy, fpc4:ProxyWSP, fpc4:AttackDetection and fpc4:ConnectionLimitPolicy
			    to generate a right-side display for the array context
			    fpc4:PolicyRules to generate a rules collection
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ArrayPolicy">
                <xsl:param name="arrayName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $arrayName, '_Policies')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $rowName)" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Firewall Policy');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );"><xsl:element name="table">
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <tr>
                            <td colspan="2">
                                <hr /></td></tr>
                        <tr>
                            <td width="30%">Name</td><td width="65%"><xsl:value-of select="fpc4:Name" /></td></tr>
                        <tr>
                            <td width="30%">Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                        <xsl:apply-templates select="fpc4:AttackDetection">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:ConnectionLimitPolicy">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:LowLevelSettings">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:ProxyWSP">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:WebProxy">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                    </xsl:element><xsl:element name="button"><xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $rowName, ', true );')" />
                        </xsl:attribute>
                    </xsl:element>&#160;Firewall Policy</td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:PolicyRules">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets and child tables representing an FpcArrays collection
		    It is called by the "*" template
		    It generates a right-side table containing root-level information from the XML
		    It calls the fpc4:Array template for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Arrays">
                <xsl:variable name="arrayCount">
                    <xsl:value-of select="count(fpc4:Array)" />
                </xsl:variable>
                <xsl:variable name="rowName">row_Arrays</xsl:variable>
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Arrays');</xsl:attribute>
                    <xsl:attribute name="align">left</xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this)" id="Arrays">
                        <B> Arrays</B><xsl:if test="$arrayCount != 1">(<xsl:value-of select="$arrayCount" />)</xsl:if></td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <table>
                            <xsl:apply-templates select="fpc4:Array">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayCount">
                                    <xsl:value-of select="$arrayCount" />
                                </xsl:with-param>
                            </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an AttackDetection property of an fpcArray object
		    It is called by the fpc4:Array template
		    It generates a right-side table containing rowsets representing properties of this obkect
		    It calls the external IsEnabled function to render boolean values as text
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AttackDetection">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">&#160;<b>Intrustion Detection</b></td><td width="65%"><xsl:value-of
                        select="user:IsEnabled(number(fpc4:IntrusionDetectionEnabled))" /></td></tr>
                <xsl:if test="fpc4:IntrusionDetectionEnabled != 0">
                    <tr>
                        <td colspan="2">
                            <table cellspacing="0">
                                <tr>
                                    <td width="1%" /><td><table cellspacing="0" style="display: inline"><xsl:apply-templates
                                        select="fpc4:IPOptionTypeClass" /><tr><td width="30%">Intrusion Detection Logging</td><td
                                            width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:IntrusionDetectionLoggingEnabled)))" /></td></tr><tr><td
                                                width="30%">IP Fragment Filtering</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:IPFragmentsFilteringEnabled)))" /></td></tr><tr><td
                                                    width="30%">IP Half-Scan Filtering</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:IPHalfScanDetectionEnabled)))" /></td></tr><tr><td
                                                        width="30%">IP Routing</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:IPRoutingEnabled)))" /></td></tr><tr><td
                                                            width="30%">Land Attack Detection</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:LandAttackDetectionEnabled)))" /></td></tr><tr><td
                                                                width="30%">Ping of Death Detection</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:PingOfDeathDetectionEnabled)))" /></td></tr><tr><td
                                                                    width="30%">Port Scan All Ports Threshold</td><td width="65%"><xsl:value-of select="user:TranslateAllPortsThreshold(number(fpc4:PortScanDetectionAllPortsThreshold))" /></td></tr><tr><td
                                                                        width="30%">Port Scan Distinct Ports Threshold</td><td width="65%"><xsl:value-of
                                                                            select="user:TranslateDistinctPortsThreshold(number(fpc4:PortScanDetectionDistinctPortsThreshold))" /></td></tr><tr><td
                                                                                width="30%">UDP Bomb Detection</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:UdpBombDetectionEnabled)))" /></td></tr><tr><td
                                                                                    width="30%">Win Out-of-band Detection</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:WinOutOfBandDetectionEnabled)))" /></td></tr></table></td></tr></table></td></tr>
                </xsl:if>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an AuthenticationScheme property 
		    It is called by the fpc4:AuthenticationSchemes template
		    It generates a right-side table containing rowsets representing properties of this obkect
		    It calls the external TranslateFpcAuthenticationSchemeProvides function to render the Provides enumeration as text
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AuthenticationScheme">
                <xsl:param name="arrayName" />
                <xsl:param name="PartOf" />
                <xsl:param name="Root" />
                <xsl:if test="string($PartOf)!='true'">
                    <tr>
                        <td colspan="2">
                            <hr /></td></tr>
                </xsl:if>
                <tr>
                    <xsl:element name="td">
                        <xsl:attribute name="width">35%</xsl:attribute>
                        <xsl:attribute name="style">
                            <xsl:choose>
                                <xsl:when test="string($PartOf)='true'">font-weight:normal</xsl:when>
                                <xsl:otherwise>font-weight:bold</xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
                        <xsl:value-of select="fpc4:Name" />
                    </xsl:element><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="concat( local-name(), $arrayName)" />
                            </xsl:attribute>
                            <xsl:attribute name="style">display:
				    <xsl:choose>
                        <xsl:when test="string($PartOf) = 'true'">none</xsl:when>
                        <xsl:otherwise>inline</xsl:otherwise>
                    </xsl:choose></xsl:attribute>
                            <tr>
                                <td width="30%">&#160;&#160;Predefined</td><td width="65%"><xsl:value-of select="boolean(fpc4:Predefined)" /></td></tr>
                            <tr>
                                <td width="30%">&#160;&#160;Provides</td><td width="65%"><xsl:value-of select="user:TranslateFpcAuthenticationSchemeProvides(number(fpc4:Provides))" /></td></tr>
                            <tr>
                                <td width="30%">&#160;&#160;Services</td><td width="65%"><xsl:value-of select="user:TranslateFpcServiceType(number(fpc4:Provides))" /></td></tr>
                            <tr>
                                <td width="30%">&#160;&#160;Vendor</td><td width="65%"><xsl:value-of select="fpc4:Vendor" /></td></tr>
                            <tr>
                                <td width="30%">&#160;&#160;Version</td><td width="65%"><xsl:value-of select="fpc4:Version" /></td></tr>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an AuthenticationSchemes collection
		    It is called by the fpc4:RuleElements template
		    It calls the fpc4:AuthenticationScheme for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:AuthenticationSchemes">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_AuthenticationSchemes')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Authentication Schemes');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Authentication Schemes (<xsl:value-of select="count(fpc4:AuthenticationScheme)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:AuthenticationScheme">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:BackupRoute | fpc4:PrimaryRoute">
                <xsl:variable name="Primary">
                    <xsl:value-of select="boolean(substring(local-name(),1,3)='Pri')" />
                </xsl:variable>
                <xsl:variable name="RouteType">
                    <xsl:choose>
                        <xsl:when test="string($Primary)='true'">
                            <xsl:value-of select="user:TranslateFpcPrimaryRouteType(number(fpc4:RouteType))" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="user:TranslateFpcPrimaryRouteType(number(fpc4:BackupRouteType))" />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <tr>
                    <td colspan="2">
                        <u><xsl:if test="string($Primary)='true'">Primary</xsl:if><xsl:if test="string($Primary)='false'">Backup</xsl:if>
			    &#160;Route </u></td></tr>
                <xsl:if test="string($Primary)='true'">
                    <tr>
                        <td width="30%">&#160;&#160;Auto-dial</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:EnableAutoDial)))" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;&#160;Routing Type</td><td width="65%"><xsl:value-of select="$RouteType" /></td></tr>
                <xsl:if test="string($RouteType)!='Direct'">
                    <tr>
                        <td width="30%">&#160;&#160;Authentication</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:AuthenticationEnabled)))" /></td></tr>
                    <xsl:if test="number(fpc4:AuthenticationEnabled)=1">
                        <tr>
                            <td width="30%">&#160;&#160;Authentication Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcAuthType(number(fpc4:AuthenticationType))" /></td></tr>
                        <tr>
                            <td width="30%">&#160;&#160;Credentials</td><td width="65%"><xsl:value-of select="fpc4:Credentials/fpc4:UserName" /></td></tr>
                    </xsl:if>
                    <tr>
                        <td width="30%">&#160;&#160;Automatic Polling</td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:AutomaticPollConfig))" /></td></tr>
                    <xsl:if test="boolean(fpc4:AutomaticPollConfig)">
                        <tr>
                            <td width="30%">&#160;&#160;Auto Polling URL</td><td width="65%"><xsl:value-of select="fpc4:PollAtURL" /></td></tr>
                    </xsl:if>
                    <xsl:if test="string($Primary) = 'true'">
                        <tr>
                            <td width="30%">&#160;&#160;Upstream Proxy</td><td width="65%"><xsl:value-of select="fpc4:RouteServerName" />; HTTP:<xsl:value-of
                                select="user:TranslateRoutingPort('route',number(fpc4:RouteHostPort))" />,&#160;SSL:
				    <xsl:value-of select="user:TranslateRoutingPort('routessl',number(fpc4:RouteHostSSLPort))" /></td></tr>
                    </xsl:if>
                    <tr>
                        <td width="30%">&#160;&#160;Hosted Site</td><td width="65%"><xsl:value-of select="fpc4:RedirectHost" />HTTP:<xsl:value-of
                            select="user:TranslateRoutingPort('host',number(fpc4:RedirectHostPort))" />,&#160;SSL:
				    <xsl:value-of select="user:TranslateRoutingPort('hostssl',number(fpc4:RedirectHostSSLPort))" /></td></tr>
                </xsl:if>
                <xsl:apply-templates select="fpc4:BackupRoute" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an Array Cache object
		    It is called by the fpc4:Array template
		    It calls the fpc4:ProxyCacheConfiguration and fpc4:Prefetcher templates
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Cache">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Cache')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_',$Name)" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(',$tblName,');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Cache');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', true );')" />
                        </xsl:attribute>
                    </xsl:element> Cache
				    <xsl:element name="table"><xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:apply-templates select="fpc4:ProxyCacheConfiguration">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                    </xsl:element></td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:ProxyCacheConfiguration/fpc4:ProxyCacheRules">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:Prefetcher"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpcClientConfigSettings collection
		    It is called by the fpc4:Array template
		    It calls the fpc4:ClientSettingsSection template
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ClientConfigSettings">
                <xsl:param name="arrayName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $arrayName, '_ClientConfigSettings')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Firewall Client Application Settings');
				    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );"><button class="toggle" />&#160;Firewall Client
				    <xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <tr>
                            <td width="30%">Support Old FW Clients</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:SupportOldFirewallClients)))" /></td></tr>
                        <tr>
                            <td width="30%">Control Channel Encryption</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:SupportOldFirewallClients)))" /></td></tr>
                        <tr>
                            <td colspan="2"><hr />Application Settings&#160;<table><xsl:apply-templates select="fpc4:ClientSettingsSection"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td></tr>
                    </xsl:element></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpcClientSettingsSection object
		    It is called by the fpc4:ClientConfigSettings template
		    It calls the external TranslateAppSettings function to render the BlobData as rowsets
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ClientSettingsSection">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /><b><xsl:value-of select="fpc4:Name" /></b><table cellspacing="0"><xsl:value-of
                            select="user:TranslateAppSettings(string(fpc4:BlobData))" disable-output-escaping="yes" /></table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:CodePages">
<!--                
                <xsl:for-each select=".">
                    <
                </xsl:for-each>
                <xsl:apply-templates select="Fpc4:VendorParametersSets" />
-->
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:Computer object
		    It is called by the fpc4:Computers template
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Computer">
                <xsl:param name="PartOf" />
                <xsl:if test="string($PartOf)='false'">
                    <tr>
                        <td colspan="2">
                            <hr /></td></tr>
                </xsl:if>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0" style="display: inline">
                            <tr>
                                <td width="30%">
                                    <xsl:choose>
                                        <xsl:when test="string($PartOf)='true'">&#160;&#160;<i>
                                            <xsl:value-of select="fpc4:Name" /></i></xsl:when>
                                        <xsl:otherwise>
                                            <b>
                                                <xsl:value-of select="fpc4:Name" /></b>
                                        </xsl:otherwise>
                                    </xsl:choose></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                        width="30%">&#160;&#160;<xsl:if test="string($PartOf)='true'">&#160;&#160;</xsl:if>IP Address</td><td
                                            width="65%"><xsl:value-of select="fpc4:IPAddress" /></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:Computers collection
		    It is called by the fpc4:RuleElements template
		    It calls the fpc4:Computer template for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Computers">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Computers')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Computers');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Computers (<xsl:value-of select="count(fpc4:Computer)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:Computer">
                                <xsl:with-param name="PartOf">false</xsl:with-param>
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ComputerSet collection
		    It is called by the fpc4:ComputerSets template
		    It calls the fpc4:AddressRage template for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ComputerSet">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name" select="fpc4:Name" />
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0" style="display: inline"><tr><td width="30%"><b><xsl:value-of
                            select="$Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                width="30%">&#160;Predefined</td><td width="65%"><xsl:value-of select="boolean(fpc4:Predefined)" /></td></tr><xsl:if
                                    test="fpc4:AddressRanges"><tr><td colspan="2">&#160;Address Ranges
					    <table cellspacing="0" style="display: inline"><xsl:apply-templates select="fpc4:AddressRanges/fpc4:AddressRange"><xsl:sort
                            select="fpc4:Name" />
                            <xsl:with-param name="arrayName" select="concat($arrayName, '_', $Name)" />
                            <xsl:with-param name="tblDisplay" select="$inline" />
                        </xsl:apply-templates></table></td></tr>
                                </xsl:if><xsl:if test="fpc4:Computers"><tr><td colspan="2">&#160;Computers
					    <table cellspacing="0" style="display: inline"><tr><td width="1%" /><td><xsl:apply-templates
                            select="fpc4:Computers/fpc4:Computer"><xsl:with-param name="PartOf">true</xsl:with-param>
                            <xsl:sort select="fpc4:Name" />
                        </xsl:apply-templates></td></tr></table></td></tr>
                                </xsl:if><xsl:if test="fpc4:Subnets"><tr><td colspan="2">&#160;Subnets
					    <table cellspacing="0" style="display: inline"><tr><td width="1%" /><td><xsl:apply-templates
                            select="fpc4:Subnets/fpc4:Subnet"><xsl:with-param name="PartOf">true</xsl:with-param>
                            <xsl:sort select="fpc4:Name" />
                        </xsl:apply-templates></td></tr></table></td></tr>
                                </xsl:if></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ComputerSets collection
		    It is called by the fpc4:RuleElements template
		    It calls the fpc4:ComputerSet template for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ComputerSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ComputerSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Computer Sets');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Computer Sets (<xsl:value-of select="count(fpc4:ComputerSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:ComputerSet">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ConfigurationStorageServerConnection object
		    It is called by the fpc4:Array template
		    ******************************************************************************************-->
            <!-- Bug this -->
            <xsl:template match="fpc4:ConfigurationStorageServerConnection">
                <tr>
                    <td colspan="2">
                        <hr /><i>CSS Configuration</i></td></tr>
                <tr>
                    <td width="30%">&#160;CSS Type</td><td width="65%"><xsl:value-of select="user:TranslateCssConnType(user:DefaultZero(number(fpc4:ConfigurationStorageServerConnectionType)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Change Poll Rate</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('ChangePollRate',number(fpc4:ChangePollRate))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Primary CSS</td><td width="65%"><xsl:value-of select="fpc4:PrimaryConfigurationStorageServer" /></td></tr>
                <tr>
                    <td width="30%">&#160;Alternate CSS</td><td width="65%"><xsl:value-of select="fpc4:AlternateConfigurationStorageServer" /></td></tr>
                <tr>
                    <td width="30%">&#160;Fallback Delay</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('FallbackDelay',number(fpc4:FallbackDelay))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Primary Testing Delay</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('PrimaryTestingDelay',number(fpc4:PrimaryTestingDelay))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Primary Stabilization Delay</td><td width="65%"><xsl:value-of
                        select="user:TranslateCssConnection('PrimaryTestingDelay',number(fpc4:PrimaryStabilizationDelay))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Quiet Poll Rate</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('QuietPollRate',number(fpc4:QuietPollRate))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Reconnect Poll Rate</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('ReconnectPollRate',number(fpc4:ReconnectPollRate))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Error Recovery Poll Rate</td><td width="65%"><xsl:value-of
                        select="user:TranslateCssConnection('ErrorRecoveryPollRate',number(fpc4:ErrorRecoveryPollRate))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Quiet Threshold</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('QuietThreshold',number(fpc4:QuietThreshold))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Noise Threshold</td><td width="65%"><xsl:value-of select="user:TranslateCssConnection('NoiseThreshold',number(fpc4:NoiseThreshold))" /></td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ConnectionLimit object
		    It is called by the fpc4:ConnectionLimitPolicy template
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ConnectionLimit">
                <tr><td colspan="2"><i><xsl:value-of select="@StorageName" /></i></td></tr>
                <tr><td width="30%">&#160;TCP Limits</td><td width="65%"><xsl:value-of select="user:TranslateProtocolLimits(number(fpc4:TcpLimit))" /> Conn/Second</td></tr>
                <tr><td width="30%">&#160;UDP Limits</td><td width="65%"><xsl:value-of select="user:TranslateProtocolLimits(number(fpc4:UdpLimit))" /> Conn/Second</td></tr>
                <tr><td width="30%">&#160;Other Protocol Limits</td><td width="65%"><xsl:value-of select="user:TranslateProtocolLimits(number(fpc4:OtherLimit))" /> Conn/Second</td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ConnectionLimitPolicy object
		    It is called by the fpc4:ArrayPolicy template
		    It calls the fpc4:ConnectionLimit template for each occurence
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ConnectionLimitPolicy">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">&#160;<b>Connection Limits</b></td><td width="65%"><xsl:value-of
                        select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" /></td></tr>
                <xsl:if test="number(fpc4:Enabled) != 0">
                    <tr>
                        <td width="30%">&#160;Max Rules Per Second</td><td width="65%"><xsl:value-of select="user:TranslateRulesPerSecond(number(fpc4:RulePerSecondLimit))"></xsl:value-of></td></tr>
                    <tr>
                        <td colspan="2">&#160;Applies to</td></tr>
                    <xsl:for-each select="fpc4:Refs">
                        <xsl:sort select="@StorageName" />
                        <xsl:apply-templates select="fpc4:Ref">
                            <xsl:with-param name="showClass">true</xsl:with-param>
                            <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                        </xsl:apply-templates>
                    </xsl:for-each>
                    <tr>
                        <td colspan="2">
                            <table cellspacing="0" style="display: inline">
                                <xsl:apply-templates select="fpc4:ConnectionLimit" /></table></td></tr>
                    <xsl:apply-templates select="fpc4:VendorParametersSets" />
                </xsl:if>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ConnectivityVerifier object
		    It is called by the fpc4:ConnectivityVerifiers template
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ConnectivityVerifier">
                <xsl:param name="farm" />
                <xsl:choose>
                    <xsl:when test="$farm">
                        <tr><td width="30%">Connectivity Verifier</td><td width="65%"><xsl:value-of select="fpc4:Name" /></td></tr>
                        <tr><td width="30%">&#160;Enabled</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" /></td></tr>
                    </xsl:when>
                    <xsl:otherwise>
                        <tr><td colspan="2"><hr /></td></tr>
                        <tr><td width="30%"><b><xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" /></td></tr>
                    </xsl:otherwise>
                </xsl:choose>
                <tr>
                    <td width="30%">&#160;Alerts</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:AlertEnabled)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:AlertEnabled)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Group Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcConnectivityGroupType(number(fpc4:GroupType))" /></td></tr>
                <xsl:if test="fpc4:RequestType">
                    <tr>
                        <td width="30%">&#160;Request Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcRequestType(number(fpc4:RequestType))" /><xsl:if
                            test="number(fpc4:RequestType) = 2">&#160;<xsl:value-of select="fpc4:TCPPort" /></xsl:if></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Server Address</td><td width="65%"><xsl:value-of select="fpc4:ServerAddress" /></td></tr>
                <tr>
                    <td width="30%">&#160;Timeout</td><td width="65%"><xsl:value-of select="user:ConnVerifierTimeout(number(fpc4:Threshold))" /> mS</td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:ConnectivityVerifiers collection
		    It is called by the fpc4:Array template
		    It calls the fpc4:ConnectionLimit template for each occurence
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ConnectivityVerifiers">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ConnectivityVerifiers')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Connectivity Verifiers');<xsl:value-of
                        select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><button class="toggle" />&#160;Connectivity Verifiers (<xsl:value-of
                        select="count(fpc4:ConnectivityVerifier)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td width="30%">
                                    <b>Refresh Rate</b></td><td width="65%"><xsl:value-of select="fpc4:RefreshRate" /> Seconds</td></tr>
                            <xsl:apply-templates select="fpc4:ConnectivityVerifier">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets containing
		    It is called by the fpc4:Array template
		    It calls the fpc4:ConnectionLimit template for each occurence
		    ******************************************************************************************-->
            <xsl:template match="fpc4:ContentTypeSet">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <tr>
                                <td colspan="2">
                                    <table cellspacing="0" style="display: inline">
                                        <tr>
                                            <td width="30%">&#160;<b>
                                                <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                                    colspan="2"><xsl:value-of select="user:TranslateStringSet(fpc4:ContentStrings/fpc4:Str)"></xsl:value-of></td></tr></table></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ContentTypeSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ContentTypeSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Content Type Sets');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Content Type Sets (<xsl:value-of select="count(fpc4:ContentTypeSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:ContentTypeSet">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates a Credentials data set
		    It is called by multiple templates
		    It calls the fpc4:AuthenticationScheme for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Credentials">
                <tr>
                    <td width="30%">Name</td><td width="65%"><xsl:value-of select="fpc4:UserName" /></td></tr>
                <tr>
                    <td width="30%">Password</td><td width="65%"><xsl:value-of select="fpc4:Password" /></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:DailysumConfig">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">&#160;Directory Name</td><td width="65%"><xsl:value-of select="fpc4:DirectoryName" /></td></tr>
                <tr>
                    <td width="30%">&#160;Directory Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcFileDirectoryType(number(fpc4:DirectoryType))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Enabled</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:Enabled))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Max Old Daily Summaries</td><td width="65%"><xsl:value-of select="user:TranslateDailySumConfig('KeepOldDailySummaries',number(fpc4:KeepOldDailySummaries))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Max Old Monthly Summaries</td><td width="65%"><xsl:value-of
                        select="user:TranslateDailySumConfig('KeepOldMonthlySummaries',number(fpc4:KeepOldMonthlySummaries))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Start Time</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:DailySunStartHour))" />:
			    <xsl:value-of select="user:TranslateDailySumConfig('DailySumStartMinute',number(fpc4:DailySumStartMinute))" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an DelegatedAdmins collection
		    It is called by the fpc4:RuleElements template
		    It calls the fpc4:AuthenticationScheme for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:DelegatedAdmin">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <xsl:value-of select="fpc4:AccountResName" /></td><td width="65%"><xsl:value-of select="fpc4:AccountSid" /></td></tr>
                <tr>
                    <td width="30%">&#160;Admin Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcDelegatedAdminType(number(fpc4:DelegatedAdminType))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Predefined</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:Predefined)))" /></td></tr>
                <!-- bug this -->
                <tr>
                    <td width="30%">&#160;Security Role</td><td width="65%"><xsl:value-of select="fpc4:SecurityRoleName" /></td></tr>
                <tr>
                    <td width="30%">&#160;System</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:System)))" /></td></tr>
                <xsl:apply-templates select="fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                    <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                </xsl:apply-templates>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an DelegatedAdmins collection
		    It is called by the fpc4:RuleElements template
		    It calls the fpc4:AuthenticationScheme for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:DelegatedAdmins">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_DelegatedAdmins')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Delegated Admins');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Delegated Admins (<xsl:value-of select="count(fpc4:DelegatedAdmin)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:DelegatedAdmin">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:DialingConfig">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Dialing')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Dialing Configuration');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Dialing Configuration</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td colspan="2">
                                    <hr /><b><xsl:value-of select="fpc4:RasPhoneBookEntry" /></b></td></tr>
                            <tr>
                                <td width="30%">Auto-dial</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:EnableAutoDial)))" /></td></tr>
                            <xsl:if test="number(fpc4:EnableAutoDial)=1">
                                <xsl:apply-templates select="fpc4:Credentials" />
                                <tr>
                                    <td width="30%">Use Dial-up Default Gateway</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:DefaultGateway)))" /></td></tr>
                                <xsl:apply-templates select="fpc4:Ref">
                                    <xsl:with-param name="showClass">true</xsl:with-param>
                                    <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                                </xsl:apply-templates>
                            </xsl:if>
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:DomainMapping">
                <tr>
                    <td width="30%">Domain Name</td><td width="65%"><xsl:value-of select="fpc4:DomainName" /></td></tr>
                <tr>
                    <td width="30%">Mapped Domains</td><td width="65%"><xsl:value-of select="fpc4:MappedDomains" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:DomainMappings">
                <tr>
                    <td colspan="2"><hr />Domain Mappings</td></tr>
                <xsl:apply-templates select="fpc4:DomainMapping" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:DomainNameSet">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0" style="display: inline"><tr><td width="30%"><b><xsl:value-of
                            select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><xsl:for-each
                                select="fpc4:DomainNameStrings/fpc4:Str"><xsl:sort select="." />
                                <tr>
                                    <td width="30%" /><td width="65%"><xsl:value-of select="." /></td></tr>
                            </xsl:for-each></table></td></tr>
                <tr>
                    <td width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:Predefined)))" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:DomainNameSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_DomainNameSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Domain Name Sets');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Domain Name Sets (<xsl:value-of select="count(fpc4:DomainNameSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:DomainNameSet">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Enterprise">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2" onclick="ShowStatus('Enterprise');SetSelected(this);" id="Enterprise">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td></tr>
                <tr>
                    <td colspan="2">
                        <table>
                            <xsl:apply-templates select="fpc4:Extensions">
                                <xsl:with-param name="arrayName">Enterprise</xsl:with-param>
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:NetConfig"><xsl:with-param
                                name="arrayName">Enterprise</xsl:with-param>
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:Policies"><xsl:with-param
                                name="arrayName">Enterprise</xsl:with-param>
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:RuleElements"><xsl:with-param
                                name="arrayName">Enterprise</xsl:with-param>
                            </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:EventDefinition">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0" style="display: inline"><tr><td width="30%"><b><xsl:value-of
                            select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                width="30%">Additional Keys</td><td width="65%"><xsl:value-of select="fpc4:AdditionalKeys" /></td></tr><tr><td
                                    width="30%">Components</td><td width="65%"><xsl:value-of select="user:TranslateFpcComponents(number(fpc4:Components))" /></td></tr><tr><td
                                        width="30%">Min Event Per Second</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:MinEventsPerSecond))" /></td></tr><tr><td
                                            width="30%">Min Events Before Re-Raise</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:MinEventBeforeReRaise))" /></td></tr><tr><td
                                                width="30%">Minutes Before Re-raise</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:MinutesBeforeReRaise))" /></td></tr><tr><td
                                                    width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:Predefined))" /></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:EventDefinitions">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_EventDefinitions')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Event Definitions');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Event Definitions (<xsl:value-of select="count(fpc4:EventDefinition)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:EventDefinition">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Extensions">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Extensions')" />
                </xsl:variable>
                <tr onclick="ShowStatus('Extensions');">
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', true );')" />
                        </xsl:attribute>
                    </xsl:element> Extensions
		    </td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:ProxyPlugins">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                            <xsl:apply-templates select="fpc4:ISAPIFilters">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template name="CustomSettings">
                <xsl:param name="arrayName" />
                <xsl:variable name="HotFixData">{EF506E47-A862-4010-AEE5-D2A2A015FDDA}</xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Custom_Data')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Custom Settings');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><button class="toggle" />&#160;Custom Settings</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr><th colspan="2"><hr />Sustained Engineering Settings</th></tr>
                            <tr><td width="30%">Name</td><td width="60%">Value</td></tr>
                            <xsl:for-each select="fpc4:VendorParametersSets/fpc4:VendorParametersSet[@StorageName='{143F5698-103B-12D4-FF34-1F34767DEabc}']">
                                <xsl:value-of select="user:TranslateBlobData(string(fpc4:BlobData))" disable-output-escaping="yes" />
                            </xsl:for-each>
                            <tr><th colspan="2"><hr />Other Custom Settings</th></tr>
                            <tr><td width="30%">Name</td><td width="60%">Value</td></tr>
                            <xsl:for-each select="fpc4:VendorParametersSets/fpc4:VendorParametersSet[fpc4:Name!='{143F5698-103B-12D4-FF34-1F34767DEabc}']">
                                <xsl:value-of select="user:TranslateBlobData(string(fpc4:BlobData))" disable-output-escaping="yes" />
                            </xsl:for-each>
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:ExplicitLinkTranslationMapping">
                <tr><td width="35%">&#160;&#160;<xsl:value-of select="fpc4:OriginalUrl" /></td><td width="65%"><xsl:value-of select="fpc4:TranslatedUrl" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ExplicitLinkTranslationMappings">
                <tr><td colspan="2"><hr /><b>User-Created Global Link Translation Mappings (<xsl:value-of select="count(fpc4:ExplicitLinkTranslationMapping)" />)</b></td></tr>
                <xsl:apply-templates select="fpc4:ExplicitLinkTranslationMapping"/>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an fpc4:HTTPCompressionConfiguration object
		    It is called by the fpc4:ArrayPolicy template
		    It calls the fpc4:ConnectionLimit template for each occurence
		    ******************************************************************************************-->
            <xsl:template match="fpc4:HTTPCompressionConfiguration">
                <tr><td colspan="2"><hr /><b>Compression Settings</b></td></tr>
                <tr><td colspan="2">&#160;<i>Accept compression requests from</i></td></tr>
                <xsl:for-each select="fpc4:SelectionIPs[@StorageName='SourceSelectionIPs']/fpc4:Refs">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref">
                        <xsl:with-param name="showClass">true</xsl:with-param>
                        <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                    </xsl:apply-templates>
                </xsl:for-each>
                <tr><td colspan="2">&#160;<i>Accept compression responses from</i></td></tr>
                <xsl:for-each select="fpc4:SelectionIPs[@StorageName='DestinationSelectionIPs']/fpc4:Refs">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref">
                        <xsl:with-param name="showClass">true</xsl:with-param>
                        <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                    </xsl:apply-templates>
                </xsl:for-each>
                <tr><td colspan="2">&#160;<i>Apply compression to</i></td></tr>
                <xsl:for-each select="fpc4:Refs">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref">
                        <xsl:with-param name="showClass">true</xsl:with-param>
                        <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                    </xsl:apply-templates>
                </xsl:for-each>
                <tr><td colspan="2">&#160;<i>HTTP headers exempt from compression</i></td></tr>
                <xsl:for-each select="fpc4:HTTPHeaders/fpc4:HTTPHeadersStrings/fpc4:Str">
                    <tr><td colspan="2">&#160;&#160;<xsl:value-of select="." /></td></tr>
                </xsl:for-each>
                <tr><td colspan="2">&#160;<i>User-Agents exempt from compression</i></td></tr>
                <xsl:for-each select="fpc4:UserAgents/fpc4:UserAgentStrings">
                    <tr><td colspan="2">&#160;&#160;<xsl:value-of select="." /></td></tr>
                </xsl:for-each>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:IPOnNetwork">
                Address Selection:<xsl:value-of select="user:TranslateFpcIpSelectionMethods(number(fpc4:IPSelectionMethod))" />
                <xsl:apply-templates select="fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                    <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                </xsl:apply-templates>
                <xsl:for-each select="fpc4:IPAddresses/fpc4:IPAddressesStrings">
                    IP Address(es):<xsl:value-of select="user:TranslateStringSet(fpc4:Str)" />
                </xsl:for-each>
            </xsl:template>
            <xsl:template match="fpc4:IPsOnNetworks">
                <xsl:if test="fpc4:IPAddresses">
                    IP Address(es):
                    <xsl:for-each select="fpc4:IPAddresses/fpc4:IPAddressesStrings"><xsl:value-of select="user:TranslateStringSet(fpc4:Str)" /></xsl:for-each>
                </xsl:if>
                <xsl:apply-templates select="fpc4:IPOnNetwork" />
            </xsl:template>
            <!-- Do This -->
            <xsl:template match="fpc4:IPOptionTypeClass">
                <tr>
                    <td width="30%">IP Option Filtering</td><td width="65%"><xsl:value-of select="user:TranslateFpcIpOptionsAction(number(fpc4:IPOptionsAction))" /></td></tr>
                <xsl:if test="number(fpc4:IPOptionsAction)=2 or number(fpc4:IPOptionsAction)=3">
                    <tr>
                        <td width="30%">Selected IP Options</td><td width="65%">Coming soon...</td></tr>
                </xsl:if>
            </xsl:template>
            <xsl:template match="fpc4:ISAPIFilter">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:Enabled))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;Filter Direction</td><td width="65%"><xsl:value-of select="user:TranslateFpcFilterDirection(number(fpc4:FilterDirection))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Priority</td><td width="65%"><xsl:value-of select="user:TranslateFpcFilterPriority(number(fpc4:Priority))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Relative Path</td><td width="65%"><xsl:value-of select="fpc4:RelativePath" /></td></tr>
                <tr>
                    <td width="30%">&#160;Vendor</td><td width="65%"><xsl:value-of select="fpc4:Vendor" /></td></tr>
                <tr>
                    <td width="30%">&#160;Version</td><td width="65%"><xsl:value-of select="fpc4:Version" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ISAPIFilters">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ISAPIFilters')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Web Filters');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;Web Filters (<xsl:value-of select="count(fpc4:ISAPIFilter)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:ISAPIFilter">
                                <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number" order="ascending" />
                                <xsl:sort select="number(substring(fpc4:Order, 9, 10))" data-type="number" order="descending" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LdapMatchingPattern">
                <xsl:param name="arrayName" />
                <tr><td colspan="2">&#160;
                    <table cellspacing="0" style="display: inline">
						<tr><td width="35%">Pattern</td><td width="65%"><xsl:value-of select="fpc4:PatternString" /></td></tr>
						<xsl:apply-templates select="fpc4:Ref" />
                    </table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LdapMatchingPatterns">
                <xsl:param name="arrayName" />
                <tr><td colspan="2"><hr /><b>LDAP Authentication Patterns</b>
                    <table cellspacing="0" style="display: inline">
                        <xsl:apply-templates select="fpc4:LdapMatchingPattern">
                            <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number" order="ascending"/>
                        </xsl:apply-templates>
                    </table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LdapServer">
                <xsl:param name="arrayName" />
                <tr><td colspan="2"><hr />&#160;
                    <table cellspacing="0" style="display: inline">
                        <tr><td width="35%"><i><xsl:value-of select="fpc4:Name" /></i></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
						<tr><td width="35%">GC</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:IsGlobalCatalog))" /></td></tr>
						<tr><td width="35%">Timeout</td><td width="65%"><xsl:value-of select="fpc4:ConnectionTimeout" /></td></tr>
						<tr><td width="35%">Use SSL</td><td width="65%"><xsl:value-of select="boolean(fpc4:SecureConnection)" /></td></tr>
                    </table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LdapServersSet">
                <xsl:param name="arrayName" />
                <tr><td colspan="2"><hr />
                    <table cellspacing="0" style="display: inline">
                        <tr><td colspan="2"><b>LDAP Servers Set "<xsl:value-of select="fpc4:Name" />"</b></td></tr>
                        <tr><td width="35%">&#160;Domain</td><td width="65%"><xsl:value-of select="fpc4:Domain"/></td></tr>
                        <tr><td width="35%">&#160;Credentials</td><td width="65%"><xsl:value-of select="fpc4:Credentials/fpc4:UserName"/></td></tr>
                        <xsl:apply-templates select="fpc4:LdapServer" />
                    </table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LdapServersSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_LdapServersSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('LDAP Server Sets');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;LDAP Server Sets (<xsl:value-of select="count(fpc4:LdapServersSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="../fpc4:LdapMatchingPatterns"/>
                            <xsl:apply-templates select="fpc4:LdapServersSet"/>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LinkTranslationRedirection">
                <tr><td colspan="2"><hr /><b>Global Link Translation Redirection (</b></td></tr>
                <tr><td width="35%">&#160;&#160;Redirect URL</td><td width="65%"><xsl:value-of select="fpc4:RedirectUrl" /></td></tr>
                <xsl:apply-templates select="fpc4:Refs/fpc4:Ref"/>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:LoadBalancingConfig">
                <xsl:if test="fpc4:Ref/fpc4:Name">
                    <xsl:apply-templates select="fpc4:Ref" />
                </xsl:if>
            </xsl:template>
            <!-- bug this -->
            <xsl:template match="fpc4:Log">
                <xsl:variable name="LogComponent" select="@StorageName" />
                <xsl:variable name="LogType" select="fpc4:LogType" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:choose>
                                <xsl:when test="$LogComponent = 'FltrSnk1_MailLog'">SMTP Filter Log</xsl:when>
                                <xsl:when test="$LogComponent = 'Proxy-WSP'">Firewall Log</xsl:when>
                                <xsl:otherwise>Web Proxy Log</xsl:otherwise>
                            </xsl:choose></b></td><td width="65%"><xsl:choose><xsl:when test="fpc4:LogEnabled = 0">Disabled</xsl:when>
                                <xsl:otherwise>Enabled</xsl:otherwise>
                            </xsl:choose></td></tr>
                <xsl:if test="(string($LogType)='' and string($LogComponent)='FltrSnk1_MailLog') or 
					    ((string($LogType)='0' or string($LogType)='1') and string($LogComponent)!='FltrSnk1_MailLog')">
                    <tr>
                        <td width="30%">Compressed</td><td width="65%"><xsl:value-of select="boolean(fpc4:LogFilesCompress)" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">Fields</td><td width="65%"><xsl:value-of select="user:TranslateLogFields(number(fpc4:LogFieldSelection), string($LogComponent))"
                        disable-output-escaping="yes" /></td></tr>
                <tr>
                    <td width="30%">Format</td><td width="65%"><xsl:value-of select="user:TranslateLogType(number(fpc4:LogType), string($LogComponent))" /></td></tr>
                <xsl:if test="number($LogType)!=2">
                    <tr>
                        <td width="30%">Path</td><td width="65%"><xsl:choose><xsl:when test="not(fpc4:LogFileDirectory)">Default Log Path</xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="fpc4:LogFileDirectory" />
                            </xsl:otherwise>
                        </xsl:choose></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">Keep log files</td><td width="65%"><xsl:value-of select="user:TranslateMaxLen(number(LogFileKeepOld))" /> days</td></tr>
                <xsl:if test="number($LogType)!=2">
                    <tr>
                        <td width="30%">Limit Log File Size</td><td width="65%"><xsl:value-of select="boolean(LimitTotalLogSize)" /></td></tr>
                </xsl:if>
                <xsl:if test="boolean(LimitTotalLogSize)">
                    <tr>
                        <td width="30%">Max Total Log Size</td><td width="65%"><xsl:value-of select="MaxTotalLogSizeGB" /> GB</td></tr>
                    <tr>
                        <td width="30%">Min Disk Free</td><td width="65%"><xsl:value-of select="MinFreeDiskSpaceMB" /> MB</td></tr>
                </xsl:if>
                <xsl:if test="number($LogType)=2">
                    <tr>
                        <td width="30%">SQL Source</td><td width="65%"><xsl:value-of select="fpc4:LogDbDataSource" /></td></tr>
                    <tr>
                        <td width="30%">SQL Table</td><td width="65%"><xsl:value-of select="fpc4:LogDbTableName" /></td></tr>
                    <tr>
                        <td width="30%">SQL Credentials</td><td width="65%"><xsl:value-of select="fpc4:Credentials" /></td></tr>
                </xsl:if>
            </xsl:template>
            <xsl:template match="fpc4:Logs">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Logs')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Logs');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><button class="toggle" />&#160;Logs</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td width="30%">MSDE Inserts Per Batch</td><td width="65%"><xsl:value-of select="user:TranslateLogs('MSDENumberOfInsertsPerBatch',number(fpc4:MSDENumberOfInsertsPerBatch))" /></td></tr>
                            <tr>
                                <td width="30%">SQL Inserts Per Batch</td><td width="65%"><xsl:value-of select="user:TranslateLogs('SQLNumberOfInsertsPerBatch',number(fpc4:SQLNumberOfInsertsPerBatch))" /></td></tr>
                            <tr>
                                <td width="30%">MSDE Inserts Per Batch</td><td width="65%"><xsl:value-of select="user:TranslateLogs('MSDEQueryTimeout',number(fpc4:MSDEQueryTimeout))" /></td></tr>
                            <xsl:apply-templates select="fpc4:Log">
                                <xsl:sort select="@StorageName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:LowLevelSettings">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">&#160;<b>Low Level Settings</b></td></tr>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <tr>
                                <td width="1%" /><td><table cellspacing="0" style="display: inline"><tr><td width="30%">Default Allowed Addresses in Future Connect</td><td
                                    width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('allowedaddresses', number(fpc4:DefaultAllowedAddressesInAllowFutureConnect))" /></td></tr><tr><td
                                        width="30%">Default Allowed Addresses in Bind for Client</td><td width="65%"><xsl:value-of
                                            select="user:TranslateLowLevelSettings('allowedaddresses', number(fpc4:DefaultAllowedAddressesInBindForClient))" /></td></tr><tr><td
                                                width="30%">DNS Negative Cache TTL</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('dnsnegcache', number(fpc4:DnsNegativeCacheTtl))" /> Sec</td></tr><tr><td
                                                    width="30%">DNS Cache Size</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('dnscachesize', number(fpc4:DnsCacheSize))" /> KB</td></tr><tr><td
                                                        width="30%">DNS Cache Record Max Size</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('dnsrecordsize', number(fpc4:DnsCacheRecordMaxKb))" /> KB</td></tr><tr><td
                                                            width="30%">Web Listener Max Pending Accepts</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('maxaccepts', number(fpc4:FwxListenerMaxPendingAccepts))" /></td></tr><tr><td
                                                                width="30%">Web Listener Max Percent</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('maxpercent', number(fpc4:FwxListenerMaxPercent))" /> %</td></tr><tr><td
                                                                    width="30%">Web Listener Min Percent</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('minpercent', number(fpc4:FwxListenerMinPercent))" /> %</td></tr><tr><td
                                                                        width="30%">Web Listener To Create Percent</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('createpercent', number(fpc4:FwxListenerToCreatePercent))" /> %</td></tr><tr><td
                                                                            width="30%">Web Listener To Kill Percent</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('killpercent', number(fpc4:FwxListenerToKillPercent))" /> %</td></tr><tr><td
                                                                                width="30%">Max Number of Pending Connections</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('numpending', number(fpc4:MaxNumberOfPendingIoOfConnections))" /></td></tr><tr><td
                                                                                    width="30%">TCP Buffer Size</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('tcpbuffer', number(fpc4:TcpBufferSize))" /> bytes</td></tr><tr><td
                                                                                        width="30%">UDP Buffer Size</td><td width="65%"><xsl:value-of select="user:TranslateLowLevelSettings('udpbuffer', number(fpc4:UdpBufferSize))" /> bytes</td></tr></table></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NetConfig">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_NetConfig')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Network Configuration');<xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="table">
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:apply-templates select="fpc4:WspChaining">
                            <xsl:with-param name="arrayName" select="$arrayName" />
                        </xsl:apply-templates>
                    </xsl:element><xsl:element name="button"><xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', true );')" />
                        </xsl:attribute>
                    </xsl:element> Network Configuration
		    </td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:DialingConfig">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:EnterpriseNetworks"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:Networks"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:NetworkRules"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:NetworkSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:NetworkTemplates"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:NLBConfiguration"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:VpnConfig"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:ProxyRoutingRules"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="fpc4:EnterpriseNetwork | fpc4:Network">
                <xsl:variable name="Enterprise" select="substring(.,1,1)" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Connection Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcNetworkConnectionType(number(fpc4:NetworkConnectionType))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcNetworkTypes(number(fpc4:NetworkType))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Firewall Clients</td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:EnableFirewallClients))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Web Proxy Clients</td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:EnableWebProxyClients))" /></td></tr>
                <tr>
                    <td colspan="2">&#160;&#160;Local Subnets</td></tr>
                <xsl:for-each select="fpc4:IpRangeSet/fpc4:IpRangeEntry">
                    <tr>
                        <td /><td><xsl:value-of select="fpc4:IPFrom" /> - <xsl:value-of select="fpc4:IPTo" /></td></tr>
                </xsl:for-each>
                <tr>
                    <td colspan="2">&#160;&#160;Local Domains</td></tr>
                <xsl:for-each select="fpc4:ProxyLDT/fpc4:ProxyLDTEntry">
                    <tr>
                        <td width="30%" /><td width="65%"><xsl:value-of select="fpc4:Name" /></td></tr>
                </xsl:for-each>
                <xsl:if test="string(boolean(number(fpc4:EnableWebProxyClients)))='true'">
                    <xsl:apply-templates select="fpc4:ProxyClientConfig" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:VpnNetworkConfiguration" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NetworkRule">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">Enabled</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:Enabled))" /></td></tr>
                <tr>
                    <td width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(fpc4:Predefined)" /></td></tr>
                <tr>
                    <td width="30%">Routing Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcNetworkRoutingTypes(number(fpc4:RoutingType))" /></td></tr>
                <xsl:apply-templates select="fpc4:SelectionIPs">
                    <xsl:sort select="@StorageName" />
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NetworkRules">
                <xsl:param name="arrayName" />
                <xsl:variable name="ruleCount">
                    <xsl:value-of select="count(fpc4:NetworkRule)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_NetworkRules')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Network Rules');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;&#160;Network Rules (<xsl:value-of
                        select="$ruleCount" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <tr>
                                <td colspan="2" align="center"><hr />[** All Rules are listed in defined order **]</td></tr>
                            <xsl:apply-templates select="fpc4:NetworkRule">
                                <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number"
                                    order="ascending" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:EnterpriseNetworks | fpc4:Networks">
                <xsl:param name="arrayName" />
                <xsl:variable name="StrLen">
                    <xsl:value-of select="string-length(local-name())-1" />
                </xsl:variable>
                <xsl:variable name="ChildNode">
                    <xsl:value-of select="substring(local-name(),1,$StrLen)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_', local-name())" />
                </xsl:variable>
                <xsl:variable name="ShowName"><xsl:if test="substring(local-name(),1,1)='E'">Enterprise </xsl:if>Networks</xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:variable name="ShowStatus">
                    <xsl:value-of select="concat('ShowStatus(&quot;',$ShowName,'&quot;);')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">
                        <xsl:value-of select="concat($ShowStatus,$DoProps)" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;<xsl:value-of select="concat($ShowName,' (',count(*[local-name()=$ChildNode]))" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="*[local-name()=$ChildNode]">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NetworkSet">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(fpc4:Predefined)" /></td></tr>
                <tr>
                    <td width="30%">Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcNetworkSetType(number(fpc4:NetworkSetType))" /></td></tr>
                <xsl:for-each select="fpc4:Refs">
                    <tr>
                        <td colspan="2">Networks in this set<table>
                            <xsl:apply-templates select="fpc4:Ref">
                                <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                            </xsl:apply-templates></table></td></tr>
                </xsl:for-each>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NetworkSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_NetworkSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Network Sets');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Network Sets (<xsl:value-of select="count(fpc4:NetworkSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:NetworkSet">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NetworkTemplate">
                <xsl:param name="arrayName" />
                <tr>
                    <td width="1%" /><td><hr /><b><xsl:value-of select="fpc4:Name" /></b><table cellspacing="0"
                        style="display: inline"><tr><td width="30%">Large BMP</td><td width="65%"><xsl:value-of
                            select="fpc4:LargeBMPName" /></td></tr><tr><td width="30%">Medium BMP</td><td width="65%"><xsl:value-of
                                select="fpc4:MediumBMPName" /></td></tr><tr><td width="30%">Small BMP</td><td width="65%"><xsl:value-of
                                    select="fpc4:SmallBMPName" /></td></tr><tr><td width="30%">XML File</td><td width="65%"><xsl:value-of
                                        select="fpc4:XMLName" /></td></tr></table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:NetworkTemplates">
                <xsl:param name="arrayName" />
                <xsl:variable name="TemplateCount">
                    <xsl:value-of select="count(fpc4:NetworkTemplate)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_NetworkTemplates')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Network Templates');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;&#160;Network Templates (<xsl:value-of
                        select="$TemplateCount" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <xsl:attribute name="style">display:none</xsl:attribute><xsl:attribute name="id"><xsl:value-of
                                select="$Name" />
                            </xsl:attribute><xsl:apply-templates select="fpc4:NetworkTemplate"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:NLBConfiguration">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_NlbConfig')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('NLB Configuration');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;NLB Configuration</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td width="30%">BDA Team Affinity</td><td width="65%"><xsl:value-of select="user:TranslateFpcNLBAffinity(number(fpc4:NLBBDATeamAffinity))" /></td></tr>
                            <tr>
                                <td width="30%">BDA Integration</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:NLBIntegrationEnabled)))" /></td></tr>
                            <tr>
                                <td width="30%">BDA Team Master</td><td width="65%"><xsl:value-of select="fpc4:NLBClustersBDATeamMaster" /></td></tr>
                            <xsl:apply-templates select="fpc4:VendorParametersSets" />
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:NonWindows-User">
                Name: <xsl:value-of select="fpc4:Name" />,Namespace: <xsl:value-of select="fpc4:Namespace" />
                <xsl:apply-templates select="fpc4:Ref" />
            </xsl:template>
            
            <xsl:template match="fpc4:NonWindows-Users">
                Non-Windows Users: (
                <xsl:apply-templates select="fpc4:NonWindows-User">
                    <xsl:sort select="fpc4:Name" />
                </xsl:apply-templates>)
            </xsl:template>
            
            <xsl:template match="fpc4:PathMapping">
                <xsl:variable name="SameAsInt" select="boolean(user:DefaultTrue(number(fpc4:SameAsInternalPath)))" />
                <tr>
                    <td width="30%">&#160;&#160;<xsl:value-of select="fpc4:InternalPath" /></td><td width="65%"><xsl:choose><xsl:when
                        test="string($SameAsInt)='true'"><xsl:value-of select="fpc4:InternalPath" />
                    </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="fpc4:ExternalPath" />
                        </xsl:otherwise>
                    </xsl:choose></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:PathMappings">
                <tr>
                    <td colspan="2">&#160;Path Mappings</td></tr>
                <tr>
                    <td colspan="2">
                        <table>
                            <tr>
                                <td width="30%">&#160;&#160;Internal</td><td width="65%">External</td></tr><xsl:apply-templates
                                    select="fpc4:PathMapping"><xsl:sort select="." />
                                </xsl:apply-templates></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Policies">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Policies')" />
                </xsl:variable>
                <tr onclick="ShowStatus('Policies');">
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', true );')" />
                        </xsl:attribute>
                    </xsl:element> Policies
		    </td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:Policy">
                                <xsl:with-param name="arrayName">Enterprise</xsl:with-param>
                            </xsl:apply-templates></table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Policy">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName,'_Policy_',position())" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('<xsl:value-of select="fpc4:Name" />');
				    <xsl:value-of select="concat('ShowTable(tbl_',$Name,');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );">&#160;<xsl:value-of select="fpc4:Name" /> (<xsl:value-of
                        select="count(fpc4:PolicyRules/fpc4:PolicyRule)" />)
			    </td>
                </xsl:element>
                <tr>
                    <td>
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="concat('tbl_',$Name)" />
                            </xsl:attribute>
                            <tr>
                                <td colspan="2">
                                    <hr /></td></tr>
                            <tr>
                                <td width="30%">Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                            <tr>
                                <td width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:Predefined))" /></td></tr>
                            <tr>
                                <td colspan="2" align="center"><hr />[** All Rules are listed in defined order **]</td></tr>
                            <tr>
                                <td colspan="2">
                                    <table>
                                        <xsl:for-each select="fpc4:PolicyRules/fpc4:PolicyRule">
                                            <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number"
                                                order="ascending" />
                                            <xsl:call-template name="fpc4:PolicyRule">
                                                <xsl:with-param name="arrayName" select="$arrayName" />
                                            </xsl:call-template>
                                        </xsl:for-each></table></td></tr>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:PolicyAssignment">
                <tr>
                    <td colspan="2"><hr />Policy Assignments</td></tr>
                <tr>
                    <td width="30%">Enable 'Allow' Rules</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:EnableAllowRules)))" /></td></tr>
                <tr>
                    <td width="30%">Enable 'Deny' Rules</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:EnableDenyRules)))" /></td></tr>
                <tr>
                    <td width="30%">Enable Publishing Rules</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:EnablePublishingRules)))" /></td></tr>
                <xsl:apply-templates select="fpc4:Ref" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing a PolicyRule object
		    It is called by the fpc4:PolicyRules template
		    It calls the fpc4:Policy for each occurence and sorts them by name
		    ******************************************************************************************-->

<!--*** SILVERSANDS UPDATE START -->

<xsl:template name="fpc4:PolicyRule">
	<xsl:param name="arrayName" />
	<xsl:variable name="Name">
		<xsl:value-of select="concat($arrayName, '_PolicyRule_', position())" />
	</xsl:variable>
				<tr>
					<td>
"<xsl:value-of select="fpc4:Name" />"
|"<xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" />"
|"<xsl:value-of select="user:TranslateFpcPolicyRuleAction(number(fpc4:Action))" />"
|"<xsl:value-of select="fpc4:Description" />"
|"<xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:EnableLogging)))" />"
|"<xsl:value-of select="user:TranslateFpcPolicyRuleTypes(number(fpc4:Type))" />"
|"<xsl:apply-templates select="fpc4:SelectionIPs"><xsl:sort select="@StorageName" /></xsl:apply-templates>
<xsl:apply-templates select="fpc4:WebPublishingProperties" />"
|"<xsl:apply-templates select="fpc4:ServerPublishingProperties" />
<xsl:apply-templates select="fpc4:AccessProperties" />"
					</td>
				</tr>
</xsl:template>

<!--*** SILVERSANDS UPDATE END -->

            <!--****************************************************************************************** 
		    This template creates rowsets representing a PolicyRules collection
		    It is called by the fpc4:ArrayPolicy or fpc4:Policy template
		    It calls the fpc4:Policy for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:PolicyRules">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_PolicyRules')" />
                </xsl:variable>
                <xsl:variable name="SysName">
                    <xsl:value-of select="concat('tbl_', $arrayName, '_SystemRules')" />
                </xsl:variable>
                <xsl:variable name="ArrName">
                    <xsl:value-of select="concat('tbl_', $arrayName, '_ArrayRules')" />
                </xsl:variable>
                <xsl:variable name="SysCount">
                    <xsl:value-of select="count(fpc4:PolicyRule[fpc4:System='1'])" />
                </xsl:variable>
                <xsl:variable name="ArrCount">
                    <xsl:value-of select="count(fpc4:PolicyRule[not(fpc4:System) or fpc4:System=''])" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('System Rules');
				    <xsl:value-of select="concat('ShowTable(', $SysName, ');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );">&#160;System Rules (<xsl:value-of
                        select="$SysCount" />)
				    <xsl:element name="table"><xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$SysName" />
                        </xsl:attribute>
                        <tr>
                            <td colspan="2" align="center"><hr />[** All Rules are listed in defined order **]</td></tr>
                        <xsl:for-each select="fpc4:PolicyRule[fpc4:System = 1]">
                            <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number"
                                order="ascending" />
                            <xsl:call-template name="fpc4:PolicyRule">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:call-template>
                        </xsl:for-each>
                    </xsl:element></td>
                </xsl:element>
                
<!--*** SILVERSANDS UPDATE START -->                
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Array Rules');
				    <xsl:value-of select="concat('ShowTable(', $ArrName, ');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );">&#160;Array Rules (<xsl:value-of select="$ArrCount" />)
				    <xsl:element name="table"><xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$ArrName" />
                        </xsl:attribute>
                        <tr>
                            <td colspan="2" align="center"><hr />[** All Rules are listed in defined order **]</td>
                        </tr>
        				<tr>
		        			<td>"Name"|"Enabled"|"Action"|"Description"|"Logging"|"Type"|"From"|"To"|"Protocols"|"Users"|"Domain Name Sets"</td>
				        </tr>
                            
                        <xsl:for-each select="fpc4:PolicyRule[not(fpc4:System) or fpc4:System='']">
                            <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number"
                                order="ascending" />
                            <xsl:call-template name="fpc4:PolicyRule">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:call-template>
                        </xsl:for-each>
                    </xsl:element></td>
                </xsl:element>
<!--*** SILVERSANDS UPDATE END -->                


                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:PrefetcherConfig">
                <xsl:variable name="TaskType" select="number(fpc4:TaskPeriod)" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:Enabled))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Cache Text Only</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:CacheTextOnly)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Concurrent Connections</td><td width="65%"><xsl:value-of select="user:TranslatePrefetcherConfig('NumberOfConcurrentConnections',number(fpc4:NumberOfConcurrentConnections))" /></td></tr>
                <xsl:if test="$TaskType = 0">
                    <!-- One Time -->
                    <tr>
                        <td width="30%">&#160;Download Once Time</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:DownloadOnceHour))" />:<xsl:value-of
                            select="user:DefaultZero(number(fpc4:DownloadOnceMinute))" /></td></tr>
                </xsl:if>
                <xsl:if test="$TaskType = 1">
                    <!-- Daily -->
                    <tr>
                        <td width="30%">&#160;Daily Start Time</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:DailyHour))" />:<xsl:value-of
                            select="user:DefaultZero(number(fpc4:DailyMinute))" /></td></tr>
                    <xsl:if test="number(fpc4:DailyFrequency) = 1">
                        <!-- Recurring -->
                        <tr>
                            <td width="30%">&#160;Daily Frequency</td><td width="65%">Every&#160;<xsl:value-of
                                select="user:DefaultZero(number(fpc4:DailyFreqTimeValue))" /><xsl:value-of select="user:TranslateFpcTimeScale(number(fpc4:DailyFreqTimeUnits))" /></td></tr>
                    </xsl:if>
                    <tr>
                        <td width="30%">&#160;Start --&gt; End</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:DailyFreqStartHour))" />:<xsl:value-of
                            select="user:DefaultZero(number(fpc4:DailyFreqStartMinute))" /> --&gt; 
				    <xsl:value-of select="user:DefaultZero(number(fpc4:DailyFreqEndHour))" />:<xsl:value-of
                        select="user:DefaultZero(number(fpc4:DailyFreqEndMinute))" /></td></tr>
                </xsl:if>
                <xsl:if test="$TaskType = 2">
                    <!-- Specified Days of Week -->
                    <tr>
                        <td width="30%">&#160;Days</td><td width="65%"><xsl:value-of select="user:TranslateFpcDaysOfWeek(number(fpc4:DaysOfWeek))" /></td></tr>
                </xsl:if>
                <xsl:if test="$TaskType = 3">
                    <!-- Specified Days of the Month -->
                    <xsl:text>This shouldn't happen</xsl:text>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;FetchURL Cache Controls</td><td width="65%"><xsl:value-of select="user:TranslateFpcCacheContent(number(fpc4:FetchUrlCacheContent))" /></td></tr>
                <tr>
                    <td width="30%">&#160;FetchURL No-CARP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:FetchUrlFlagNoArrayRoute)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;FetchURL Override TTL</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:FetchUrlFlagTtlIOverride)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;FetchURL Rules</td><td width="65%"><xsl:value-of select="user:TranslateFpcFetchUrlFlags(number(fpc4:FetchUrlFlags))" /></td></tr>
                <tr>
                    <td width="30%">&#160;FetchURL Synchronous</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:FetchUrlFlagSync)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;FetchURL TTL if None</td><td width="65%"><xsl:value-of select="user:DefaultZero(number(fpc4:FetchUrlFlagTtlIfNone))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Max Depth</td><td width="65%"><xsl:value-of select="user:TranslatePrefetcherConfig('MaxDepth', number(fpc4:MaxDepth))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Max Pages</td><td width="65%"><xsl:value-of select="user:TranslatePrefetcherConfig('MaxPages', number(fpc4:MaxPages))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Periodicity</td><td width="65%"><xsl:value-of select="user:TranslateFpcScheduledTaskRunningPeriod($TaskType)" /></td></tr>
                <tr>
                    <td width="30%">&#160;Start Date (YYYY-MM-DD)</td><td width="65%"><xsl:value-of select="fpc4:StartDateYear" />-<xsl:value-of
                        select="fpc4:StartDayMonth" />-
			    <xsl:value-of select="fpc4:StartDateDay" /></td></tr>
                <tr>
                    <td width="30%">&#160;Stay in Domain</td><td width="65%"><xsl:value-of select="boolean(fpc4:StayInDomain)" /></td></tr>
                <tr>
                    <td width="30%">&#160;TTL</td><td width="65%"><xsl:value-of select="user:TranslatePrefetcherConfig('TTL',number(fpc4:TTL))" /></td></tr>
                <tr>
                    <td width="30%">&#160;URL</td><td width="65%"><xsl:value-of select="fpc4:URL" /></td></tr>
                <xsl:apply-templates select="fpc4:Credentials" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Prefetcher">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Prefetchers')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Scheduled Download');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;Scheduled Download (<xsl:value-of
                        select="count(fpc4:PrefetcherConfig)" />) Jobs</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td colspan="2"><hr />Common Settings</td></tr>
                            <tr>
                                <td width="30%">Use Proxy</td><td width="65%"><xsl:value-of select="fpc4:UseProxy" /></td></tr>
                            <tr>
                                <td width="30%">Use Proxy Port</td><td width="65%"><xsl:value-of select="fpc4:UseProxy" /></td></tr>
                            <xsl:apply-templates select="fpc4:PrefetcherConfig">
                                <xsl:sort select="fpc4:Priority" />
                                <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8 ))" data-type="number"
                                    order="ascending" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Protocol">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="fpc4:Name" />
                </xsl:variable>
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0"><tr><td width="30%"><b><xsl:value-of select="$Name" /></b></td><td
                            width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td width="30%">&#160;Application Filter Defined</td><td
                                width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:ApplicationFilterDefined)))" /></td></tr><tr><td
                                    width="30%">&#160;Application Filters</td><td width="65%"><xsl:if test="not(fpc4:Refs[@StorageName='ApplicationFilters']/fpc4:Ref)">Not Used</xsl:if></td></tr><xsl:apply-templates
                                        select="fpc4:Refs[@StorageName='ApplicationFilters']/fpc4:Ref"><xsl:with-param name="showClass">false</xsl:with-param>
                                        <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                                    </xsl:apply-templates><tr><td width="30%">&#160;Category</td><td width="65%"><xsl:value-of
                                        select="user:TranslateFpcProtocolCategory(number(fpc4:ProtocolCategory))" /></td></tr><tr><td
                                            width="30%">&#160;Hidden</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:Hidden)))" /></td></tr><xsl:apply-templates
                                                select="fpc4:ProtocolConnections[@StorageName='PrimaryConnections']"><xsl:with-param
                                                    name="arrayName" select="concat( $arrayName, '_', $Name)" />
                                            </xsl:apply-templates><xsl:choose><xsl:when test="fpc4:ProtocolConnections[@StorageName='SecondaryConnections']"><xsl:apply-templates
                                                select="fpc4:ProtocolConnections[@StorageName='SecondaryConnections']"><xsl:with-param
                                                    name="arrayName" select="concat( $arrayName, '_', $Name)" />
                                            </xsl:apply-templates>
                                            </xsl:when>
                                                <xsl:otherwise>
                                                    <tr>
                                                        <td width="30%">&#160;Secondary Connections</td><td width="65%">None</td></tr>
                                                </xsl:otherwise>
                                            </xsl:choose><tr><td width="30%">&#160;Predefined</td><td width="65%"><xsl:value-of
                                                select="boolean(user:DefaultFalse(number(fpc4:Predefined)))" /></td></tr><xsl:apply-templates
                                                    select="fpc4:Refs" /><xsl:apply-templates select="fpc4:VendorParametersSets" /></table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:ProtocolConnection">
                <xsl:param name="arrayName" />
                <xsl:variable name="PortLow" select="user:DefaultZero(number(fpc4:PortLow))" />
                <xsl:variable name="PortHigh" select="user:DefaultZero(number(fpc4:PortHigh))" />
                <xsl:variable name="protocol">
                    <xsl:value-of select="user:TranslateFpcConnectionProtocolType(number(fpc4:ConnectionType))" />
                </xsl:variable>
                <tr>
                    <td /><td width="65%"><xsl:choose><xsl:when test="$protocol = 'ICMP'">
				    ICMP Type <xsl:value-of select="user:DefaultZero(number(fpc4:ICMPType))" />,&#160; Code <xsl:value-of
                        select="user:DefaultZero(number(fpc4:ICMPCode))" /></xsl:when>
                        <xsl:otherwise><xsl:value-of select="$protocol" />:
				    <xsl:choose>
                        <xsl:when test="$PortLow = $PortHigh">
                            <xsl:value-of select="$PortLow" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$PortLow">
                                    <xsl:value-of select="concat($PortLow,' --&gt; ',$PortHigh)" />
                                </xsl:when>
                                <xsl:otherwise>Dynamic</xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose></xsl:otherwise>
                    </xsl:choose>,&#160;<xsl:value-of select="user:TranslateFpcConnectionDirectionType(string($protocol), number(fpc4:Direction))" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProtocolConnections">
                <xsl:param name="arrayName" />
                <xsl:variable name="context">
                    <xsl:value-of select="@StorageName" />
                </xsl:variable>
                <tr>
                    <td colspan="2">
                        <xsl:choose>
                            <xsl:when test="$context = 'PrimaryConnections'">&#160;Primary Connections</xsl:when>
                            <xsl:otherwise>&#160;Secondary Connections</xsl:otherwise>
                        </xsl:choose></td></tr>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0" style="display: inline">
                            <xsl:apply-templates select="fpc4:ProtocolConnection">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Protocols">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Protocols')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Protocols');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Protocols (<xsl:value-of select="count(fpc4:Protocol)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:Protocol">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyCacheConfiguration">
                <xsl:param name="arrayName" />
                <xsl:variable name="Enabled" select="boolean(user:DefaultTrue(number(fpc4:Enabled)))" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">Caching</td><td width="65%"><xsl:value-of select="user:IsEnabled($Enabled)" /></td></tr>
                <xsl:if test="$Enabled">
                    <tr>
                        <td width="30%">Cache Enable TTL</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:MemoryCacheMaxURLSize)))" /></td></tr>
                    <tr>
                        <td width="30%">Cache Non-200 Responses</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:CacheNon200Responses)))" /></td></tr>
                    <tr>
                        <td width="30%">Cache Without Last-Modified Date</td><td width="65%"><xsl:value-of
                            select="boolean(user:DefaultTrue(number(fpc4:CacheWithNoLastModDate)))" /></td></tr>
                    <tr>
                        <td width="30%">Freshness Internval</td><td width="65%"><xsl:value-of select="user:TranslateProxyCacheConfig('FreshnessInterval',number(fpc4:FreshnessInterval))" /> seconds</td></tr>
                    <tr>
                        <td width="30%">Max Cached URL Size</td><td width="65%"><xsl:value-of select="user:TranslateProxyCacheConfig('MemoryCacheMaxURLSize',number(fpc4:MemoryCacheMaxURLSize))" /> bytes</td></tr>
                    <tr>
                        <td width="30%">Max Cache Memory</td><td width="65%"><xsl:value-of select="user:TranslateProxyCacheConfig('MemoryCacheUsagePercent',number(fpc4:MemoryCacheUsagePercent))" /> %</td></tr>
                    <tr>
                        <td width="30%">Max Protection Time</td><td width="65%"><xsl:value-of select="user:TranslateProxyCacheConfig('MaxProtectionTime',number(fpc4:MaxProtectionTime))" /> minutes</td></tr>
                    <tr>
                        <td width="30%">Queue Requests for Content Being Cached</td><td width="65%"><xsl:value-of
                            select="boolean(user:DefaultFalse(number(fpc4:ServerProtectionEnable)))" /></td></tr>
                    <tr>
                        <td width="30%">Return Objects for Unresponsive Server</td><td width="65%"><xsl:value-of
                            select="boolean(user:DefaultFalse(number(fpc4:QueueRequests)))" /></td></tr>
                    <xsl:apply-templates select="fpc4:ProxyFTPCacheConfiguration" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyCacheDirectories">
                <xsl:variable name="DriveCount" select="count(fpc4:ProxyCacheDirectory)" />
                <tr>
                    <td colspan="2"><hr />Cache Drives (<xsl:value-of select="$DriveCount" />)</td></tr>
                <xsl:if test="$DriveCount != 0">
                    <tr>
                        <td width="30%">Total Cache Size</td><td width="65%"><xsl:value-of select="number(fpc4:TotalCacheInMegs)" /> MB</td></tr>
                    <xsl:apply-templates select="fpc4:ProxyCacheDirectory" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyCacheDirectory">
                <tr>
                    <td colspan="2">&#160;<xsl:value-of select="@StorageName" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Max Cache</td><td width="65%"><xsl:value-of select="fpc4:CacheLimitInMegs" /> MB</td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Path</td><td width="65%"><xsl:value-of select="fpc4:DirectoryName" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyCacheRule">
                <xsl:param name="arrayName" />
                <xsl:variable name="NoCache" select="user:DefaultFalse(number(fpc4:NeverCacheResponse))" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" /></td></tr>
                <xsl:if test="$NoCache">
                    <tr>
                        <td colspan="2">&#160;Never Cache This Content</td></tr>
                </xsl:if>
                <xsl:if test="not($NoCache)">
                    <tr>
                        <td width="30%">&#160;Cache Action</td><td width="65%"><xsl:value-of select="user:TranslateFpcCacheAction(user:DefaultFalse(number(fpc4:CacheAuthenticatedContent)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Cache Authenticated Content</td><td width="65%"><xsl:value-of
                            select="boolean(user:DefaultFalse(number(fpc4:CacheAuthenticatedContent)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Cache Dynamic Content</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:CacheDynamicContent)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Cache Offline Content</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:CacheContentForOfflineBrowsing)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Cache SSL Responses</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:CacheSSLResponses)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Default Rule</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:IsDefaultRule)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Enforce Object Size Limits</td><td width="65%"><xsl:value-of
                            select="boolean(user:DefaultFalse(number(fpc4:ObjectSizeLimitEnabled)))" /></td></tr>
                    <xsl:if test="boolean(fpc4:ObjectSizeLimitEnabled)">
                        <tr>
                            <td width="30%">&#160;Max Object Size</td><td width="65%"><xsl:value-of select="fpc4:ObjectSizeLimit" />&#160;<xsl:value-of
                                select="user:TranslateFpcSizeUnits(number(fpc4:ObjectSizeLimitUnits))" /></td></tr>
                    </xsl:if>
                    <xsl:apply-templates select="fpc4:ProxyFTPCacheConfig" />
                    <xsl:apply-templates select="fpc4:ProxyHTTPCacheConfig" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:SelectionIPs" />
                <tr>
                    <td colspan="2">&#160;Name-Based Destination Types (<xsl:value-of select="count(fpc4:Refs/fpc4:Ref)" />)</td></tr>
                <xsl:for-each select="fpc4:Refs">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref">
                        <xsl:with-param name="showClass">true</xsl:with-param>
                        <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                    </xsl:apply-templates>
                </xsl:for-each>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyCacheRules">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat( $arrayName, '_ProxyCacheRules' )" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $Name)" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Cache Rules');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <xsl:attribute name="align">left</xsl:attribute>
                    <td colspan="2" onclick="SetSelected( this );">&#160;Cache Rules (<xsl:value-of select="count(fpc4:ProxyCacheRule)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$tblName" />
                            </xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <tr>
                                <td colspan="2" align="center"><hr />[** All Rules are listed in defined order **]</td></tr>
                            <xsl:apply-templates select="fpc4:ProxyCacheRule">
                                <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number"
                                    order="ascending" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyClientAutoScript">
                <tr>
                    <td colspan="2">&#160;Auto-Config Script<table>
                        <tr>
                            <td /><td><table cellspacing="0"><tr><td colspan="2"><hr /><b>Local Domains</b></td></tr><xsl:apply-templates
                                select="fpc4:PublicNames" /></table></td></tr><tr><td /><td><table cellspacing="0"><tr><td
                                    colspan="2"><hr /><b>Local Subnets</b></td></tr><xsl:apply-templates select="fpc4:IpRangeSet" /></table></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyClientConfig">
                <tr>
                    <td colspan="2">Client Configuration<table>
                        <tr>
                            <td /><td><table cellspacing="0"><tr><td colspan="2"><hr /><b>Firewall Client</b></td></tr><tr><td
                                width="30%">WSP Server Name (IP)</td><td width="65%"><xsl:value-of select="fpc4:WinsockClientConfig/fpc4:ServerOrArrayNameOrIP" /></td></tr></table></td></tr><tr><td /><td><table
                                    cellspacing="0"><tr><td colspan="2"><hr /><b>Web Proxy</b></td></tr><tr><td width="30%">Auto Detection</td><td
                                        width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:BrowserClientConfig/fpc4:BrowserAutoDetect))" /></td></tr><xsl:if
                                            test="boolean(fpc4:BrowserClientConfig/fpc4:BrowserConfigScriptEnabled)"><tr><td
                                                width="30%">Configuration URL</td><td width="65%"><xsl:value-of select="fpc4:BrowserClientConfig/fpc4:BrowserConfigScriptAddress" /></td></tr>
                                        </xsl:if><tr><td width="30%">Web Proxy Server</td><td width="65%"><xsl:value-of select="fpc4:BrowserClientConfig/fpc4:ServerOrArrayName" /></td></tr><xsl:if
                                            test="../fpc4:WebListenerProperties"><xsl:apply-templates select="../fpc4:WebListenerProperties" />
                                        </xsl:if></table></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyFTPCacheConfig">
                <xsl:variable name="CacheEnable" select="user:DefaultFalse(number(fpc4:FTPCacheEnable))" />
                <tr>
                    <td colspan="2">
                        <i>FTP Cache Configuration</i></td></tr>
                <tr>
                    <td width="30%">&#160;FTP Caching</td><td width="65%"><xsl:value-of select="user:IsEnabled($CacheEnable)" /></td></tr>
                <xsl:if test="$CacheEnable">
                    <tr>
                        <td width="30%">&#160;&#160;FTP Object TTL</td><td width="65%"><xsl:value-of select="user:TranslateDefaultFtpTtl(number(fpc4:FTPTTLValue))" />&#160;<xsl:value-of
                            select="user:TranslateFpcTimeScale(number(fpc4:FTPTTLUnits))" /></td></tr>
                </xsl:if>
            </xsl:template>
            <xsl:template match="fpc4:ProxyHTTPCacheConfig">
                <xsl:variable name="CacheEnable" select="user:DefaultFalse(number(fpc4:HTTPCacheEnable))" />
                <tr>
                    <td colspan="2">
                        <i>HTTP Cache Configuration</i></td></tr>
                <tr>
                    <td width="30%">&#160;HTTP Caching</td><td width="65%"><xsl:value-of select="user:IsEnabled($CacheEnable)" /></td></tr>
                <xsl:if test="CacheEnable">
                    <tr>
                        <td width="30%">&#160;&#160;Age Factor</td><td width="65%"><xsl:value-of select="user:TranslateProxyHTTPCacheConfig('AgeFactor',number(fpc4:AgeFactor))" />% of published TTL</td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;Max TTL</td><td width="65%"><xsl:value-of select="fpc4:MaxIntervalValue" />&#160;<xsl:value-of
                            select="user:TranslateFpcTimeScale(user:TranslateProxyHTTPCacheConfig('MaxIntervalUnits',number(fpc4:MaxIntervalUnits)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;Min TTL</td><td width="65%"><xsl:value-of select="user:TranslateProxyHTTPCacheConfig('MinInterval',number(fpc4:MinInterval))" />&#160;<xsl:value-of
                            select="user:TranslateFpcTimeScale(number(fpc4:MinIntervalUnits))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;Use Boundaries on Objects with Expiration</td><td width="65%"><xsl:value-of
                            select="boolean(user:DefaultFalse(number(fpc4:ApplyBoundsToObjectsWithExpiration)))" /></td></tr>
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyPlugin">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:Enabled))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;Predefined</td><td width="65%"><xsl:value-of select="boolean(fpc4:Predefined)" /></td></tr>
                <tr>
                    <td width="30%">&#160;Vendor</td><td width="65%"><xsl:value-of select="fpc4:Vendor" /></td></tr>
                <tr>
                    <td width="30%">&#160;Version</td><td width="65%"><xsl:value-of select="fpc4:Version" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyPlugins">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ProxyPlugins')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Application Filters');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;Application Filters (<xsl:value-of
                        select="count(fpc4:ProxyPlugin)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:ProxyPlugin">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyRoutingRule">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ProxyRoutingRule_', position())" />
                </xsl:variable>
                <xsl:element name="tr"><td colspan="2"><hr />
                    <table cellspacing="0" style="display: inline">
                        <tr><td width="30%"><b><xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" /></td></tr>
                        <tr><td width="30%">&#160;Default</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:IsDefaultRule)))" /></td></tr>
                        <tr><td width="30%">&#160;Delegate Basic Auth</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:DelegateBasicCredentials)))" /></td></tr>
                        <tr><td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                        <tr><td width="30%">&#160;Never Cache</td><td width="65%"><xsl:value-of select="boolean(fpc4:NeverCacheResponse)" /></td></tr>
                        <tr><td width="30%">&#160;Retrieve Content Directly</td><td width="65%"><xsl:value-of select="user:IsEnabled(0=count(fpc4:PrimaryRoute/*))" /></td></tr>
                        <tr><td width="30%">&#160;SSL</td><td width="65%"><xsl:value-of select="user:TranslateFpcSSLRequireSecureChannelMode(number(fpc4:SSLRequireSecureChannel))" /></td></tr>
                        <tr><td width="30%">&#160;Redirect HTTP as</td><td width="65%"><xsl:value-of select="user:TranslateRedirection(number(fpc4:NonSecurePublishProtocolRedirection))" /></td></tr>
                        <tr><td width="30%">&#160;Redirect HTTPS as</td><td width="65%"><xsl:value-of select="user:TranslateRedirection(number(fpc4:SecurePublishProtocolRedirection))" /></td></tr>
                        <tr><td width="30%">&#160;SSL User Certificate</td><td width="65%">
                            <xsl:choose>
                                <xsl:when test="fpc4:SSLCertificateHash"><xsl:value-of select="fpc4:SSLCertificateHash" /></xsl:when>
                                <xsl:otherwise>None installed</xsl:otherwise>
                            </xsl:choose></td></tr>
                        <xsl:apply-templates select="fpc4:SelectionIPs"><xsl:sort select="@StorageName" />
                            <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:Refs">
                            <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:PrimaryRoute" />
                    </table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyRoutingRules">
                <xsl:param name="arrayName" />
                <xsl:variable name="ruleCount">
                    <xsl:value-of select="count(fpc4:ProxyRoutingRule)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ProxyRoutingRules')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Web Chaining');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;&#160;Web Chaining (<xsl:value-of
                        select="$ruleCount" />)</td>
                    <tr>
                        <td width="1%" /><td><xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td colspan="2" align="center"><hr />[** All Rules are listed in defined order **]</td></tr>
                            <xsl:apply-templates select="fpc4:ProxyRoutingRule">
                                <xsl:sort select="user:TranslateDword(substring(fpc4:Order, 1, 8))" data-type="number"
                                    order="ascending" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyScheduleTemplate">
                <tr>
                    <td>
                        <hr /></td></tr>
                <tr>
                    <td align="center" colspan="2">
                        <table rules="all" cellspacing="0" style="display: inline">
                            <caption style="color: blue; font-weght: bold" valign="top">
                                <xsl:value-of select="fpc4:Name" /></caption><tr><td colspan="25"><xsl:value-of select="fpc4:Description" /></td></tr><xsl:value-of
                                    select="user:TranslateScheduleBlobData( string(fpc4:ScheduleTemplate) )" disable-output-escaping="yes" /></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyScheduleTemplates">
                <xsl:param name="arrayName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $arrayName, '_ProxyScheduleTemplates')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Schedules');
				    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Schedules (<xsl:value-of select="count(fpc4:ProxyScheduleTemplate)" />)
				    <xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:apply-templates select="fpc4:ProxyScheduleTemplate">
                            <xsl:sort select="fpc4:Name" />
                        </xsl:apply-templates>
                    </xsl:element></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ProxyWSP">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">&#160;Firewall</td></tr>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <tr>
                                <td width="1%" /><td><table cellspacing="0" style="display: inline"><tr><td width="30%">DNS Cache Size</td><td
                                    width="65%"><xsl:value-of select="fpc4:DnsCacheSize" /></td></tr><tr><td width="30%">TCP Buffer Size</td><td
                                        width="65%"><xsl:value-of select="fpc4:TcpBufferSize" /></td></tr><tr><td width="30%">UDP Buffer Size</td><td
                                            width="65%"><xsl:value-of select="fpc4:UdpBufferSize" /></td></tr></table></td></tr></table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:PublicNames">
                <xsl:for-each select="fpc4:PublicNameStrings/fpc4:Str">
                    <xsl:sort select="." />
                    Public Name: <xsl:value-of select="." />
                </xsl:for-each>
            </xsl:template>
            <xsl:template match="fpc4:PublishedServer">
                <tr><td colspan="2"><xsl:value-of select="fpc4:NameOrIP" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:PublishedServers">
                <tr><td width="30%">Published Servers (<xsl:value-of select="count(fpc4:PublishedServer)" />)</td><td width="65%"><table>
                    <xsl:apply-templates select="fpc4:PublishedServer" />
                    <xsl:apply-templates select="fpc4:VendorParametersSets" />
                </table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:RadiusServer">
                <tr>
                    <td colspan="2">
                        <hr /><b><xsl:value-of select="fpc4:Name" /></b><table cellspacing="0" style="display: inline"><tr><td
                            width="30%">Always Use Authenticator</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:RadiusAlwaysUseMessageAuthenticator)))" /></td></tr><tr><td
                                width="30%">Connection Timeout</td><td width="65%"><xsl:value-of select="user:TranslateRadiusServer('ConnectionTimeout',number(fpc4:ConnectionTimeout))" /></td></tr><tr><td
                                    width="30%">Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                        width="30%">Port</td><td width="65%"><xsl:value-of select="user:TranslateRadiusServer('Port',number(fpc4:Port))" /></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:RadiusServers">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_RadiusServers')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('RADIUS Servers');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Radius Servers (<xsl:value-of select="count(fpc4:RadiusServer)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td colspan="2">
                                    <hr /></td></tr>
                            <tr>
                                <td width="30%">Retries</td><td width="65%"><xsl:value-of select="user:TranslateRadiusServers(number(fpc4:Retries))" /></td></tr>
                            <tr>
                                <td width="30%">Unavailable After</td><td width="65%"><xsl:value-of select="user:TranslateRadiusServers(number(fpc4:UnavailabilityTime))" /> Minutes</td></tr>
                            <xsl:apply-templates select="fpc4:RadiusServer">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ReadyReport">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <xsl:value-of select="fpc4:Name" /></td><td width="65%"><xsl:value-of select="user:TranslateFpcReportStatus(number(fpc4:ReportStatus))" /></td></tr>
                <tr>
                    <td width="30%">Job Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcReportJobPeriodType(number(fpc4:ReportStatus))" /></td></tr>
                <tr>
                    <td width="30%">Reported Time</td><td width="65%"><xsl:value-of select="fpc4:ReportStartDate" /> --&gt; <xsl:value-of
                        select="fpc4:ReportEndDate" /></td></tr>
                <xsl:apply-templates select="fpc4:ReadyReportData" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ReadyReportData">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">Ready Report Data</td><td width="65%"><xsl:value-of select="fpc4:ReportXMLData" /></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ReadyReports">
                <xsl:param name="arrayName" />
                <xsl:variable name="ReportCount">
                    <xsl:value-of select="count(fpc4:ReadyReports)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ReadyReports')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">
                        <xsl:value-of select="concat('ShowTable(',$Name,',true);ShowStatus(&quot;Ready Reports&quot;);')" />
                    </xsl:attribute>
                    <td colspan="2">&#160;Ready Reports (<xsl:value-of select="count(fpc4:ReadyReport)" />)
			    <xsl:element name="table"><xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <xsl:apply-templates select="fpc4:ReadyReport">
                        <xsl:with-param name="arrayName" select="$arrayName" />
                    </xsl:apply-templates>
                </xsl:element></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing a Ref object
		    It is called by many templates
		    ******************************************************************************************-->
            
<!--*** SILVERSANDS UPDATE START -->                            
            <xsl:template match="fpc4:Ref">
                <xsl:param name="Parent" />
                <xsl:param name="indent" />
                <xsl:param name="showClass" />

                <xsl:variable name="refClass" select="substring(fpc4:RefClass, 6)" />
                <xsl:variable name="refClassGuid" select="translate(fpc4:Name,'abcdef','ABCDEF')" />
                <xsl:variable name="refName" select="//*[local-name()=$refClass][translate(@StorageName,'abcdef','ABCDEF')=$refClassGuid]/fpc4:Name" />
<!--                <xsl:if test="position()&gt;1">, </xsl:if> -->
                <xsl:if test="string($showClass)!='false'"><xsl:value-of select="user:TranslateClassName($refClass)" /></xsl:if>: <xsl:value-of select="$refName" />,  
            </xsl:template>
<!--*** SILVERSANDS UPDATE END -->                            
            
            
            <xsl:template match="fpc4:ReportJob">
                <xsl:param name="arrayName" />
                <xsl:variable name="EnableMail" select="boolean(user:DefaultFalse(number(fpc4:EnableReportEmailing)))" />
                <xsl:variable name="EnablePublish" select="boolean(user:DefaultFalse(number(fpc4:EnableReportPublishing)))" />
                <xsl:variable name="Type" select="number(fpc4:ReportJobPeriodType)" />
                <xsl:variable name="UseCreds" select="boolean(user:DefaultFalse(number(fpc4:UseReportPublishingCredentials)))" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:Enabled)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Add Link to Published Report</td><td width="65%"><xsl:value-of
                        select="boolean(user:DefaultFalse(number(fpc4:AddLinkToPublishedReport)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Categories</td><td width="65%"><xsl:value-of select="user:TranslateFpcReportJobCategory(number(fpc4:ReportCategories))" /></td></tr>
                <xsl:if test="$Type = 3">
                    <tr>
                        <td width="30%">&#160;Day of Month</td><td width="65%"><xsl:value-of select="user:TranslateDayOfMonth(number(fpc4:DayOfMonth))" /></td></tr>
                </xsl:if>
                <xsl:if test="$Type = 2">
                    <tr>
                        <td width="30%">&#160;Days of Week</td><td width="65%"><xsl:value-of select="user:TranslateFpcDaysOfWeek(number(fpc4:DaysOfWeek))" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;Email Report</td><td width="65%"><xsl:value-of select="$EnableMail" /></td></tr>
                <xsl:if test="string($EnableMail) = 'true'">
                    <tr>
                        <td width="30%">&#160;Email Body</td><td width="65%"><xsl:value-of select="fpc4:ReportJobEmailBody" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Email CC</td><td width="65%"><xsl:value-of select="fpc4:ReportJobEmailCC" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Email From</td><td width="65%"><xsl:value-of select="fpc4:ReportJobEmailFrom" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Email To</td><td width="65%"><xsl:value-of select="fpc4:ReportJobEmailTo" /></td></tr>
                    <tr>
                        <td width="30%">&#160;SMTP Server</td><td width="65%"><xsl:value-of select="fpc4:ReportJobSmtpServer" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Periodicity</td><td width="65%"><xsl:value-of select="user:TranslateFpcScheduledTaskRunningPeriod(number(fpc4:ReportJobReoccurrenceType))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Publish Report</td><td width="65%"><xsl:value-of select="$EnablePublish" /></td></tr>
                <xsl:if test="string($EnablePublish) = 'true'">
                    <tr>
                        <td width="30%">&#160;Publishing Directory</td><td width="65%"><xsl:value-of select="fpc4:PublishingDirectory" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Report Type</td><td width="65%"><xsl:value-of select="user:TranslateFpcReportJobPeriodType($Type)" /></td></tr>
                <xsl:if test="$Type = 0">
                    <!--FpcRunOnce -->
                    <tr>
                        <td width="30%">&#160;Run ASAP</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:RunAsSoonAsPossible)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Run Once Period</td><td width="65%"><xsl:value-of select="fpc4:RunOnceReportJobPeriodStart" /> --&gt; 
				    <xsl:value-of select="fpc4:RunOnceReportJobPeriodEnd" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Start Date</td><td width="65%"><xsl:value-of select="substring-before(fpc4:ReoccurringReportJobStartDate, 'T')" /></td></tr>
                <tr>
                    <td width="30%">&#160;Use Credentials</td><td width="65%"><xsl:value-of select="$UseCreds" /></td></tr>
                <xsl:if test="string(UseCreds) = 'true'">
                    <xsl:apply-templates select="fpc4:Credentials" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                    <xsl:with-param name="indent">&#160;</xsl:with-param>
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ReportJobs">
                <xsl:param name="arrayName" />
                <xsl:variable name="ReportCount">
                    <xsl:value-of select="count(fpc4:ReportJobs)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ReportJobs')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Report Jobs');
				    <xsl:value-of select="concat('ShowTable(', $Name, ');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;Report Jobs (<xsl:value-of select="count(fpc4:ReportJob)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:apply-templates select="fpc4:ReportJob">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Reports">
                <xsl:param name="arrayName" />
                <xsl:variable name="ReportCount">
                    <xsl:value-of select="count(fpc4:Report)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Reports')" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name )" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $rowName )" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Reports');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Reports
			    <xsl:element name="table"><xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="cellspacing">0</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$tblName" />
                    </xsl:attribute>
                    <xsl:apply-templates select="fpc4:DailysumConfig" />
                </xsl:element></td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:ReportJobs">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:ReadyReports"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template starts the rendering process
		    ******************************************************************************************-->
            <xsl:template match="fpc4:Root">
                <table id="Table1" cellspacing="0">
                    <tr><td onclick="ShowStatus('ISA Configuration Data');SetSelected(this);ShowTable(tbl_row_Root);" id="RootItem">
                        <table id="tbl_row_Root" style="display: none" cellspacing="0">
                            <tr><td colspan="2"><hr /></td></tr>
                            <tr><td width="30%">Build</td><td width="65%"><xsl:value-of select="fpc4:Build" /></td></tr>
                            <tr><td width="30%">Comment</td><td width="65%"><xsl:value-of select="fpc4:Comment" disable-output-escaping="yes" /></td></tr>
                            <tr><td width="30%">Edition</td><td width="65%"><xsl:value-of select="user:TranslateEdition(string(fpc4:Edition))" /></td></tr>
                            <tr><td width="30%">ISA XML Version</td><td width="65%"><xsl:value-of select="fpc4:IsaXmlVersion" /></td></tr>
                            <tr><td width="30%">Optional Data</td><td width="65%"><xsl:value-of select="user:TranslateFpcExportImportOptionalData(number(fpc4:OptionalData))" /></td></tr>
                            <tr><td width="30%">Upgrade</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:Upgrade))" /></td></tr>
                        </table>
                        <B>&#160;ISA Configuration Data</B></td></tr>
                    <xsl:apply-templates select="fpc4:Enterprise" />
                    <xsl:apply-templates select="fpc4:Arrays" />
                </table>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:RuleElements">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_RuleElements')" />
                </xsl:variable>
                <tr onclick="ShowStatus('Rule Elements');">
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Rule Elements
		    </td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:call-template name="fpc4:AddressRanges">
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:call-template><xsl:apply-templates select="fpc4:AuthenticationSchemes"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:Computers"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:ComputerSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:ContentTypeSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:DomainNameSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:EventDefinitions"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:LdapServersSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:Protocols"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:RadiusServers"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:ProxyScheduleTemplates"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:ServerFarms"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:Subnets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:URLSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:UserAgentMappings"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:UserSets"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:WebListeners"><xsl:with-param
                                name="arrayName" select="$arrayName" />
                            </xsl:apply-templates><xsl:apply-templates select="fpc4:VendorParametersSets"><xsl:with-param
                                name="arrayName" select="$arrayName" /></xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an SecurityRole object
		    It is called by the fpc4:AdminSecurity template
		    ******************************************************************************************-->
            <xsl:template match="fpc4:SecurityRole">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Predefined</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:Predefined)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;System</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:System)))" /></td></tr>
                <xsl:apply-templates select="msxsl:node-set(user:TranslateStringToNodeTree(string(fpc4:SecurityRoleDefinition)))" />
                <xsl:apply-templates select="msxsl:node-set(user:TranslateStringToNodeTree(string(fpc4:SecurityRoleDefinitionStr)))" />
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an SecurityRoles collection
		    It is called by the fpc4:RuleElements template
		    It calls the fpc4:AuthenticationScheme for each occurence and sorts them by name
		    ******************************************************************************************-->
            <xsl:template match="fpc4:SecurityRoles">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_SecurityRoles')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick"><xsl:value-of select="$DoProps" />ShowStatus('Security Roles');</xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected( this );">&#160;Security Roles (<xsl:value-of select="count(fpc4:SecurityRole)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:SecurityRole">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>

<!--*** SILVERSANDS UPDATE START -->                
            <xsl:template match="fpc4:SelectionIPs">
<!--                <xsl:value-of select="user:TranslateSelectIPs(string(@StorageName))" /> -->
                <xsl:for-each select="fpc4:Refs">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref" />
                </xsl:for-each>
            </xsl:template>
<!--*** SILVERSANDS UPDATE END -->                

            <xsl:template match="fpc4:Server">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="user:FixGUID(substring(@StorageName,2,36))" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name, '_', $arrayName)" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $rowName)" />
                </xsl:variable>
                <xsl:variable name="serverName">
                    <xsl:choose>
                        <xsl:when test="fpc4:Name = ''">
                            <xsl:value-of select="../../fpc4:Name" />
                        </xsl:when>
                        <xsl:otherwise>&#160;<xsl:value-of select="fpc4:Name" /></xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(',$tblName,');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Server \"<xsl:value-of select="$serverName" />\"');<xsl:value-of
                        select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="table">
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:if test="fpc4:IntraArrayAddress">
                        <tr><td colspan="2"><hr /></td></tr>
                        <tr><td width="30%">Intra-Array IP</td><td width="65%"><xsl:value-of
                                select="fpc4:IntraArrayAddress" /></td></tr>
                        </xsl:if>
                        <tr>
                            <td width="30%">MSDE Installed</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:IsMSDEInstalled)))" /></td></tr>
                        <tr>
                            <td width="30%">Load Factor</td><td width="65%"><xsl:value-of select="user:TranslateLoadFactor(number(fpc4:LoadFactor))" /></td></tr>
                        <xsl:apply-templates select="fpc4:ProxyCacheDirectories" />
                        <tr>
                            <td colspan="2"><hr />VPN Server Address Pool</td></tr>
                        <xsl:for-each select="fpc4:IpRangeSet[@StorageName='VpnServerStaticAddressPool']/fpc4:IpRangeEntry">
                            <tr>
                                <td colspan="2">&#160;&#160;<xsl:value-of select="fpc4:IPFrom" /> --&gt; <xsl:value-of
                                    select="fpc4:IPTo" /></td></tr>
                        </xsl:for-each>
                        <xsl:for-each select="fpc4:IpRangeSet[@StorageName='VpnServerStaticAddressPoolEx']/fpc4:IpRangeEntry">
                            <tr>
                                <td colspan="2">&#160;&#160;<xsl:value-of select="fpc4:IPFrom" /> --&gt; <xsl:value-of
                                    select="fpc4:IPTo" /></td></tr>
                        </xsl:for-each>
                        <tr>
                            <td colspan="2"><hr />Installed Filters</td></tr>
                        <xsl:apply-templates select="fpc4:Refs/fpc4:Ref">
                            <xsl:with-param name="indent">&#160;&#160;</xsl:with-param>
                        </xsl:apply-templates>
                        <xsl:apply-templates select="ISAInfoData" />
                    </xsl:element><xsl:element name="button"><xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(',$rowName,', false);')" />
                        </xsl:attribute>
                    </xsl:element>&#160;<xsl:value-of select="$serverName" /></td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <td colspan="2">
                        <table>
                            <xsl:apply-templates select="ISAInfoData/SignaledAlerts">
                                <xsl:with-param name="serverName" select="$Name" />
                            </xsl:apply-templates><xsl:apply-templates select="ISAInfoData/Win32_OperatingSystem"><xsl:with-param
                                name="serverName" select="$Name" />
                            </xsl:apply-templates><xsl:apply-templates select="ISAInfoData/EventLogs"><xsl:with-param
                                name="serverName" select="$Name" />
                            </xsl:apply-templates><xsl:apply-templates select="ISAInfoData/Hardware"><xsl:with-param
                                name="serverName" select="$Name" />
                            </xsl:apply-templates><xsl:apply-templates select="ISAInfoData/IIS"><xsl:with-param
                                name="serverName" select="$Name" />
                            </xsl:apply-templates><xsl:apply-templates select="ISAInfoData/Win32_Share"><xsl:with-param
                                name="serverName" select="$Name" />
                            </xsl:apply-templates><xsl:apply-templates select="ISAInfoData/Files"><xsl:with-param
                                name="serverName" select="$Name" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ServerFarm">
                <xsl:param name="arrayName" />
                <tr><td colspan="2"><hr />
                    <table cellspacing="0" style="display: inline">
                        <tr><td width="30%"><b><xsl:value-of select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr>
                        <xsl:apply-templates select="fpc4:ConnectivityVerifier" >
                            <xsl:with-param name="farm">true</xsl:with-param>
                        </xsl:apply-templates>
                        <xsl:apply-templates select="fpc4:PublishedServers" />
                    </table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:ServerFarms">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_ServerFarms')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Server Farms');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Server Farms (<xsl:value-of select="count(fpc4:ServerFarm)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:ServerFarm">
                                <xsl:sort select="@StorageName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--****************************************************************************************** 
		    This template creates rowsets representing an ServerPublishingProperties collection
		    It is called by the fpc4:PolicyRule template
		    ******************************************************************************************-->

<!--*** SILVERSANDS UPDATE START -->
            <xsl:template match="fpc4:ServerPublishingProperties">
                Published Server: <xsl:value-of select="fpc4:PublishedServerIP" />
            </xsl:template>
<!--*** SILVERSANDS UPDATE END -->                
            
            <xsl:template match="fpc4:Servers">
                <xsl:param name="arrayName" />
                <xsl:variable name="serverCount">
                    <xsl:value-of select="count(fpc4:Server)" />
                </xsl:variable>
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Servers')" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name)" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $rowName)" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Servers');
			    <xsl:if test="$serverCount > 1">
                    <xsl:value-of select="$DoProps" />
                </xsl:if></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="table">
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:attribute name="cellspacing">0</xsl:attribute>
                        <tr>
                            <td width="30%">Server</td><td width="65%"><xsl:value-of select="@ContainingServer" /></td></tr>
                    </xsl:element><xsl:element name="button"><xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element>&#160;Servers <xsl:if test="$serverCount > 1">(<xsl:value-of select="$serverCount" />)</xsl:if></td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="fpc4:Server">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:Subnet">
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0" style="display: inline"><tr><td width="30%"><b><xsl:value-of
                            select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                width="30%">&#160;IP Address</td><td width="65%"><xsl:value-of select="fpc4:IPAddress" /></td></tr><tr><td
                                    width="30%">&#160;Subnet Mask</td><td width="65%"><xsl:value-of select="fpc4:IPMask" /></td></tr></table></td></tr>
            </xsl:template>
            <xsl:template match="fpc4:Subnets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_Subnets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Subnets');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Subnets (<xsl:value-of select="count(fpc4:Subnet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:Subnet">
                                <xsl:sort select="@StorageName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:URLSet">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0" style="display: inline"><tr><td width="30%"><b><xsl:value-of
                            select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><xsl:for-each
                                select="fpc4:URLStrings/fpc4:Str"><xsl:sort select="." />
                                <tr>
                                    <td width="30%">
                                    </td><td width="65%"><xsl:value-of select="." /></td></tr>
                            </xsl:for-each><tr><td width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:Predefined)))" /></td></tr></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:URLSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_URLSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('URL Sets');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;URLSets (<xsl:value-of select="count(fpc4:URLSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:URLSet">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:UserAgentMapping">
                <xsl:param name="arrayName" />
                <tr><td colspan="2"><hr />
                    <table cellspacing="0" style="display: inline">
                        <tr><td width="30%"><b><xsl:value-of select="fpc4:UserAgent" /></b></td><td width="65%"><xsl:value-of select="user:IsEnabled(boolean(fpc4:Enabled))" /></td></tr>
                        <tr><td width="30%">Authentication</td><td width="65%"><xsl:value-of select="user:TranslateFBAFormsType(number(fpc4:FBAFormsType))" /></td></tr>
                    </table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:UserAgentMappings">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_UserAgentMappings')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('User Agent Mappings');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;User Agent Mappings (<xsl:value-of select="count(fpc4:UserAgentMapping)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:UserAgentMapping">
                                <xsl:sort select="user:TranslateBlobDataDword(fpc4:Order)" data-type="number"/>
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:UserMapping">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">User Mapping</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:Enabled)))" /></td></tr>
                <xsl:if test="user:DefaultFalse(number(fpc4:Enabled))">
                    <tr>
                        <td width="30%">User Mapping Domain</td><td width="65%"><xsl:value-of select="fpc4:Domain" /></td></tr>
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:UserSet">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /><table cellspacing="0" style="display: inline"><tr><td width="30%"><b><xsl:value-of
                            select="fpc4:Name" /></b></td><td width="65%"><xsl:value-of select="fpc4:Description" /></td></tr><tr><td
                                width="30%">Predefined</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(fpc4:Predefined))" /></td></tr><xsl:apply-templates
                                    select="fpc4:Accounts" /><xsl:apply-templates select="fpc4:NonWindows-Users" /></table></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:UserSets">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_UserSets')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('User Sets');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;User Sets (<xsl:value-of select="count(fpc4:UserSet)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:UserSet">
                                <xsl:sort select="fpc4:Name" />
                                <xsl:with-param name="arrayName" select="$arrayName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>

            <xsl:template match="fpc4:VendorParametersSet">
                <!-- Known VendorParametersSet GUIDs -->
                <xsl:variable name="isa_qfe_list">{143F5698-103B-12D4-FF34-1F34767DEabc}</xsl:variable>
                <!-- This is where we stash entries added by QFE -->
                <xsl:variable name="http_xml_cfg">{f1076e51-bbaf-48ba-a2d7-b0875211e80d}</xsl:variable>
                <xsl:variable name="exch_sp_wp_wiz">{5e302ed5-f5d5-4fad-9b8a-01c72e1569f3}</xsl:variable>
                <xsl:variable name="lt_dict">{3563FFF5-DF93-40eb-ABC3-D24B5F14D8AA}</xsl:variable>
                <xsl:variable name="smtp_cfg">{dd8bed76-c415-429c-a6b8-26005a2c4902}</xsl:variable>
                <!-- SMTP Verbs -->
                <xsl:variable name="attach">{09c4f76e-58d8-4744-8bdf-3eb302f6a7b0}</xsl:variable>
                <!-- attachments -->
                <xsl:variable name="keyword">{477d5974-38d9-409a-8413-69b43e627869}</xsl:variable>
                <!-- keywords -->
                <xsl:variable name="senders">{216029f8-f6fa-4d82-a4b8-f476be25dc80}</xsl:variable>
                <!-- senders -->
                <xsl:variable name="domain">{331ee446-5303-48da-9753-b5831d6ef966}</xsl:variable>
                <!-- domains -->
                <xsl:variable name="dns_cfg">{D96C5E7F-5B13-4e1a-94A1-36CA7B54604E}</xsl:variable>
                <xsl:variable name="ftp_send_cfg">{680A928F-22B3-11D1-B026-0000F87750CB}</xsl:variable>
                <xsl:variable name="gfi_desc"> {94B5D413-55E0-4f4c-9390-E53828457957}</xsl:variable>
                <!-- GFI Download Security -->
                <xsl:variable name="h323_cfg1">{120f7da7-5e8f-41cc-9479-a76282dbea49}</xsl:variable>
                <!-- H.323 AllowVideo -->
                <xsl:variable name="h323_cfg2">{7c017d00-e14e-442d-b1ed-381e4dbaa3eb}</xsl:variable>
                <!-- H.323 UseLRQ -->
                <xsl:variable name="h323_cfg3">{95685c22-5856-45f8-99f2-c7d05595c3f8}</xsl:variable>
                <!-- H.323 Allow T120 -->
                <xsl:variable name="h323_cfg4">{bd66fd9d-800f-4710-8d26-091e3d5caee9}</xsl:variable>
                <!-- H.323 Allow Audio -->
                <xsl:variable name="h323_cfg5">{c89d976e-371c-4b68-ae69-d61caa41ce86}</xsl:variable>
                <!-- H.323 GK Location -->
                <xsl:variable name="exch_rpc1">{0E4A0156-DD5D-11D2-8C2F-00C04FB6BCDE}</xsl:variable>
                <!-- Information Store 1 -->
                <xsl:variable name="exch_rpc2">{10F24E8E-0FA6-11D2-A910-00C04F990F3B}</xsl:variable>
                <!-- Information Store 3 -->
                <xsl:variable name="exch_rpc3">{1453C42C-0FA6-11D2-A910-00C04F990F3B}</xsl:variable>
                <!-- Information Store 2 -->
                <xsl:variable name="exch_rpc4">{1544F5E0-613C-11D1-93DF-00C04FD7BD09}</xsl:variable>
                <!-- Directory RFR -->
                <xsl:variable name="exch_rpc5">{1A190310-BB9C-11CD-90F8-00AA00466520}</xsl:variable>
                <!-- Database -->
                <xsl:variable name="exch_rpc6">{38A94E72-A9BC-11D2-8FAF-00C04fA378FF}</xsl:variable>
                <!-- MTA 'QAdmin' -->
                <xsl:variable name="exch_rpc7">{469D6EC0-0D87-11CE-B13F-00AA003BAC6C}</xsl:variable>
                <!-- System Attendant Public Interface -->
                <xsl:variable name="exch_rpc8">{83D72BF0-0D89-11CE-B13F-00AA003BAC6C}</xsl:variable>
                <!-- System Attendant Private -->
                <xsl:variable name="exch_rpc9">{89742ACE-A9ED-11CF-9C0C-08002BE7AE86}</xsl:variable>
                <!-- Store admin 2 -->
                <xsl:variable name="exch_rpc10">{99E64010-B032-11D0-97A4-00C04FD6551D}</xsl:variable>
                <!-- Store admin 1 -->
                <xsl:variable name="exch_rpc11">{9E8EE830-4459-11CE-979B-00AA005FFEBE}</xsl:variable>
                <!-- MTA -->
                <xsl:variable name="exch_rpc12">{A4F1DB00-CA47-1067-B31E-00DD010662DA}</xsl:variable>
                <!-- Store admin 3 -->
                <xsl:variable name="exch_rpc13">{A4F1DB00-CA47-1067-B31F-00DD010662DA}</xsl:variable>
                <!-- Store EMSMDB -->
                <xsl:variable name="exch_rpc14">{F5CC59B4-4264-101A-8C59-08002B2F8426}</xsl:variable>
                <!-- Directory DRS -->
                <xsl:variable name="exch_rpc15">{F5CC5A18-4264-101A-8C59-08002B2F8426}</xsl:variable>
                <!-- Directory NSP -->
                <xsl:variable name="exch_rpc16">{F5CC5A7C-4264-101A-8C59-08002B2F8426}</xsl:variable>
                <!-- Directory XDS -->
                <xsl:variable name="exch_rpc17">{F930C514-1215-11D3-99A5-00A0C9B61B04}</xsl:variable>
                <!-- System Attendant Cluster -->
                <xsl:variable name="owa_add">{28EF0C08-E82F-41bf-8CBD-88BDF66E654B}</xsl:variable>
                <!-- OWA HTTP Filter Settings -->
                <xsl:variable name="rpc_filt">{E331F638-AB86-4AA5-9B6A-2B0248C7B4FB}</xsl:variable>
                <!-- RPC custom settings -->
                <xsl:variable name="securIDSettings">{382b389c-1392-4954-9978-85324de89ff9}</xsl:variable>
                <!-- RSA Settings -->
                <xsl:variable name="securIDSecret">{34f34036-cabf-4648-9068-3abea473166f}</xsl:variable>
                <!-- RSA Secret -->
                <xsl:variable name="compressCfg">{6E266C3C-393E-459E-8856-21077E352ECA}</xsl:variable>
                <!-- SP2 HTTP Compression data -->
                <xsl:variable name="differvCfg">{CE085847-2E34-4d5a-B1CA-72BB24A75DFA}</xsl:variable>
                <!-- SP2 Diffserv data -->
                <xsl:variable name="bitsCache">{8006B8AA-1144-41B3-A400-44AB02391C1E}</xsl:variable>
                <!-- BITS caching -->
                <xsl:variable name="CustomSettings">{EF506E47-A862-4010-AEE5-D2A2A015FDDA}</xsl:variable>
                <!-- Enterprise SQL logging -->
                <xsl:variable name="entSQL">{91FA2AD9-CBE1-4bea-AF87-A321401FAC53}</xsl:variable>
                <!-- SP2-added for ISA hotfixes -->
                <xsl:variable name="VpsName">
                    <xsl:value-of select="string(fpc4:Name)" />
                </xsl:variable>
                <xsl:if test="$VpsName != $CustomSettings">
                    <tr><td colspan="2"><b>&#160;<xsl:value-of select="user:TranslateVpsName(string($VpsName))" /></b></td></tr>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="$VpsName=$http_xml_cfg or $VpsName=$owa_add or $VpsName=$compressCfg or $VpsName=$differvCfg"><xsl:apply-templates
                    select="msxsl:node-set(user:TranslateExtraXml(string(fpc4:BlobData)))" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$h323_cfg1 or $VpsName=$h323_cfg2 or	
					    $VpsName=$h323_cfg3 or $VpsName=$h323_cfg4">
                        <xsl:value-of select="user:GetH323Values(string(fpc4:BlobData), number(1))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$bitsCache">
                        <xsl:value-of select="user:GetBitsCaching(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$keyword">
                        <xsl:value-of select="user:GetBlockedKeywords(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$smtp_cfg">
                        <xsl:value-of select="user:GetSmtpCommands(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$attach">
                        <xsl:value-of select="user:GetBlockedAttachments(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$exch_sp_wp_wiz">
                        <xsl:value-of select="user:GetWpRuleData(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$senders or $VpsName=$domain">
                        <xsl:value-of select="user:GetKeys(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$h323_cfg5">
                        <xsl:value-of select="user:GetH323Values(string(fpc4:BlobData), number(0))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$dns_cfg">
                        <xsl:value-of select="user:GetDnsValues(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$ftp_send_cfg">
                        <tr>
                            <td colspan="2">&#160;Allow FTP Uploads</td><td width="65%"><xsl:value-of select="boolean(user:GetSingleValue(string(fpc4:BlobData)))" /></td></tr>
                    </xsl:when>
                    <xsl:when test="$VpsName=$lt_dict">
                        <tr>
                            <td width="30%">&#160;&#160;<u>Match</u></td><td width="65%"><u>Replace with</u></td></tr>
                        <xsl:value-of select="user:TranslateBlobData(string(fpc4:BlobData))" disable-output-escaping="yes" />
                    </xsl:when>
                    <xsl:when test="$VpsName=$CustomSettings" />
                    <!-- we have a custom template for this -->
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="fpc4:EncryptedData">&#160;&#160;Encrypted Data</xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="user:TranslateBlobData(string(fpc4:BlobData))" disable-output-escaping="yes" />
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:template>

            <xsl:template match="fpc4:VendorParametersSets">
                <xsl:apply-templates select="fpc4:VendorParametersSet" />
            </xsl:template>
            
            <xsl:template match="fpc4:VpnConfig">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_VpnConfig')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:variable name="Enabled" select="user:DefaultFalse(number(fpc4:VpnEnable))" />
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('VPN Configuration');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;VPN Configuration</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <tr>
                                <td colspan="2">
                                    <hr /></td></tr>
                            <tr>
                                <td width="30%">
                                    <b>VPN Client Connections</b></td><td width="65%"><xsl:value-of select="user:IsEnabled($Enabled)" /></td></tr>
                            <xsl:if test="$Enabled">
                                <tr>
                                    <td width="30%">&#160;VPN Access</td><td width="65%"><xsl:value-of select="fpc4:Access" /></td></tr>
                                <tr>
                                    <td colspan="2">&#160;<hr /><b>VPN Accounts</b></td></tr>
                                <xsl:apply-templates select="fpc4:Accounts/fpc4:Account">
                                    <xsl:with-param name="NoBar">true</xsl:with-param>
                                </xsl:apply-templates>
                                <tr>
                                    <td colspan="2">
                                        <hr /></td></tr>
                                <tr>
                                    <td width="30%">&#160;Allow Custom IPSec Policy</td><td width="65%"><xsl:value-of
                                        select="boolean(user:DefaultFalse(number(fpc4:VpnAllowCustomIPSecPolicyForL2TP)))" /></td></tr>
                                <tr>
                                    <td width="30%">&#160;DHCP Server</td><td width="65%"><xsl:value-of select="fpc4:VpnDHCPServer" /></td></tr>
                                <tr>
                                    <td width="30%">&#160;L2TP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnEnableL2TP)))" /></td></tr>
                                <tr>
                                    <td width="30%">&#160;PPTP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:VpnEnablePPTP)))" /></td></tr>
                                <tr>
                                    <td width="30%">&#160;RADIUS Accounting</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnEnableRADIUSAccounting)))" /></td></tr>
                                <tr>
                                    <td width="30%">&#160;RADIUS Authentication</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnEnableRADIUSAuthentication)))" /></td></tr>
                                <tr>
                                    <td width="30%">&#160;Max Clients</td><td width="65%"><xsl:value-of select="user:TranslateVpnMaximumClients(number(fpc4:VpnMaximumClients))" /></td></tr>
                                <xsl:variable name="UseDhcpForAddr" select="user:DefaultFalse(number(fpc4:VpnUseDHCPForAddressAssignment))" />
                                <tr>
                                    <td width="30%">&#160;DHCP for Client IP assignment</td><td width="65%"><xsl:value-of
                                        select="user:IsEnabled($UseDhcpForAddr)" /></td></tr>
                                <xsl:if test="0=$UseDhcpForAddr">
                                    <xsl:for-each select="fpc4:IpRangeSet[@StorageName='VpnStaticAddressPool']/fpc4:IpRangeEntry">
                                        <tr>
                                            <td width="30%">&#160;IP Address Range for&#160;</td><td width="65%"><xsl:value-of select="fpc4:IPFrom" /> --&gt; <xsl:value-of
                                                select="fpc4:IPTo" /></td></tr>
                                    </xsl:for-each>
                                </xsl:if>
                                <xsl:variable name="UseDhcpForDns" select="user:DefaultTrue(number(fpc4:VpnUseDHCPForDNS))" />
                                <xsl:variable name="UseDhcpForWins" select="user:DefaultTrue(number(fpc4:VpnUseDHCPForWINS))" />
                                <tr>
                                    <td width="30%">&#160;DHCP for Client DNS assignment</td><td width="65%"><xsl:value-of
                                        select="user:IsEnabled($UseDhcpForDns)" /></td></tr>
                                <xsl:if test="0=$UseDhcpForDns">
                                    <tr><td width="30%">&#160;&#160;Primary DNS Server</td><td width="65%"><xsl:value-of
                                            select="fpc4:VpnPrimaryDNSServer" /></td></tr>
                                    <tr><td width="30%">&#160;&#160;Backup DNS Server</td><td width="65%"><xsl:value-of
                                            select="fpc4:VpnBackupDNSServer" /></td></tr>
                                </xsl:if>
                                <tr>
                                    <td width="30%">&#160;DHCP for Client WINS assignment</td><td width="65%"><xsl:value-of
                                        select="user:IsEnabled($UseDhcpForWins)" /></td></tr>
                                <xsl:if test="0=$UseDhcpForWins">
                                    <tr><td width="30%">&#160;&#160;Primary WINS Server</td><td width="65%"><xsl:value-of
                                            select="fpc4:VpnPrimaryWINSServer" /></td></tr>
                                    <tr><td width="30%">&#160;&#160;Backup WINS Server</td><td width="65%"><xsl:value-of
                                            select="fpc4:VpnBackupWINSServer" /></td></tr>
                                </xsl:if>
                                <tr>
                                    <td width="30%">&#160;Windows Accounting</td><td width="65%"><xsl:value-of select="user:IsEnabled(number(fpc4:VpnEnableWindowsAccounting))" /></td></tr>
                                <xsl:apply-templates select="fpc4:Credentials" />
                                <xsl:apply-templates select="fpc4:DomainMapping" />
                                <tr>
                                    <td colspan="2">
                                        <hr /></td></tr>
                                <tr>
                                    <td colspan="2">
                                        <b>Networks to Accept VPN Connections</b></td></tr>
                                <xsl:apply-templates select="fpc4:Refs" />
                                <tr>
                                    <td colspan="2">
                                        <hr /></td></tr>
                                <tr>
                                    <td colspan="2">
                                        <b>Network to Obtain DHCP Information</b></td></tr>
                                <xsl:apply-templates select="fpc4:Ref" />
                                <xsl:apply-templates select="fpc4:VpnPPPSettings" />
                                <xsl:apply-templates select="fpc4:VpnQuarantineSettings" />
                                <xsl:apply-templates select="fpc4:UserMapping" />
                            </xsl:if>
                            <xsl:apply-templates select="fpc4:VendorParametersSets" />
                        </xsl:element></td></tr>
            </xsl:template>
            <!-- finish this -->
            <xsl:template match="fpc4:VpnNetworkConfiguration">
                <xsl:variable name="enabled" select="user:IsEnabled(number(fpc4:Enabled))" />
                <tr>
                    <td width="30%">&#160;&#160;VPN Network Configuration</td><td width="65%"><xsl:value-of
                        select="$enabled" /></td></tr>
                <xsl:if test="$enabled = 'Enabled'">
                    <xsl:apply-templates select="fpc4:VpnNetworkIPSecSettings" />
                    <xsl:apply-templates select="fpc4:VpnNetworkL2tpPptpSettings" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!-- finish this -->
            <xsl:template match="fpc4:VpnNetworkIPSecSettings">
                <xsl:variable name="UsePFS" select="user:IsEnabled(user:DefaultTrue(number(fpc4:VpnNetworkPhase2UsePFS)))" />
                <tr>
                    <td colspan="2">&#160;&#160;<i>IPSec Settings</i></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Local Server Address</td><td width="65%"><xsl:value-of
                        select="fpc4:VpnNetworkLocalServerAddress" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Remote Server Address</td><td width="65%"><xsl:value-of
                        select="fpc4:VpnNetworkRemoteServerAddress" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Authentication Method</td><td width="65%"><xsl:value-of
                        select="user:TranslateVpnAuthenticationMethod(number(fpc4:VpnNetworkAuthenticationMethod))" /></td></tr>
                <xsl:if test="number(fpc4:VpnNetworkAuthenticationMethod) = 1">
                    <tr>
                        <td width="30%">&#160;&#160;&#160;Pre-shared key</td><td width="65%"><xsl:value-of
                            select="fpc4:VpnNetworkPresharedKey" /></td></tr>
                </xsl:if>
                <tr>
                    <td colspan="2">&#160;&#160;<i>IKE Phase I Parameters</i></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Encryption</td><td width="65%"><xsl:value-of select="user:TranslateVpnEncryption(number(fpc4:VpnNetworkPhase1Encryption))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Integregrity</td><td width="65%"><xsl:value-of
                        select="user:TranslateVpnIntegrity(number(fpc4:VpnNetworkPhase1Integrity))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Diffie-Hellman group</td><td width="65%"><xsl:value-of
                        select="user:TranslateVpnDiffieHellman(number(fpc4:VpnNetworkPhase1DHGroup))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Security Association Lifetime</td><td width="65%"><xsl:value-of
                        select="user:TranslatePhaseRekeyingTime(number(fpc4:VpnNetworkPhase1RekeyingTime), 1)" /> seconds</td></tr>
                <tr>
                    <td colspan="2">&#160;&#160;<i>IKE Phase II Parameters</i></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Encryption</td><td width="65%"><xsl:value-of select="user:TranslateVpnEncryption(number(fpc4:VpnNetworkPhase2Encryption))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Integregrity</td><td width="65%"><xsl:value-of
                        select="user:TranslateVpnIntegrity(number(fpc4:VpnNetworkPhase2Integrity))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Use Perfect Forward Secret (PFS)</td><td width="65%"><xsl:value-of
                        select="$UsePFS" /></td></tr>
                <xsl:if test="string($UsePFS)='true'">
                    <tr>
                        <td width="30%">&#160;&#160;&#160;Diffie-Hellman group</td><td width="65%"><xsl:value-of
                            select="user:TranslateVpnDiffieHellman(number(fpc4:VpnNetworkPhase2DHGroup))" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Security Association Lifetime</td><td width="65%"><xsl:value-of
                        select="user:TranslatePhaseRekeyingTime(number(fpc4:VpnNetworkPhase1RekeyingTime), 2)" /> seconds</td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Kbyte rekeying</td><td width="65%"><xsl:value-of
                        select="user:IsEnabled(number(fpc4:VpnNetworkPhase2UseKBRekeying))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Rekey after sending</td><td width="65%"><xsl:value-of
                        select="user:TranslatePhase2KBRekeying(number(fpc4:VpnNetworkPhase2KBRekeying))" /> KBytes</td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!-- finish this -->
            <xsl:template match="fpc4:VpnNetworkL2tpPptpSettings">
                <xsl:variable name="VpnProtocol" select="number(fpc4:VpnNetworkProtocol)" />
                <xsl:variable name="EnableTimeout" select="user:DefaultFalse(number(fpc4:VpnNetworkUseIdleDisconnectTime))" />
                <tr>
                    <td colspan="2">&#160;&#160;<i><xsl:value-of select="user:TranslateFpcVpnProtocol($VpnProtocol)" /> Settings</i></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Allow Outgoing Connection</td><td width="65%"><xsl:value-of
                        select="user:IsEnabled(number(fpc4:VpnNetworkAllowOutgoingConnection))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Remote Credentials</td><td width="65%"><xsl:value-of
                        select="fpc4:Credentials" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Local Server Address</td><td width="65%"><xsl:value-of
                        select="fpc4:VpnNetworkLocalServerAddress" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Remote Server Address</td><td width="65%"><xsl:value-of
                        select="fpc4:VpnNetworkRemoteServerAddress" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;&#160;Enforce Idle Disconnect</td><td width="65%"><xsl:value-of
                        select="user:IsEnabled($EnableTimeout)" /></td></tr>
                <xsl:if test="$EnableTimeout=true">
                    <tr>
                        <td width="30%">&#160;&#160;&#160;Idle Timeout</td><td width="65%"><xsl:value-of
                            select="user:TranslateVpnIdleDisconnectTime(number(fpc4:VpnNetworkIdleDisconnectTime))" /> seconds</td></tr>
                </xsl:if>
                <xsl:if test="$VpnProtocol=1">
                    <!-- PPTP -->
                    <tr>
                        <td width="30%">&#160;&#160;&#160;CHAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnNetworkEnableCHAP)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;&#160;EAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnNetworkEnableEAP)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;&#160;MSCHAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnNetworkEnableMSCHAP)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;&#160;MSCHAP V2</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultTrue(number(fpc4:VpnNetworkEnableMSCHAPv2)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;&#160;PAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnNetworkEnablePAP)))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;&#160;Shiva PAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnNetworkEnableShivaPAP)))" /></td></tr>
                </xsl:if>
                <xsl:if test="$VpnProtocol=0">
                    <!-- L2TP -->
                    <tr>
                        <td width="30%">&#160;&#160;&#160;Use Preshared Key</td><td width="65%"><xsl:value-of
                            select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnNetworkUsePresharedKey)))" /></td></tr>
                    <xsl:if test="boolean(fpc4:VpnNetworkUsePresharedKey)=true">
                        <tr>
                            <td width="30%">&#160;&#160;&#160;Preshared Key</td><td width="65%"><xsl:value-of
                                select="fpc4:VpnNetworkPresharedKey" /></td></tr>
                    </xsl:if>
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:VpnPPPSettings">
                <tr>
                    <td colspan="2">
                        <hr /><b>PPP Settings</b></td></tr>
                <tr>
                    <td width="30%">&#160;CHAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnPPPEnableCHAP)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;EAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnPPPEnableEAP)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;MSCHAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnPPPEnableMSCHAP)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;MSCHAP V2</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnPPPEnableMSCHAPv2)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;PAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnPPPEnablePAP)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Shiva PAP</td><td width="65%"><xsl:value-of select="user:IsEnabled(user:DefaultFalse(number(fpc4:VpnPPPEnableShivaPAP)))" /></td></tr>
                <!-- Bug this -->
                <!--
                    <tr>
                        <td width="30%">&#160;PPP Flags</td><td width="65%">
                            <xsl:value-of select="user:DefaultZero(number(fpc4:VpnPPPFlags))" /></td></tr>
                -->
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:VpnQuarantineSettings">
                <tr>
                    <td colspan="2">
                        <hr /><b>Quarantine Settings</b></td></tr>
                <tr>
                    <td width="30%">&#160;Mode</td><td width="65%"><xsl:value-of select="user:TranslateFpcVpnQuarantineMode(number(fpc4:VpnQuarantineMode))" /></td></tr>
                <xsl:if test="number(fpc4:VpnQuarantineMode)=1">
                    <tr>
                        <td width="30%">T&#160;imeout</td><td width="65%"><xsl:value-of select="user:TranslateVpnQuarantineTimeout(number(fpc4:VpnQuarantineTimeoutEnabled),number(VpnQuarantineTimeout))" /></td></tr>
                    <xsl:apply-templates select="fpc4:Refs" />
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:WebListener">
                <xsl:param name="arrayName" />
                <tr>
                    <td colspan="2">
                        <hr /><b><xsl:value-of select="fpc4:Name" /></b></td></tr>
                <xsl:apply-templates select="fpc4:Refs/fpc4:Ref">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:IPsOnNetworks">
                    <xsl:with-param name="arrayName" select="$arrayName" />
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:WebListenerProperties">
                    <xsl:with-param name="arrayName" select="$arrayName" />
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:WebListenerProperties">
                <xsl:param name="arrayName" />
                <tr>
                    <td width="30%">&#160;Always Authenticate</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:AlwaysAuthenticate))" /></td></tr>
                <xsl:apply-templates select="fpc4:Refs">
                    <xsl:with-param name="showClass">true</xsl:with-param>
                </xsl:apply-templates>
                <tr>
                    <td width="30%">&#160;Authentication Domain </td><td width="65%"><xsl:value-of select="fpc4:Domain" /></td></tr>
                <tr>
                    <td width="30%">&#160;Basic Authentication</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:BasicAuthentication))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Basic Auth Persistence</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:BasicAuthPersistSingleRequest)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Client Certificate Authentication</td><td width="65%"><xsl:value-of
                        select="boolean(number(fpc4:SSLCertificateAuthentication))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Digest Authentication</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:DigestAuthentication))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Digest Auth Persistence</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:DigestAuthPersistSingleRequest)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Integrated Authentication</td><td width="65%"><xsl:value-of
                        select="boolean(user:DefaultTrue(number(fpc4:IntegratedWindowsAuthentication)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Integrated Auth Persistence</td><td width="65%"><xsl:value-of
                        select="boolean(user:DefaultTrue(number(fpc4:IntegratedAuthPersistSingleRequest)))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Reprompt if Denied</td><td width="65%"><xsl:value-of select="boolean(number(fpc4:ReturnAuthRequiredIfAuthUserDenied))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Single Radius Auth Per Session</td><td width="65%"><xsl:value-of
                        select="boolean(user:DefaultFalse(number(fpc4:SingleRadiusAuthPerSession)))" /></td></tr>
                <tr>
                    <td colspan="2">
                        <br /></td></tr>
                <tr>
                    <td width="30%">&#160;Connection Timeout</td><td width="65%"><xsl:choose><xsl:when
                        test="fpc4:ListenerConnectionTimeout"><xsl:value-of select="user:TranslateMaxLen(number(fpc4:ListenerConnectionTimeout))" />
                    </xsl:when>
                        <xsl:otherwise>120</xsl:otherwise>
                    </xsl:choose> seconds</td></tr>
                <tr>
                    <td width="30%">&#160;Max Connections</td><td width="65%"><xsl:value-of select="user:TranslateMaxLen(number(fpc4:NumberOfConnections))" /></td></tr>
                <tr>
                    <td width="30%">&#160;HTTP Port</td><td width="65%"><xsl:value-of select="user:TranslatePort(number(fpc4:TCPPort))" /></td></tr>
                <tr>
                    <td width="30%">&#160;SSL Port</td><td width="65%"><xsl:value-of select="user:TranslatePort(number(fpc4:SSLPort))" /></td></tr>
                <xsl:apply-templates select="fpc4:AppliedSSLCertificates">
                    <xsl:with-param name="arrayname" select="$arrayName" />
                </xsl:apply-templates>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:WebListeners">
                <xsl:param name="arrayName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($arrayName, '_WebListeners')" />
                </xsl:variable>
                <xsl:variable name="DoProps">
                    <xsl:value-of select="concat( 'ShowTable(', $Name, ');')" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Web Listeners');<xsl:value-of select="$DoProps" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;WebListeners (<xsl:value-of select="count(fpc4:WebListener)" />)</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$Name" />
                            </xsl:attribute>
                            <xsl:apply-templates select="fpc4:WebListener">
                                <xsl:sort select="fpc4:Name" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <xsl:template match="fpc4:WebProxy">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">&#160;<b>Web Proxy</b></td></tr>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <tr><td width="1%" /><td>
                                <table cellspacing="0" style="display: inline">
                                    <tr><td width="30%">Connect Cache Size</td><td width="65%"><xsl:value-of select="user:TranslateWebProxy('connectcache', number(fpc4:ConnectCacheSize))" /> bytes</td></tr>
                                    <tr><td width="30%">Enforce Log URL Length on URL Length</td><td width="65%"><xsl:value-of select="user:DefaultFalse(number(fpc4:EnforceLogUrlLengthOnUrlLength))" /></td></tr>
                                    <tr><td width="30%">Max Response Header Size</td><td width="65%"><xsl:value-of select="user:TranslateWebProxy('responseheader', number(fpc4:MaxResponseHeadersSize))" /> bytes</td></tr>
                                    <tr><td width="30%">Remove All Proxy Auth</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:RemoveAllProxyAuthorization)))" /></td></tr>
                                    <tr><td width="30%">Remove Redundant Proxy Auth</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:RemoveRedundantProxyAuthorization)))" /></td></tr>
                                    <tr><td width="30%">Remove Trailers From Chunked Responses</td><td width="65%"><xsl:value-of select="user:DefaultTrue(number(fpc4:RemoveTrailersFromChunkedEncodedResponses))" /></td></tr>
                                    <tr><td width="30%">Remove Trailers From Chunked Requests</td><td width="65%"><xsl:value-of select="user:DefaultTrue(number(fpc4:RemoveTrailersFromChunkedEncodedRequests))" /></td></tr>
                                    <tr><td width="30%">Resolve CARP Names Using</td><td width="65%"><xsl:value-of select="user:TranslateFpcNameSystem(number(fpc4:CARPNameSystem))" /></td></tr>
                                    <tr><td width="30%">Resolve Upstream Using</td><td width="65%"><xsl:value-of select="user:TranslateFpcNameSystem(number(fpc4:UpstreamResolveSystem))" /></td></tr>
                                    <tr><td width="30%">Skip Authentication for Routing Information</td><td width="65%"><xsl:value-of select="user:DefaultTrue(number(fpc4:SkipAuthenticationForRoutingInformation))" /></td></tr>
                                    <tr><td width="30%">Skip Name Resolution in Forward</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:SkipNameResolutionForAccessAndRoutingRules)))" /></td></tr>
                                    <tr><td width="30%">Skip Name Resolution in Reverse</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:SkipNameResolutionForWebPublishingRules)))" /></td></tr>
                                    <tr><td width="30%">Use Digest SSP</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:UseDigestSSP)))" /></td></tr>
                                    <tr><td width="30%">Validate Client CRL</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:ValidateClientCertificateCRL)))" /></td></tr>
                                    <tr><td width="30%">Validate CRL Online</td><td width="65%"><xsl:value-of select="user:DefaultTrue(number(fpc4:ValidateCrlOnline))" /></td></tr>
                                    <tr><td width="30%">Validate Server CRL in Forward</td><td width="65%"><xsl:value-of select="boolean(user:DefaultTrue(number(fpc4:ValidateServerCertificateCRLInForward)))" /></td></tr>
                                    <tr><td width="30%">Validate Server CRL in Reverse</td><td width="65%"><xsl:value-of select="boolean(user:DefaultFalse(number(fpc4:ValidateServerCertificateCRLInReverse)))" /></td></tr>
                                    <tr><td width="30%">Web Proxy FTP Client Password</td><td width="65%"><xsl:value-of select="user:TranslateWebProxy('ftppassword', string(fpc4:WebProxyFtpClientPassword))" /></td></tr>
                                    <tr><td colspan="2">Tunnel Port Ranges</td></tr>
                                    <xsl:for-each select="fpc4:ProxyTunnelPortRanges/fpc4:ProxyTunnelPortRange">
                                        <xsl:sort select="fpc4:Name" />
                                        <tr><td width="30%">&#160;&#160;<xsl:value-of select="fpc4:Name" /></td><td width="65%"><xsl:value-of select="user:TranslatePortRange(number(fpc4:TunnelLowPort), number(fpc4:TunnelHighPort))" /></td></tr>
                                    </xsl:for-each>
                                <xsl:apply-templates select="fpc4:HTTPCompressionConfiguration "/>
                                <xsl:apply-templates select="fpc4:ExplicitLinkTranslationMappings" />
                                <xsl:apply-templates select="fpc4:LinkTranslationRedirection" />
                                <xsl:apply-templates select="fpc4:Refs" />
                                <xsl:apply-templates select="fpc4:VendorParametersSets" />
                            </table></td></tr></table></td></tr>
            </xsl:template>

<!--*** SILVERSANDS UPDATE START -->
            <xsl:template match="fpc4:WebPublishingProperties">
            <xsl:apply-templates select="fpc4:Ref" />

                <xsl:for-each select="fpc4:Refs[@StorageName != 'UserSets']">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref" />
                </xsl:for-each>

<!--                <xsl:apply-templates select="fpc4:NonWindows-Users" /> -->
<!--                <xsl:apply-templates select="fpc4:PublicNames" /> -->
<!--                <xsl:apply-templates select="fpc4:PathMappings" /> -->

                "|"<xsl:apply-templates select="fpc4:LoadBalancingConfig" />

                "|""|"<xsl:for-each select="fpc4:Refs[@StorageName = 'UserSets']">
                    <xsl:sort select="@StorageName" />
                    <xsl:apply-templates select="fpc4:Ref" />
                </xsl:for-each>


            </xsl:template>
<!--*** SILVERSANDS UPDATE START -->

            <!-- bug this -->
            <xsl:template match="fpc4:WspChaining">
                <xsl:variable name="Enabled" select="user:DefaultZero(number(fpc4:ForwardType))" />
                <tr>
                    <td colspan="2">
                        <hr /><b>Firewall Chaining</b></td></tr>
                <tr>
                    <td width="30%">Route upstream using</td><td width="65%"><xsl:value-of select="user:TranslateFpcForwardType($Enabled)" /></td></tr>
                <xsl:if test="$Enabled = 1">
                    <xsl:variable name="AuthEnabled" select="user:DefaultFalse(number(fpc4:AuthenticationEnabled))" />
                    <tr>
                        <td width="30%">Upstream Server</td><td width="65%"><xsl:value-of select="fpc4:ChainTo" /></td></tr>
                    <tr>
                        <td width="30%">Authentication</td><td width="65%"><xsl:value-of select="user:IsEnabled($AuthEnabled)" /></td></tr>
                    <xsl:if test="$AuthEnabled">
                        <xsl:apply-templates select="fpc4:Credentials" />
                    </xsl:if>
                </xsl:if>
                <xsl:apply-templates select="fpc4:VendorParametersSets" />
            </xsl:template>
            <!--	Security Role Descriptions - deviates from the rest of the schema -->
            <xsl:template match="Actions">
                <tr>
                    <td colspan="2">
                        <b>&#160;&#160;Actions</b></td></tr>
            </xsl:template>
            <xsl:template match="Definition">
                <tr>
                    <td colspan="2">
                        <hr /><b>Definitions</b></td></tr>
                <xsl:apply-templates select="Actions" />
                <xsl:apply-templates select="FileSystem" />
                <xsl:apply-templates select="Memory" />
                <xsl:apply-templates select="Registry" />
                <xsl:apply-templates select="Services" />
                <xsl:apply-templates select="Storage" />
            </xsl:template>
            <xsl:template name="Entries">
                <table>
                    <tr>
                        <td width="65%">&#160;&#160;&#160;<i>Path</i></td><td><i>Permission</i></td><td><i>Allow</i></td><td><i>Protected</i></td><td><i>Inherit</i></td><td><i>Action</i></td></tr><xsl:apply-templates
                            select="Entry" /></table>
            </xsl:template>
            <xsl:template match="Entry">
                <tr>
                    <td>&#160;&#160;&#160;<xsl:value-of select="@path" /></td><td><xsl:value-of select="@permission" /></td><td><xsl:value-of
                        select="@allow" /></td><td><xsl:value-of select="@protected" /></td><td><xsl:value-of
                            select="@inherit" /></td><td><xsl:value-of select="@action" /></td></tr>
            </xsl:template>
            <xsl:template match="FileSystem">
                <tr>
                    <td colspan="2">
                        <b>&#160;&#160;File System</b><xsl:call-template name="Entries" /></td></tr>
            </xsl:template>
            <xsl:template match="Memory">
                <tr>
                    <td colspan="2">
                        <b>&#160;&#160;Memory</b><xsl:call-template name="Entries" /></td></tr>
            </xsl:template>
            <xsl:template match="Permission">
                <tr>
                    <td width="30%">&#160;&#160;<xsl:value-of select="@id" /></td><td width="65%"><xsl:value-of
                        select="@value" /></td></tr>
            </xsl:template>
            <xsl:template match="Permissions">
                <tr>
                    <td colspan="2">
                        <hr /><b>Permissions</b></td></tr>
                <xsl:apply-templates select="Permission" />
            </xsl:template>
            <xsl:template match="Registry">
                <tr>
                    <td colspan="2">
                        <b>&#160;&#160;Registry</b><xsl:call-template name="Entries" /></td></tr>
            </xsl:template>
            <xsl:template match="SecurityRole">
                <tr>
                    <td colspan="2">
                        <table>
                            <xsl:apply-templates select="Permissions" /><xsl:apply-templates select="Definition" /></table></td></tr>
            </xsl:template>
            <xsl:template match="Services">
                <tr>
                    <td colspan="2">
                        <b>&#160;&#160;Services</b><xsl:call-template name="Entries" /></td></tr>
            </xsl:template>
            <xsl:template match="Storage">
                <tr>
                    <td colspan="2">
                        <b>&#160;&#160;Storage</b><xsl:call-template name="Entries" /></td></tr>
            </xsl:template>
            <!--	End of Security Role Section -->
            <!--	HTTP Compression settings - deviates from the rest of the schema -->
            <xsl:template match="Compression">
                <tr>
                    <td width="30%">&#160;&#160;Inspect Compressed Content</td><td><xsl:value-of select="user:IsEnabled(boolean(@ContentInspectionIsRequired))" /></td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="NetworksElements">
                <tr>
                    <td colspan="4">&#160;&#160;<u>Network Elements</u></td></tr>
                <tr style="font-style: italic">
                    <td>&#160;&#160;Name</td><td>Type</td><td>Reply With</td><td>Request For</td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="NetworkElement">
                <tr>
                    <td>&#160;&#160;<xsl:value-of select="@Name" /></td><td><xsl:value-of select="@Type" /></td><td><xsl:value-of
                        select="user:IsEnabled(boolean(@ClientCanAskForCompression))" /></td><td><xsl:value-of
                            select="user:IsEnabled(boolean(@ServerShouldCompressResponse))" /></td></tr>
            </xsl:template>
            <xsl:template match="ContentTypes">
                <tr>
                    <td>&#160;&#160;<u>Content Type Selection</u></td><td><xsl:choose><xsl:when test="string(@CompressOnlyFollowingContentType)='true'">Only</xsl:when>
                        <xsl:otherwise>All Except</xsl:otherwise>
                    </xsl:choose></td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="ContentType">
                <tr>
                    <td>&#160;&#160;<xsl:value-of select="@Name" /></td></tr>
            </xsl:template>
            <!--	End of HTTP Compression settings  -->
            <!--	HTTP Diffserv settings - deviates from the rest of the schema -->
            <xsl:template match="root">
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="Priorities">
                <tr>
                    <td>&#160;&#160;<u>Priorities</u></td></tr>
                <tr style="font-style: italic">
                    <td width="30%">&#160;&#160;Name</td><td>Diffserv Bits</td><td>Size Limit</td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="Priority">
                <tr>
                    <td width="30%">&#160;&#160;<xsl:value-of select="@Name" /></td><td><xsl:value-of
                        select="@DSCP" /></td><td><xsl:choose><xsl:when test="string(@SizeLimit)='true'"><xsl:value-of
                            select="@Limit" />&#160; Bytes
		            </xsl:when>
                            <xsl:otherwise>None</xsl:otherwise>
                        </xsl:choose></td></tr>
            </xsl:template>
            <xsl:template match="URL-Table">
                <tr>
                    <td>&#160;&#160;<u>URLs</u></td></tr>
                <tr style="font-style: italic">
                    <td width="30%">&#160;&#160;URL</td><td>Priority</td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="Domain-Table">
                <tr>
                    <td colspan="4">&#160;&#160;<u>Domains</u></td></tr>
                <tr style="font-style: italic">
                    <td width="30%">&#160;&#160;Domain</td><td>Priority</td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="Domain | URL">
                <tr>
                    <td width="30%">&#160;&#160;<xsl:value-of select="@URL" /></td><td><xsl:value-of
                        select="@Priority" /></td></tr>
            </xsl:template>
            <xsl:template match="QoS-Enabled-Networks">
                <tr>
                    <td colspan="4">&#160;&#160;<u>Networks</u></td></tr>
                <xsl:apply-templates select="*" />
            </xsl:template>
            <xsl:template match="Network">
                <tr>
                    <td>&#160;&#160;<xsl:value-of select="@Name" /></td></tr>
            </xsl:template>
            <!--	End of HTTP Diffserv settings  -->
            <!--	HTTP Filter settings - deviates from the rest of the schema -->
            <xsl:template match="Configuration">
                <tr>
                    <td width="30%">&#160;&#160;Block Executables</td><td width="65%"><xsl:value-of select="boolean(@BlockExecutables)" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Via Header</td><td width="65%"><xsl:value-of select="user:TranslateViaAction(number(@ViaHeaderAction))" /><xsl:if
                        test="@ViaHeaderAction = 1">&#160;<xsl:value-of select="@NewViaHeaderValue" /></xsl:if></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Server Header</td><td width="65%"><xsl:value-of select="user:TranslateSvrAction(number(@ServerHeaderAction))" /><xsl:if
                        test="@ServerHeaderAction = 2">&#160;<xsl:value-of select="@NewServerHeaderValue" /></xsl:if></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Max Request Body Length</td><td width="65%"><xsl:value-of
                        select="user:TranslateMaxLen(number(@MaxRequestBodyLen))" /></td></tr>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <xsl:apply-templates select="*">
                                <xsl:sort select="name()" />
                            </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <xsl:template match="DeniedSignatures">
                <tr>
                    <td colspan="2">&#160;&#160;<u>Denied Signatures</u><table><xsl:apply-templates select="Signature"><xsl:sort
                        select="@Name" />
                    </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <xsl:template match="Extension | Verb">
                <tr>
                    <td width="30%">&#160;&#160;<xsl:value-of select="@Value" /></td><td width="65%"><xsl:value-of
                        select="@Description" /></td></tr>
            </xsl:template>
            <xsl:template match="Extensions | Verbs">
                <tr>
                    <td colspan="2">&#160;&#160;<u>
                        <xsl:value-of select="name()" /></u><table><tr><td width="30%">&#160;&#160;Action</td><td
                            width="65%"><xsl:value-of select="user:TranslateAllowCondition(number(@AllowCondition))" /></td></tr><xsl:apply-templates
                                select="*"><xsl:sort select="@Value" />
                            </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <xsl:template match="RequestHeader | ResponseHeader">
                <tr>
                    <td colspan="2">&#160;<xsl:value-of select="@HeaderName" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Allow</td><td width="65%"><xsl:value-of select="@Allow" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Max Header Value</td><td width="65%"><xsl:value-of select="user:TranslateMaxLen(number(@MaxValueLength))" /></td></tr>
            </xsl:template>
            <xsl:template match="RequestHeaders | ResponseHeaders">
                <xsl:variable name="Name"><xsl:choose>
                    <xsl:when test="name()='RequestHeaders'">Request</xsl:when>
                    <xsl:otherwise>Response</xsl:otherwise>
                </xsl:choose> Headers
		    </xsl:variable>
                <tr>
                    <td colspan="2">&#160;&#160;<u>
                        <xsl:value-of select="$Name" /></u><table><xsl:apply-templates select="*"><xsl:sort
                            select="@HeaderName" />
                        </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <xsl:template match="Signature">
                <tr>
                    <td width="30%">&#160;<i>
                        <xsl:value-of select="@Name" /></i></td><td width="65%"><xsl:value-of select="user:IsEnabled(@Enabled)" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Description</td><td width="65%"><xsl:value-of select="@Description"
                        disable-output-escaping="yes" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Text Format</td><td width="65%"><xsl:value-of select="boolean(@FormatIsText)" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Pattern</td><td width="65%"><xsl:value-of select="@Pattern" /></td></tr>
                <xsl:if test="@SearchInType=0 or @SearchInType=2">
                    <tr>
                        <td width="30%">&#160;&#160;Start at char</td><td width="65%"><xsl:value-of select="@From" /></td></tr>
                    <tr>
                        <td width="30%">&#160;&#160;Stop at char</td><td width="65%"><xsl:value-of select="@To" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;&#160;Search in</td><td width="65%"><xsl:value-of select="user:TranslateSearchIn(number(@SearchInType))" /></td></tr>
                <xsl:if test="@SearchInType=1 or @SearchInType=3">
                    <tr>
                        <td width="30%">&#160;&#160;Search Header</td><td width="65%"><xsl:value-of select="@SearchInHeader" /></td></tr>
                </xsl:if>
            </xsl:template>
            <xsl:template match="UrlValidation">
                <tr>
                    <td colspan="2">&#160;&#160;<u>URL Validation</u><table><tr><td width="30%">&#160;&#160;Allow High-bit Characters</td><td
                        width="65%"><xsl:value-of select="boolean(@AllowHighBitCharacters)" /></td></tr><tr><td
                            width="30%">&#160;&#160;Block Dot in Path</td><td width="65%"><xsl:value-of select="boolean(@BlockDotInPath)" /></td></tr><tr><td
                                width="30%">&#160;&#160;Max Length</td><td width="65%"><xsl:value-of select="user:TranslateMaxLen(number(@MaxLength))" /></td></tr><tr><td
                                    width="30%">&#160;&#160;Max Query Length</td><td width="65%"><xsl:value-of select="user:TranslateMaxLen(number(@MaxQueryLength))" /></td></tr><tr><td
                                        width="30%">&#160;&#160;Normalize Before Scan</td><td width="65%"><xsl:value-of select="boolean(@NormalizeBeforeScan)" /></td></tr><tr><td
                                            width="30%">&#160;&#160;Verify Normalization</td><td width="65%"><xsl:value-of select="boolean(@VerifyNormalization)" /></td></tr><xsl:apply-templates
                                                select="*"><xsl:sort select="@AllowCondition" />
                                            </xsl:apply-templates></table></td></tr>
            </xsl:template>
            <!--	end of HTTP Filter settings -->
            <!--	This is the end of the fpc4: information rendering plant -->
            <!--	This is the start of the custom information rendering plant -->
            <xsl:template match="ACE">
                <xsl:variable name="backslash">
                    <xsl:if test="Trustee/Domain != ''">\</xsl:if>
                </xsl:variable>
                <tr>
                    <td colspan="2">
                        <table cellspacing="0">
                            <tr>
                                <td colspan="2">
                                    <hr /></td></tr><tr><td width="30%">&#160;&#160;<b><xsl:value-of select="concat(Trustee/Domain, $backslash, Trustee/Name)" /></b></td><td
                                        width="65%"><xsl:value-of select="Trustee/SID" /></td></tr><tr><td width="30%">&#160;&#160;&#160;&#160;<xsl:value-of
                                            select="user:TranslateFileAceType(number(Type))" /></td><td width="65%"><xsl:value-of
                                                select="user:TranslateFileAceMask(number(Mask))" /></td></tr></table></td></tr>
            </xsl:template>
            <xsl:template match="Alert">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName" select="concat('row_',$serverName,'_Alert',position())" />
                <xsl:variable name="tblName" select="concat('tbl_',$rowName)" />
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Signaled Alert "<xsl:value-of select="Name" />"');
				    <xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td />
                    <td onclick="SetSelected(this);">&#160;<xsl:value-of select="Name" /> (<xsl:value-of
                        select="count(Instance)" />)
			    <xsl:element name="table"><xsl:attribute name="id"><xsl:value-of select="$tblName" />
                </xsl:attribute>
                    <xsl:attribute name="cellspacing">0</xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <tr>
                        <td width="30%">Severity</td><td width="65%"><xsl:value-of select="Severity" /></td></tr>
                    <tr>
                        <td width="30%">Server</td><td width="65%"><xsl:value-of select="Server" /></td></tr>
                    <xsl:apply-templates select="Instance" />
                </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Application | Security | System">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName" select="concat('row_',$serverName,'_',name())" />
                <xsl:variable name="tblName" select="concat('tbl_',$rowName)" />
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('<xsl:value-of select="name()" /> Event Log');
				    <xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td />
                    <td onclick="SetSelected(this);">&#160;<xsl:value-of select="name()" /> (<xsl:value-of
                        select="count(LogEntry)" />)
			    <xsl:element name="table"><xsl:attribute name="id"><xsl:value-of select="$tblName" />
                </xsl:attribute>
                    <xsl:attribute name="cellspacing">0</xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:apply-templates select="LogEntry">
                        <xsl:sort select="RecordNumber" data-type="number" order="descending" />
                    </xsl:apply-templates>
                </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Binding">
                <xsl:param name="HostHeaders" />
                <tr>
                    <td width="30%">&#160;&#160;&#160;<xsl:if test="string($HostHeaders)='true'">Host Header: '<xsl:value-of
                        select="Name" />'</xsl:if></td><td width="65%"><xsl:value-of select="IP" />:<xsl:value-of
                            select="Port" /></td></tr>
            </xsl:template>
            <xsl:template match="Boot.ini">
                <tr>
                    <td colspan="2">
                        <hr /><b>Boot.ini</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="bootini" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="CPU">
                <tr>
                    <td colspan="2">&#160;<b>
                        <xsl:value-of select="DeviceID" /></b></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Availability</td><td width="65%"><xsl:value-of select="user:TranslateAvailability(number(Availability))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Status</td><td width="65%"><xsl:value-of select="user:TranslateCpuStatus(number(CpuStatus))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Current Clock</td><td width="65%"><xsl:value-of select="CurrentClockSpeed" /> MHz</td></tr>
                <tr>
                    <td width="30%">&#160;&#160;L2 Cache Size</td><td width="65%"><xsl:value-of select="L2CacheSize" /> KB</td></tr>
                <tr>
                    <td width="30%">&#160;&#160;L2 Cache Speed</td><td width="65%"><xsl:value-of select="L2CacheSpeed" /> MHz</td></tr>
            </xsl:template>
            <xsl:template match="DACL | SACL">
                <xsl:variable name="Name">
                    <xsl:choose>
                        <xsl:when test="name()='DACL'">Discretionary</xsl:when>
                        <xsl:otherwise>Security</xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <tr>
                    <td align="center" colspan="2">
                        <hr /><b><xsl:value-of select="$Name" /> Access Control List</b><xsl:choose><xsl:when
                            test="ACE"><xsl:apply-templates select="ACE" />
                        </xsl:when>
                            <xsl:otherwise>
                                <tr>
                                    <td align="center" style="color: blue" colspan="2">Not set</td></tr>
                            </xsl:otherwise>
                        </xsl:choose></td></tr>
            </xsl:template>
            <xsl:template match="Dhcp">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Dhcp Server Dump</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="Disk">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="Name" /></b></td><td width="65%"><xsl:value-of select="Caption" /></td></tr>
                <tr>
                    <td width="30%">&#160;Description</td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;Interface</td><td width="65%"><xsl:value-of select="InterfaceType" /></td></tr>
                <xsl:if test="string(InterfaceType)='SCSI'">
                    <tr>
                        <td width="30%">&#160;SCSI Bus</td><td width="65%"><xsl:value-of select="SCSIBus" /></td></tr>
                    <tr>
                        <td width="30%">&#160;SCSI LUN</td><td width="65%"><xsl:value-of select="SCSILogicalUnitNumber" /></td></tr>
                    <tr>
                        <td width="30%">&#160;SCSI Port</td><td width="65%"><xsl:value-of select="SCSIPort" /></td></tr>
                    <tr>
                        <td width="30%">&#160;SCSI Target ID</td><td width="65%"><xsl:value-of select="SCSITargetId" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">&#160;Last Error Code</td><td width="65%"><xsl:value-of select="LastErrorCode" /></td></tr>
                <tr>
                    <td width="30%">&#160;Manufacturer</td><td width="65%"><xsl:value-of select="Manufacturer" /></td></tr>
                <tr>
                    <td width="30%">&#160;Model</td><td width="65%"><xsl:value-of select="Model" /></td></tr>
                <tr>
                    <td width="30%">&#160;Partitions</td><td width="65%"><xsl:value-of select="Partitions" /></td></tr>
                <tr>
                    <td width="30%">&#160;Size</td><td width="65%"><xsl:value-of select="round(Size div 1048576)" /> MB</td></tr>
                <tr>
                    <td width="30%">&#160;Status</td><td width="65%"><xsl:value-of select="Status" /></td></tr>
            </xsl:template>
            <xsl:template match="Drive">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="Caption" /></b></td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                <xsl:if test="DriveType=3">
                    <tr>
                        <td width="30%">&#160;ChkDisk Recommended</td><td width="65%"><xsl:value-of select="boolean(number(VolumeDirty))" /></td></tr>
                    <tr>
                        <td width="30%">&#160;File System</td><td width="65%"><xsl:value-of select="FileSystem" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Free Space</td><td width="65%"><xsl:value-of select="round(number(FreeSpace) div 1048576)" /> MB</td></tr>
                    <tr>
                        <td width="30%">&#160;Last Error Code</td><td width="65%"><xsl:value-of select="LastErrorCode" /></td></tr>
                    <tr>
                        <td width="30%">&#160;Size</td><td width="65%"><xsl:value-of select="round(number(Size) div 1048576)" /> MB</td></tr>
                    <tr>
                        <td width="30%">&#160;Volume Name</td><td width="65%"><xsl:value-of select="VolumeName" /></td></tr>
                    <xsl:if test="Partition">
                        <tr>
                            <td width="30%">&#160;Partition Location</td><td width="65%"><xsl:value-of select="Partition/DeviceID" /></td></tr>
                        <tr>
                            <td width="30%">&#160;&#160;&#160;Bootable</td><td width="65%"><xsl:value-of select="boolean(number(Partition/BootPartition))" /></td></tr>
                        <tr>
                            <td width="30%">&#160;&#160;&#160;Primary</td><td width="65%"><xsl:value-of select="boolean(number(Partition/PrimaryPartition))" /></td></tr>
                    </xsl:if>
                </xsl:if>
            </xsl:template>
            <xsl:template match="Driver | Service">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="DisplayName" /></b></td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                <tr>
                    <td width="30%">Credentials</td><td width="65%"><xsl:value-of select="StartName" /></td></tr>
                <tr>
                    <td width="30%">Depend on Services</td><td width="65%"><xsl:value-of select="DependOnService" /></td></tr>
                <tr>
                    <td width="30%">Depend on Groups</td><td width="65%"><xsl:value-of select="DependOnGroup" /></td></tr>
                <tr>
                    <td width="30%">Executable Path</td><td width="65%"><xsl:value-of select="PathName" /></td></tr>
                <tr>
                    <td width="30%">Manangement Name</td><td width="65%"><xsl:value-of select="Name" /></td></tr>
                <xsl:if test="ProcessId">
                    <tr>
                        <td width="30%">Process ID</td><td width="65%"><xsl:value-of select="ProcessId" /></td></tr>
                </xsl:if>
                <tr>
                    <td width="30%">Start Mode</td><td width="65%"><xsl:value-of select="StartMode" /></td></tr>
                <tr>
                    <td width="30%">State</td><td width="65%"><xsl:value-of select="State" /></td></tr>
            </xsl:template>
            <xsl:template match="EmptyDataNode">
                <tr>
                    <td colspan="2">Empty Data</td></tr>
            </xsl:template>
            <xsl:template match="EventLogs">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_Eventlogs')" />
                </xsl:variable>
                <tr onclick="ShowStatus('Event Logs');">
                    <td /><td colspan="2" onclick="SetSelected(this);"><xsl:element name="button"><xsl:attribute
                        name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Event Logs
		    </td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="*">
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="File">
                <tr>
                    <td colspan="2">
                        <hr /><b><xsl:value-of select="user:GetPathTail(string(Name))" /></b></td></tr>
                <tr>
                    <td width="30%">Access Mask</td><td width="65%"><xsl:value-of select="user:TranslateFileAceMask(number(AccessMask))" /> (<xsl:value-of
                        select="user:ToHex(number(AccessMask))" />)</td></tr>
                <tr>
                    <td width="30%">Compressed</td><td width="65%"><xsl:value-of select="boolean(number(Compressed))" /></td></tr>
                <tr>
                    <td width="30%">Encrypted</td><td width="65%"><xsl:value-of select="boolean(number(Encrypted))" /></td></tr>
                <tr>
                    <td width="30%">Manufacturer</td><td width="65%"><xsl:value-of select="Manufacturer" /></td></tr>
                <tr>
                    <td width="30%">Size</td><td width="65%"><xsl:value-of select="FileSize" /></td></tr>
                <tr>
                    <td width="30%">Type</td><td width="65%"><xsl:value-of select="FileType" /></td></tr>
                <tr>
                    <td width="30%">Version</td><td width="65%"><xsl:value-of select="Version" /></td></tr>
            </xsl:template>
            <xsl:template match="Files">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_Files')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_',$Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('ISA Executable Files');</xsl:attribute>
                    <td />
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> ISA Executable Files</td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td colspan="2">
                        <table cellspacing="0" style="display: inline">
                            <xsl:apply-templates select="Folder">
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Folder">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_Folder_', position())" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_', $Name)" />
                </xsl:variable>
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('row_', $Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Folder "<xsl:value-of select="user:FixPathWhacks(string(Path))" />"');
				    <xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td width="1%" />
                    <td colspan="2" onclick="SetSelected(this);">&#160;&#160;&#160;&#160;<xsl:value-of
                        select="Path" /></td>
                </xsl:element>
                <tr style="display: none">
                    <td>
                        <xsl:element name="table">
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$tblName" />
                            </xsl:attribute>
                            <xsl:apply-templates select="File">
                                <xsl:sort select="user:GetPathTail(string(Name))" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="Hardware">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_Hardware')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_',$Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Hardware');
				    <xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td />
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Hardware</td>
                </xsl:element>
                <tr style="display: none">
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="cellspacing">o</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$tblName" />
                            </xsl:attribute>
                            <xsl:attribute name="style">display:inline</xsl:attribute>
                            <xsl:apply-templates select="Win32_ComputerSystem">
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="Win32_DiskDrive">
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates><xsl:apply-templates select="Win32_LogicalDisk"><xsl:with-param
                                name="serverName" select="$serverName" />
                            </xsl:apply-templates><xsl:apply-templates select="Win32_POTSModem"><xsl:with-param
                                name="serverName" select="$serverName" />
                            </xsl:apply-templates><xsl:apply-templates select="Win32_NetworkAdapter"><xsl:with-param
                                name="serverName" select="$serverName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="IIS">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $serverName, '_IIS')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('IIS');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td />
                    <td colspan="2" onclick="SetSelected(this);"><button class="toggle" />&#160;IIS</td>
                </xsl:element>
                <tr>
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$tblName" />
                            </xsl:attribute>
                            <xsl:attribute name="style">display:none</xsl:attribute>
                            <xsl:apply-templates select="*">
                                <xsl:sort select="name()" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
            </xsl:template>
            <xsl:template match="Instance">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">
                        <xsl:value-of select="Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Time Stamp</td><td width="65%"><xsl:value-of select="TimeStamp" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Resolution</td><td width="65%"><xsl:value-of select="Resolution" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Acknowledged</td><td width="65%"><xsl:value-of select="boolean(number(Acknowledged))" /></td></tr>
            </xsl:template>
            <xsl:template match="IPConfig">
                <tr>
                    <td colspan="2">
                        <hr /><b>Ipconfig /all</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="IpSecDyn">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh ipsec dyn sho all</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="IpSecSta">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh ipsec sta sho all</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="ISAInfoData">
                <tr>
                    <td colspan="2"><hr />Additional Server Data</td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Created</td><td width="65%"><xsl:value-of select="CreatedTime" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Description</td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Firewall Service Status</td><td width="65%"><xsl:value-of
                        select="user:TranslateSvcStatus(number(FirewallServiceStatus))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Firewall Service Uptime</td><td width="65%"><xsl:value-of
                        select="FirewallServiceUpTime" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;FQDN</td><td width="65%"><xsl:value-of select="FQDN" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Installation Directory</td><td width="65%"><xsl:value-of
                        select="InstallationDirectory" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Job Scheduler Service Status</td><td width="65%"><xsl:value-of
                        select="user:TranslateSvcStatus(number(JobSchedulerServiceStatus))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Job Scheduler Service Uptime</td><td width="65%"><xsl:value-of
                        select="JobSchedulerServiceUpTime" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;MSDE Service Status</td><td width="65%"><xsl:value-of
                        select="user:TranslateSvcStatus(number(MSDEServiceStatus))" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Product ID</td><td width="65%"><xsl:value-of select="ProductID" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Product Version</td><td width="65%"><xsl:value-of select="ProductVersion" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Server Status</td><td width="65%"><xsl:value-of select="user:TranslateSvcStatus(number(ServerStatus))" /></td></tr>
            </xsl:template>
            <xsl:template match="LogEntry">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <xsl:choose>
                        <xsl:when test="EventType">
                            <xsl:value-of select="user:HighlightEvtLogType(number(EventType))" disable-output-escaping="yes" />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="user:HighlightEvtLogType(string(Type))" />
                        </xsl:otherwise>
                    </xsl:choose></tr>
                <tr>
                    <td width="30%">Event Code</td><td width="65%"><xsl:value-of select="EventCode" /></td></tr>
                <tr>
                    <td width="30%">Event ID</td><td width="65%"><xsl:value-of select="user:ToHex(number(EventIdentifier))" /></td></tr>
                <tr>
                    <td width="30%">Data</td><td width="65%"><xsl:value-of select="user:TranslateEventData(string(Data))" /></td></tr>
                <tr>
                    <td width="30%">Generated</td><td width="65%"><xsl:value-of select="TimeGenerated" /></td></tr>
                <tr>
                    <td width="30%">Source</td><td width="65%"><xsl:value-of select="SourceName" disable-output-escaping="yes" /></td></tr>
                <tr>
                    <td width="30%">Message</td><td width="65%"><xsl:value-of select="Message" /></td></tr>
            </xsl:template>
            <xsl:template match="Modem">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">
                        <b>
                            <xsl:value-of select="Caption" /></b></td></tr>
                <tr>
                    <td width="30%">Description</td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                <tr>
                    <td width="30%">Answer Mode</td><td width="65%"><xsl:value-of select="AnswerMode" /></td></tr>
                <tr>
                    <td width="30%">Attached To</td><td width="65%"><xsl:value-of select="AttachedTo" /></td></tr>
                <tr>
                    <td width="30%">Configuration Dialog</td><td width="65%"><xsl:value-of select="ConfigurationDialog" /></td></tr>
                <tr>
                    <td width="30%">Max Baud Rate</td><td width="65%"><xsl:value-of select="MaxBaudRateToPhone" /></td></tr>
                <tr>
                    <td width="30%">Max Serial Port Baud Rate</td><td width="65%"><xsl:value-of select="MaxBaudRateToSerialPort" /></td></tr>
                <tr>
                    <td width="30%">Model</td><td width="65%"><xsl:value-of select="Model" /></td></tr>
                <tr>
                    <td width="30%">Modem Inf File Path</td><td width="65%"><xsl:value-of select="ModemInfPath" /></td></tr>
                <tr>
                    <td width="30%">Status</td><td width="65%"><xsl:value-of select="Status" /></td></tr>
            </xsl:template>
            <xsl:template match="MSFTPSVC | NNTPSVC | SMTPSVC | W3SVC">
                <xsl:variable name="HostHeaders" select="boolean(string(name())='W3SVC')" />
                <tr>
                    <td colspan="2">
                        <hr /><b><xsl:if test="string(name())='MSFTPSVC'">FTP Services</xsl:if><xsl:if test="string(name())='NNTPSVC'">NNTP Services</xsl:if><xsl:if
                            test="string(name())='SMTPSVC'">SMTP Services</xsl:if><xsl:if test="string(name())='W3SVC'">WWW Services</xsl:if></b></td></tr>
                <xsl:choose>
                    <xsl:when test="string(.)='not installed'">
                        <tr>
                            <td colspan="2">&#160;Not Installed</td></tr>
                    </xsl:when>
                    <xsl:otherwise>
                        <tr>
                            <td width="30%">&#160;Service Socket Pooling</td><td width="65%"><xsl:value-of select="user:IsEnabled(not(DisableSocketPooling))" /></td></tr>
                        <tr>
                            <td colspan="2">&#160;Virtual Servers<table>
                                <xsl:apply-templates select="VirtualServer">
                                    <xsl:with-param name="HostHeaders" select="$HostHeaders" />
                                </xsl:apply-templates></table></td></tr>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:template>
            <xsl:template match="NetshHlpr">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Show Helper</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="NetInfo">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $serverName, '_NetInfo')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Network Information');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td />
                    <td onclick="SetSelected(this);">&#160;Network Information
				    <xsl:element name="table">
                        <xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:apply-templates select="*" />
                    </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Netstat">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netstat -R</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="NIC">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td colspan="2">
                        <b>
                            <xsl:value-of select="Description" /></b></td></tr>
                <tr>
                    <td width="30%">&#160;Index</td><td width="65%"><xsl:value-of select="Index" /></td></tr>
                <tr>
                    <td width="30%">&#160;Last Reset</td><td width="65%"><xsl:value-of select="user:ConvertWmiDateTime(string(TimeOfLastReset))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Last Error</td><td width="65%"><xsl:value-of select="ConfigManagerErrorCode" /></td></tr>
                <tr>
                    <td width="30%">&#160;MAC</td><td width="65%"><xsl:value-of select="MACAddress" /></td></tr>
                <tr>
                    <td width="30%">&#160;Net Connection Status</td><td width="65%"><xsl:value-of select="user:TranslateNetStatus(number(NetConnectionStatus))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Service Name</td><td width="65%"><xsl:value-of select="ServiceName" /></td></tr>
                <tr>
                    <td width="30%">&#160;Type</td><td width="65%"><xsl:value-of select="AdapterType" /></td></tr>
            </xsl:template>
            <xsl:template match="OsInfo">
                <tr>
                    <td colspan="2">
                        <hr /><b><xsl:value-of select="Caption" /></b></td></tr>
                <tr>
                    <td width="30%">&#160;Build Number</td><td width="65%"><xsl:value-of select="BuildNumber" /></td></tr>
                <tr>
                    <td width="30%">&#160;Build Type</td><td width="65%"><xsl:value-of select="BuildType" /></td></tr>
                <tr>
                    <td width="30%">&#160;Domain (Workgroup)</td><td width="65%"><xsl:value-of select="../../Hardware/Win32_ComputerSystem/Domain" /></td></tr>
                <tr>
                    <td width="30%">&#160;Language Code</td><td width="65%"><xsl:value-of select="OSLanguage" /></td></tr>
                <tr>
                    <td width="30%">&#160;Role</td><td width="65%"><xsl:value-of select="user:TranslateDomainRole(number(../../Hardware/Win32_ComputerSystem/DomainRole))" /></td></tr>
                <tr>
                    <td width="30%">&#160;Serial Number</td><td width="65%"><xsl:value-of select="SerialNumber" /></td></tr>
                <tr>
                    <td width="30%">&#160;Service Pack</td><td width="65%"><xsl:value-of select="number(ServicePackMajorVersion)" />.<xsl:value-of
                        select="number(ServicePackMinorVersion)" /></td></tr>
                <tr>
                    <td width="30%">&#160;System Device</td><td width="65%"><xsl:value-of select="SystemDevice" /></td></tr>
                <tr>
                    <td width="30%">&#160;System Directory</td><td width="65%"><xsl:value-of select="SystemDirectory" /></td></tr>
                <tr>
                    <td width="30%">&#160;Total Virtual Memory</td><td width="65%">~ <xsl:value-of select="round(TotalVirtualMemorySize div 1024)" /> MB</td></tr>
                <tr>
                    <td width="30%">&#160;Windows Directory</td><td width="65%"><xsl:value-of select="WindowsDirectory" /></td></tr>
                <xsl:apply-templates select="../Boot.ini" />
                <xsl:apply-templates select="../Win32_PageFile" />
                <xsl:apply-templates select="../Win32_QuickFixEngineering" />
            </xsl:template>
            <xsl:template match="Process">
                <xsl:param name="serverName" />
                <xsl:variable name="Parent" select="ParentProcessId" />
                <xsl:variable name="ProcessID" select="ProcessId" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">
                        <b>
                            <xsl:value-of select="Name" /></b></td><td width="65%"><xsl:if test="string(Name)='svchost.exe'"><xsl:value-of
                                select="user:GetServiceNames(../../Win32_Service/Service[ProcessId=$ProcessID])"
                                disable-output-escaping="yes" />
                            </xsl:if></td></tr>
                <tr>
                    <td width="30%">&#160;Handle Count</td><td width="65%"><xsl:value-of select="HandleCount" /></td></tr>
                <tr>
                    <td width="30%">&#160;Kernel Mode Time</td><td width="65%"><xsl:value-of select="KernelModeTime" /></td></tr>
                <tr>
                    <td width="30%">&#160;Parent Process</td><td width="65%"><xsl:value-of select="../Process[ProcessId=$Parent]/Name" /></td></tr>
                <tr>
                    <td width="30%">&#160;Priority</td><td width="65%"><xsl:value-of select="Priority" /></td></tr>
                <tr>
                    <td width="30%">&#160;Process ID</td><td width="65%"><xsl:value-of select="$ProcessID" /></td></tr>
                <tr>
                    <td width="30%">&#160;Running As</td><td width="65%"><xsl:value-of select="Owner" /> (<xsl:value-of
                        select="OwnerSID" />)</td></tr>
                <tr>
                    <td width="30%">&#160;User Mode Time</td><td width="65%"><xsl:value-of select="UserModeTime" /></td></tr>
            </xsl:template>
            <xsl:template match="RoutingTable">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netstat -R</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="RrasIntfc">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Routing IP Show Interface</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="RrasPersRoutes">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Routing IP Show Persistent Routes</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="RrasRtmDest">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Routing IP Show RTM Destinations</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="RrasRtmRoutes">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Routing IP Show RTM Routes</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="RrasRlyGlobal">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Routing IP Relay Show Global</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="RrasRlyIfCfg">
                <tr>
                    <td colspan="2">
                        <hr /><b>Netsh Routing IP Relay Show IFConfig</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="SecurityDescriptor">
                <xsl:param name="Source" />
                <tr>
                    <td colspan="2">
                        <table>
                            <tr>
                                <td colspan="2">
                                    <b><xsl:value-of select="$Source" /> Security Descriptor</b></td></tr><xsl:choose><xsl:when
                                        test="ControlFlags"><tr><td width="30%">&#160;&#160;Control Flags</td><td width="65%"><xsl:value-of
                                            select="user:TranslateControlFlags(number(ControlFlags))" /></td></tr>
                                        <tr>
                                            <td width="30%">&#160;&#160;Owner</td><td width="65%"><xsl:value-of select="Owner" /></td></tr>
                                        <tr>
                                            <td width="30%">&#160;&#160;Group</td><td width="65%"><xsl:value-of select="Group" /></td></tr>
                                        <xsl:apply-templates select="DACL" />
                                        <xsl:apply-templates select="SACL" />
                                    </xsl:when>
                                        <xsl:otherwise>
                                            <tr>
                                                <td width="30%">&#160;&#160;Error</td><td width="65%"><xsl:value-of select="." /></td></tr>
                                        </xsl:otherwise>
                                    </xsl:choose></table></td></tr>
            </xsl:template>
            <xsl:template match="Share">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName" select="concat('row_',$serverName,'_Share',position())" />
                <xsl:variable name="tblName" select="concat('tbl_',$rowName)" />
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Share "<xsl:value-of select="Name" />"');<xsl:value-of
                        select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td colspan="2" onclick="SetSelected(this);">&#160;&#160;&#160;<xsl:value-of select="Name" /><xsl:element
                        name="table"><xsl:attribute name="id"><xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <tr>
                            <td width="30%">Caption</td><td width="65%"><xsl:value-of select="Caption" /></td></tr>
                        <tr>
                            <td width="30%">Description</td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                        <tr>
                            <td width="30%">Path</td><td width="65%"><xsl:value-of select="Path" /></td></tr>
                        <tr>
                            <td width="30%">Status</td><td width="65%"><xsl:value-of select="Status" /></td></tr>
                        <tr>
                            <td width="30%">Type</td><td width="65%"><xsl:value-of select="user:ToHex(number(Type))" /></td></tr>
                        <xsl:choose>
                            <xsl:when test="SecurityDescriptor">
                                <xsl:apply-templates select="SecurityDescriptor">
                                    <xsl:with-param name="Source">Share</xsl:with-param>
                                </xsl:apply-templates>
                                <tr>
                                    <td colspan="2">
                                        <hr /></td></tr>
                            </xsl:when>
                            <xsl:otherwise>
                                <tr>
                                    <td colspan="2">Admin Share</td></tr>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test="Folder">
                            <xsl:apply-templates select="Folder/SecurityDescriptor">
                                <xsl:with-param name="Source">Folder</xsl:with-param>
                            </xsl:apply-templates>
                        </xsl:if>
                    </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="SignaledAlerts">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_SigAlerts')" />
                </xsl:variable>
                <tr onclick="ShowStatus('Signaled Alerts');">
                    <td /><td colspan="2" onclick="SetSelected(this);"><xsl:element name="button"><xsl:attribute
                        name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Signaled Alerts (<xsl:value-of select="count(Alert)" />)
		    </td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="*">
                                <xsl:sort select="Name" />
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="VirtualServer">
                <xsl:param name="HostHeaders" />
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">&#160;<i>
                        <xsl:value-of select="Name" /></i></td><td width="65%"><xsl:value-of select="State" /></td></tr>
                <tr>
                    <td width="30%">&#160;&#160;Virtual Server Socket Pooling</td><td width="65%"><xsl:value-of
                        select="user:IsEnabled(not(DisableSocketPooling))" /></td></tr>
                <tr>
                    <td colspan="2">&#160;&#160;Bindings</td></tr>
                <xsl:apply-templates select="Binding">
                    <xsl:sort select="Name" />
                    <xsl:with-param name="HostHeaders">
                        <xsl:value-of select="$HostHeaders" />
                    </xsl:with-param>
                </xsl:apply-templates>
            </xsl:template>
            <xsl:template match="Winsock">
                <tr>
                    <td colspan="2">
                        <hr /><b>Winsock Catalog</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netinfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="Win32_ComputerSystem">
                <tr>
                    <td colspan="2">
                        <hr /></td></tr>
                <tr>
                    <td width="30%">Boot State</td><td width="65%"><xsl:value-of select="BootupState" /></td></tr>
                <tr>
                    <td width="30%">Time Zone</td><td width="65%">GMT <xsl:value-of select="CurrentTimeZone div 60" /> hours</td></tr>
                <tr>
                    <td width="30%">Description</td><td width="65%"><xsl:value-of select="Description" /></td></tr>
                <tr>
                    <td width="30%">Manufacturer</td><td width="65%"><xsl:value-of select="Manufacturer" /></td></tr>
                <tr>
                    <td width="30%">Model</td><td width="65%"><xsl:value-of select="Model" /></td></tr>
                <tr>
                    <td colspan="2"><br />Processors(<xsl:value-of select="NumberOfProcessors" />)</td></tr>
                <xsl:apply-templates select="../Win32_Processor/CPU" />
                <tr>
                    <td colspan="2">
                        <br /></td></tr>
                <tr>
                    <td width="30%">RAM</td><td width="65%"><xsl:value-of select="round(TotalPhysicalMemory div 1048576)" /> MB</td></tr>
                <xsl:apply-templates select="../../Boot.ini" />
            </xsl:template>
            <xsl:template match="Win32_DiskDrive">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $serverName, '_DiskDrives')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Non-Removable Storage');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Non-Removable Storage (<xsl:value-of select="count(Disk)" />)
			    <xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$tblName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:apply-templates select="Disk">
                        <xsl:sort select="DeviceID" />
                    </xsl:apply-templates>
                </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_LogicalDisk">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $serverName, '_LogicalDrives')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Logical Drives');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Logical Drives (<xsl:value-of select="count(Drive)" />)
				    <xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:apply-templates select="Drive">
                            <xsl:sort select="Caption" />
                        </xsl:apply-templates>
                    </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_NetworkAdapter">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $serverName, '_NICs')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Network Adapters');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Network Interfaces (<xsl:value-of select="count(NIC)" />)
				    <xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:apply-templates select="NIC">
                            <xsl:sort select="Index" />
                        </xsl:apply-templates>
                    </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_OperatingSystem">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_OperatingSystem')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_',$Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Operating System');
				    <xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td />
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Operating System</td>
                </xsl:element>
                <tr style="display: none">
                    <td colspan="2">
                        <xsl:element name="table">
                            <xsl:attribute name="cellspacing">0</xsl:attribute>
                            <xsl:attribute name="id">
                                <xsl:value-of select="$tblName" />
                            </xsl:attribute>
                            <xsl:attribute name="style">display:inline</xsl:attribute>
                            <xsl:apply-templates select="OsInfo">
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates>
                        </xsl:element></td></tr>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td width="1%" />
                    <td>
                        <table cellspacing="0">
                            <xsl:apply-templates select="../NetInfo">
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates><xsl:apply-templates select="Win32_SystemDriver"><xsl:with-param
                                name="serverName" select="$serverName" />
                            </xsl:apply-templates><xsl:apply-templates select="Win32_Process"><xsl:with-param
                                name="serverName" select="$serverName" />
                            </xsl:apply-templates><xsl:apply-templates select="Win32_Service"><xsl:with-param
                                name="serverName" select="$serverName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_PageFile">
                <tr>
                    <td colspan="2">
                        <hr /><b>Page Files</b><table><xsl:for-each select="PageFile"><tr><td><table><tr><td
                            colspan="2"><hr /><b><xsl:value-of select="Name" /></b></td></tr><tr><td width="30%">&#160;Compressed</td><td
                                width="65%"><xsl:value-of select="boolean(number(Compressed))" /></td></tr><tr><td
                                    width="30%">&#160;Current File Size</td><td width="65%"><xsl:value-of select="FileSize div 1048576" /> MB</td></tr><tr><td
                                        width="30%">&#160;File System</td><td width="65%"><xsl:value-of select="FSName" /></td></tr><tr><td
                                            width="30%">&#160;Initial Size</td><td width="65%"><xsl:value-of select="InitialSize" /> MB</td></tr><tr><td
                                                width="30%">&#160;Maximum Size</td><td width="65%"><xsl:value-of select="MaximumSize" /> MB</td></tr></table></td></tr>
                        </xsl:for-each></table></td></tr>
            </xsl:template>
            <xsl:template match="Win32_POTSModem">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName">
                    <xsl:value-of select="concat('Row_', $serverName, '_POTSModem')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('Tbl_', $rowName)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Modems');<xsl:value-of select="concat('ShowTable(', $tblName, ');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Modems (<xsl:value-of select="count(Modem)" />)
				    <xsl:element name="table"><xsl:attribute name="cellspacing">0</xsl:attribute>
                        <xsl:attribute name="id">
                            <xsl:value-of select="$tblName" />
                        </xsl:attribute>
                        <xsl:attribute name="style">display:none</xsl:attribute>
                        <xsl:apply-templates select="Modem">
                            <xsl:sort select="Caption" />
                        </xsl:apply-templates>
                    </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_Process">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName" select="concat('row_',$serverName,'_',name())" />
                <xsl:variable name="tblName" select="concat('tbl_',$rowName)" />
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('Processes');
				    <xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;Processes (<xsl:value-of select="count(*)" />)
			    <xsl:element name="table"><xsl:attribute name="id"><xsl:value-of select="$tblName" />
                </xsl:attribute>
                    <xsl:attribute name="cellspacing">0</xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:apply-templates select="*">
                        <xsl:sort select="Name" data-type="text" order="ascending" />
                    </xsl:apply-templates>
                </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_QuickFixEngineering">
                <tr>
                    <td colspan="2">
                        <hr /><b>Hot Fixes</b><table><xsl:for-each select="Hotfix"><tr><td><table><tr><td
                            colspan="2"><hr /></td></tr><tr><td width="30%"><b><xsl:value-of select="HotFixID" /></b></td><td
                                width="65%"><xsl:value-of select="Description" /></td></tr><tr><td width="30%">Service Pack</td><td
                                    width="65%"><xsl:value-of select="ServicePackInEffect" /></td></tr></table></td></tr>
                        </xsl:for-each></table></td></tr>
            </xsl:template>
            <xsl:template match="Win32_Service | Win32_SystemDriver">
                <xsl:param name="serverName" />
                <xsl:variable name="rowName" select="concat('row_',$serverName,'_',name())" />
                <xsl:variable name="tblName" select="concat('tbl_',$rowName)" />
                <xsl:variable name="context">
                    <xsl:choose>
                        <xsl:when test="name()='Win32_Service'">Service</xsl:when>
                        <xsl:otherwise>Driver</xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:inline</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$rowName" />
                    </xsl:attribute>
                    <xsl:attribute name="onclick">ShowStatus('<xsl:value-of select="$context" />');
				    <xsl:value-of select="concat('ShowTable(',$tblName,');')" /></xsl:attribute>
                    <td width="1%" />
                    <td onclick="SetSelected(this);">&#160;<xsl:value-of select="$context" />s (<xsl:value-of
                        select="count(*)" />)
			    <xsl:element name="table"><xsl:attribute name="id"><xsl:value-of select="$tblName" />
                </xsl:attribute>
                    <xsl:attribute name="cellspacing">0</xsl:attribute>
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:apply-templates select="*">
                        <xsl:sort select="DisplayName" data-type="text" order="ascending" />
                    </xsl:apply-templates>
                </xsl:element></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="Win32_Share">
                <xsl:param name="serverName" />
                <xsl:variable name="Name">
                    <xsl:value-of select="concat($serverName, '_Shares')" />
                </xsl:variable>
                <xsl:variable name="tblName">
                    <xsl:value-of select="concat('tbl_',$Name)" />
                </xsl:variable>
                <xsl:element name="tr">
                    <xsl:attribute name="onclick">ShowStatus('Shares');</xsl:attribute>
                    <td />
                    <td colspan="2" onclick="SetSelected(this);"><xsl:element name="button">
                        <xsl:attribute name="class">Toggle</xsl:attribute>
                        <xsl:attribute name="onclick">
                            <xsl:value-of select="concat('ToggleDisplay(', $Name, ', false );')" />
                        </xsl:attribute>
                    </xsl:element> Shares (<xsl:value-of select="count(Share)" />)</td>
                </xsl:element>
                <xsl:element name="tr">
                    <xsl:attribute name="style">display:none</xsl:attribute>
                    <xsl:attribute name="id">
                        <xsl:value-of select="$Name" />
                    </xsl:attribute>
                    <td colspan="2">
                        <table cellspacing="0" style="display: inline">
                            <xsl:apply-templates select="Share">
                                <xsl:sort select="Name" />
                                <xsl:with-param name="serverName" select="$serverName" />
                            </xsl:apply-templates></table></td>
                </xsl:element>
            </xsl:template>
            <xsl:template match="WlbsDisplay">
                <tr>
                    <td colspan="2">
                        <hr /><b>WLBS /Display</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="wpad.dat">
                <tr>
                    <td colspan="2">
                        <hr /><b>wpad.dat</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <xsl:template match="wspad.dat">
                <tr>
                    <td colspan="2">
                        <hr /><b>wspad.dat</b></td></tr>
                <tr>
                    <td colspan="2" align="center">
                        <textarea class="netInfo" contenteditable="false">
                            <xsl:value-of select="." /></textarea></td></tr>
            </xsl:template>
            <!--	This is the end of the custom information rendering plant -->
        <!--	This is the end of the isa2k4 information rendering plant -->
        </xsl:stylesheet>
    </xml>
    <div id="defaultWindow" style="display=none">
        <style type="text/css">

			body { 
				background:			lightskyblue;
			} 

			table {
				cellspacing:		0; 
				cellpadding:		0;
				width:				100%;
				font-weight:		normal;
			}

			td {    
				font-family: 		Arial; 
				font-size:			9pt; 
				font-weight:		normal;
				color:				darkblue;
			}

			th { 
				font-family: 		Trebuchet MS; 
				font-size:			9pt; 
				font-weight:		bold;
				FONT-FAMILY:		sans-serif; 
				FONT-VARIANT:		small-caps;
				color:				royalblue;
			}

			tr {
				height:				.75;
				align:				left;
			}

		</style>
    </div>
    <div id="oToolTip" style="display: none;">
        <div style="border: 2px solid black; font: normal 6pt arial; filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=0, StartColorStr=lightblue, EndColorStr=#FFFFFF);
            padding: 5px">
            <span id="popupbody">
                <table>
                    <tr>
                        <td width="30%" style="font: normal 8pt arial">
                            identity column</td>
                        <td width="65%" style="font: normal 8pt arial">
                            data column</td>
                    </tr>
                </table>
            </span>
        </div>
    </div>
    <div id="oDialog" style="display: none;">
        <div id="myid" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;
            background: #cccccc; border: 1px solid black; border-top: 1px solid white; border-left: 1px solid white;
            padding: 10px; font: normal 10pt tahoma; padding-left: 18px">
            <b>Rich Message Boxes</b><hr size="1" style="border: 1px solid black;">
            <div style="width: 220px; font-family: tahoma; font-size: 80%; line-height: 1.5em">
                <br>
                This message box is written entirely in Dynamic HTML (DHTML) using Cascading Style
                Sheets (CSS). You can dynamically change properties of this message box. For instance,
                click the button below to change the color of the popup object.
                <br>
                <br>
                <br>
                <button style="background: #cccccc" onclick="myid.style.backgroundColor='#3366CC';"
                    tabindex="-1" id="Button1">
                    Change Color</button>
            </div>
            <br>
            <br>
            <button tabindex="-1" onclick="parent.oPopup.hide();" style="border: 1px solid black;
                border-left: 1px solid white; border-top: 1px solid white; background: #cccccc"
                id="Button2">
                Close Message</button>
        </div>
</body>
</html>
